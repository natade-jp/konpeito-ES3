[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/konpeitoWSH.js",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\n import Polyfill from \"./math/tools/Polyfill.js\";\n import typeComplex from \"./math/core/Complex.js\";\n import typeMatrix from \"./math/core/Matrix.js\";\n\n/**\n * konpeitoWSH\n */\n// @ts-ignore\n// eslint-disable-next-line no-undef\nconst konpeitoWSH = {\n\t\n\t/**\n \t * @type {typeof typeComplex}\n\t */\n\tComplex : typeComplex,\n\t\n\t/**\n \t * @type {typeof typeMatrix}\n\t */\n\tMatrix : typeMatrix\n\n};\n\nexport default konpeitoWSH;\n\nconst global_var = ( function() { return this; } ).apply( null, [] );\n\nif(!(\"Complex\" in global_var)) {\n\t// @ts-ignore\n\tComplex = typeComplex;\n}\n\nif(!(\"Matrix\" in global_var)) {\n\t// @ts-ignore\n\tMatrix = typeMatrix;\n}\n\n",
    "static": true,
    "longname": "D:/JavaScript/konpeitoWSH/src/konpeitoWSH.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "global_var",
    "memberof": "src/konpeitoWSH.js",
    "static": true,
    "longname": "src/konpeitoWSH.js~global_var",
    "access": "public",
    "export": false,
    "importPath": "konpeito_wsh/src/konpeitoWSH.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "konpeitoWSH",
    "memberof": "src/konpeitoWSH.js",
    "static": true,
    "longname": "src/konpeitoWSH.js~konpeitoWSH",
    "access": "public",
    "export": true,
    "importPath": "konpeito_wsh/src/konpeitoWSH.js",
    "importStyle": "konpeitoWSH",
    "description": "konpeitoWSH",
    "lineNumber": 20,
    "type": {
      "types": [
        "{\"Complex\": *, \"Matrix\": *}"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "file",
    "name": "src/math/core/Complex.js",
    "content": "﻿/**\n * The script is part of konpeitoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport Probability from \"./tools/Probability.js\";\nimport Random from \"./tools/Random.js\";\n\n/**\n * @param {any} obj \n * @returns {boolean} \n * @private\n */\n const instanceofComplex = function(obj) {\n\treturn obj.isComplexData ? obj.isComplexData() : false;\n}\n\n/**\n * Complex type argument.\n * - Complex\n * - number\n * - boolean\n * - string\n * - Array<number>\n * - {_re:number,_im:number}\n * - {doubleValue:number}\n * - {toString:function}\n * \n * Initialization can be performed as follows.\n * - 1200, \"1200\", \"12e2\", \"1.2e3\"\n * - \"3 + 4i\", \"4j + 3\", [3, 4].\n * @typedef {Complex|number|boolean|string|Array<number>|{_re:number,_im:number}|{doubleValue:number}|{toString:function}} KComplexInputData\n */\n\n/**\n * Random number generation class used within Complex.\n * @type {Random}\n * @ignore\n */\nconst random_class = new Random();\n\n/**\n * Collection of functions used in Complex.\n * @ignore\n */\nclass ComplexTool {\n\n\t/**\n\t * Create data for complex numbers from strings.\n\t * @param {string} text - Target strings.\n\t * @returns {{real : number, imag : number}}\n\t */\n\tstatic ToComplexFromString(text) {\n\t\tlet str = text.replace(/\\s/g, \"\").toLowerCase();\n\t\tstr = str.replace(/infinity|inf/g, \"1e100000\");\n\t\t// 複素数の宣言がない場合\n\t\tif(!(/[ij]/.test(str))) {\n\t\t\treturn {\n\t\t\t\treal : parseFloat(str),\n\t\t\t\timag : 0.0\n\t\t\t};\n\t\t}\n\t\t// この時点で複素数である。\n\t\t// 以下真面目に調査\n\t\tlet re = 0;\n\t\tlet im = 0;\n\t\tlet buff;\n\t\t// 最後が$なら右側が実数、最後が[+-]なら左側が実数\n\t\tbuff = str.match(/[+-]?(([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)|(nan))($|[+-])/);\n\t\tif(buff) {\n\t\t\tre = parseFloat(buff[0]);\n\t\t}\n\t\t// 複素数は数値が省略される場合がある\n\t\tbuff = str.match(/[+-]?(([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)|(nan))?[ij]/);\n\t\tif(buff) {\n\t\t\tbuff = buff[0].substring(0, buff[0].length - 1);\n\t\t\t// i, +i, -j のように実数部がなく、数値もない場合\n\t\t\tif((/^[-+]$/.test(buff)) || buff.length === 0) {\n\t\t\t\tim = buff === \"-\" ? -1 : 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tim = parseFloat(buff);\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\treal : re,\n\t\t\timag : im\n\t\t};\n\t}\n\n}\n\n/**\n * Complex number class. (immutable)\n */\nexport default class Complex {\n\n\t/**\n\t * Create a complex number.\n\t * \n\t * Initialization can be performed as follows.\n\t * - 1200, \"1200\", \"12e2\", \"1.2e3\"\n\t * - \"3 + 4i\", \"4j + 3\", [3, 4].\n\t * @param {KComplexInputData} number - Complex number. See how to use the function.\n\t */\n\tconstructor(number) {\n\t\t\n\t\t// 行列で使うためイミュータブルは必ず守ること。\n\t\tif(arguments.length === 1) {\n\t\t\tconst obj = number;\n\t\t\tif(instanceofComplex(obj)) {\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * The real part of this Comlex.\n\t\t\t\t * @private\n\t\t\t\t * @type {number}\n\t\t\t\t */\n\t\t\t\tthis._re = obj._re;\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * The imaginary part of this Comlex.\n\t\t\t\t * @private\n\t\t\t\t * @type {number}\n\t\t\t\t */\n\t\t\t\tthis._im = obj._im;\n\t\t\t}\n\t\t\telse if(typeof obj === \"number\") {\n\t\t\t\tthis._re = obj;\n\t\t\t\tthis._im = 0.0;\n\t\t\t}\n\t\t\telse if(typeof obj === \"string\") {\n\t\t\t\tconst x = ComplexTool.ToComplexFromString(obj);\n\t\t\t\tthis._re = x.real;\n\t\t\t\tthis._im = x.imag;\n\t\t\t}\n\t\t\telse if(obj instanceof Array) {\n\t\t\t\tif(obj.length === 2) {\n\t\t\t\t\tthis._re = obj[0];\n\t\t\t\t\tthis._im = obj[1];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow \"Complex Unsupported argument \" + arguments;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(typeof obj === \"boolean\") {\n\t\t\t\tthis._re = obj ? 1 : 0;\n\t\t\t\tthis._im = 0.0;\n\t\t\t}\n\t\t\telse if((\"_re\" in obj) && (\"_im\" in obj)) {\n\t\t\t\tthis._re = obj._re;\n\t\t\t\tthis._im = obj._im;\n\t\t\t}\n\t\t\telse if(instanceofComplex(obj)) {\n\t\t\t\tconst x = ComplexTool.ToComplexFromString(obj.toString());\n\t\t\t\tthis._re = x.real;\n\t\t\t\tthis._im = x.imag;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow \"Complex Unsupported argument \" + arguments;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow \"Complex Many arguments : \" + arguments.length;\n\t\t}\n\t}\n\n\t/**\n\t * Create an entity object of this class.\n\t * @param {KComplexInputData} number\n\t * @returns {Complex}\n\t */\n\tstatic create(number) {\n\t\tif(instanceofComplex(number)) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new Complex(number);\n\t\t}\n\t}\n\t\n\t/**\n\t * Convert number to Complex type.\n\t * @param {KComplexInputData} number\n\t * @returns {Complex}\n\t */\n\tstatic valueOf(number) {\n\t\treturn Complex.create(number);\n\t}\n\t\n\t/**\n\t * Convert to Complex.\n\t * If type conversion is unnecessary, return the value as it is.\n\t * @param {KComplexInputData} number \n\t * @returns {Complex}\n\t * @ignore\n\t */\n\tstatic _toComplex(number) {\n\t\tif(instanceofComplex(number)) {\n\t\t\treturn number;\n\t\t}\n\t\t// @ts-ignore\n\t\telse if(number.toComplex !== undefined) {\n\t\t\t// @ts-ignore\n\t\t\treturn number.toComplex();\n\t\t}\n\t\telse {\n\t\t\treturn new Complex(number);\n\t\t}\n\t}\n\n\t/**\n\t * Convert to real number.\n\t * @param {KComplexInputData} number \n\t * @returns {number}\n\t * @ignore\n\t */\n\tstatic _toDouble(number) {\n\t\tif(typeof number === \"number\") {\n\t\t\treturn number;\n\t\t}\n\t\tconst complex_number = Complex._toComplex(number);\n\t\tif(complex_number.isReal()) {\n\t\t\treturn complex_number.real();\n\t\t}\n\t\telse {\n\t\t\tthrow \"not support complex numbers.[\" + number + \"]\";\n\t\t}\n\t}\n\n\t/**\n\t * Convert to integer.\n\t * @param {KComplexInputData} number \n\t * @returns {number}\n\t * @ignore\n\t */\n\tstatic _toInteger(number) {\n\t\treturn Math.trunc(Complex._toDouble(number));\n\t}\n\n\t/**\n\t * Deep copy.\n\t * @returns {Complex} \n\t */\n\tclone() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Convert to string.\n\t * @returns {string} \n\t */\n\ttoString() {\n\t\t/**\n\t\t * @type {function(number): string }\n\t\t */\n\t\tconst formatG = function(x) {\n\t\t\tlet numstr = x.toPrecision(6);\n\t\t\tif(numstr.indexOf(\".\") !== -1) {\n\t\t\t\tnumstr = numstr.replace(/\\.?0+$/, \"\");  // 1.00 , 1.10\n\t\t\t\tnumstr = numstr.replace(/\\.?0+e/, \"e\"); // 1.0e , 1.10e\n\t\t\t}\n\t\t\telse if(/inf/i.test(numstr)) {\n\t\t\t\tif(x === Number.POSITIVE_INFINITY) {\n\t\t\t\t\treturn \"Inf\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn \"-Inf\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(/nan/i.test(numstr)) {\n\t\t\t\treturn \"NaN\";\n\t\t\t}\n\t\t\treturn numstr;\n\t\t};\n\t\tif(!this.isReal()) {\n\t\t\tif(this._re === 0) {\n\t\t\t\treturn formatG(this._im) + \"i\";\n\t\t\t}\n\t\t\telse if((this._im >= 0) || (Number.isNaN(this._im))) {\n\t\t\t\treturn formatG(this._re) + \" + \" + formatG(this._im) + \"i\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn formatG(this._re) + \" - \" + formatG(-this._im) + \"i\";\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn formatG(this._re);\n\t\t}\n\t}\n\n\t/**\n\t * Convert to JSON.\n\t * @returns {string} \n\t */\n\ttoJSON() {\n\t\tif(!this.isReal()) {\n\t\t\tif(this._re === 0) {\n\t\t\t\treturn this._im.toString() + \"i\";\n\t\t\t}\n\t\t\telse if((this._im >= 0) || (Number.isNaN(this._im))) {\n\t\t\t\treturn this._re.toString() + \"+\" + this._im.toString() + \"i\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn this._re.toString() + this._im.toString() + \"i\";\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn this._re.toString();\n\t\t}\n\t}\n\t\n\t/**\n\t * The real part of this Comlex.\n\t * @returns {number} real(A)\n\t */\n\treal() {\n\t\treturn this._re;\n\t}\n\t\n\t/**\n\t * The imaginary part of this Comlex.\n\t * @returns {number} imag(A)\n\t */\n\timag() {\n\t\treturn this._im;\n\t}\n\n\t/**\n\t * norm.\n\t * @returns {number} |A|\n\t */\n\tnorm() {\n\t\tif(this._im === 0) {\n\t\t\treturn Math.abs(this._re);\n\t\t}\n\t\telse if(this._re === 0) {\n\t\t\treturn Math.abs(this._im);\n\t\t}\n\t\telse {\n\t\t\treturn Math.sqrt(this._re * this._re + this._im * this._im);\n\t\t}\n\t}\n\n\t/**\n\t * The argument of this complex number.\n\t * @returns {number} arg(A)\n\t */\n\targ() {\n\t\tif(this._im === 0) {\n\t\t\treturn this._re >= 0 ? 0 : Math.PI;\n\t\t}\n\t\telse if(this._re === 0) {\n\t\t\treturn Math.PI * (this._im >= 0.0 ? 0.5 : -0.5);\n\t\t}\n\t\telse {\n\t\t\treturn Math.atan2(this._im, this._re);\n\t\t}\n\t}\n\n\t/**\n\t * Return number of decimal places for real and imaginary parts.\n\t * - Used to make a string.\n\t * @returns {number} Number of decimal places.\n\t */\n\tgetDecimalPosition() {\n\t\t/**\n\t\t * @type {function(number): number }\n\t\t */\n\t\tconst getDecimal = function(x) {\n\t\t\tif(!Number.isFinite(x)) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tlet a = x;\n\t\t\tlet point = 0;\n\t\t\tfor(let i = 0; i < 20; i++) {\n\t\t\t\tif(Math.abs(a - Math.round(a)) <= Number.EPSILON) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ta *= 10;\n\t\t\t\tpoint++;\n\t\t\t}\n\t\t\treturn point;\n\t\t};\n\t\treturn Math.max( getDecimal(this.real()), getDecimal(this.imag()) );\n\t}\n\n\t/**\n\t * The positive or negative sign of this number.\n\t * - +1 if positive, -1 if negative, 0 if 0.\n\t * @returns {Complex} \n\t */\n\tsign() {\n\t\tif(!this.isFinite()) {\n\t\t\tif(this.isNaN() || this._im === Infinity || this._im === -Infinity) {\n\t\t\t\treturn Complex.NaN;\n\t\t\t}\n\t\t\tif(this._re === Infinity) {\n\t\t\t\treturn Complex.ONE;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Complex.MINUS_ONE;\n\t\t\t}\n\t\t}\n\t\tif(this._im === 0) {\n\t\t\tif(this._re === 0) {\n\t\t\t\treturn Complex.ZERO;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn new Complex(this._re > 0 ? 1 : -1);\n\t\t\t}\n\t\t}\n\t\treturn this.div(this.norm());\n\t}\n\t\n\t// ----------------------\n\t// 四則演算\n\t// ----------------------\n\t\n\t/**\n\t * Add.\n\t * @param {KComplexInputData} number \n\t * @returns {Complex} A + B\n\t */\n\tadd(number) {\n\t\tconst A = this;\n\t\tconst B = new Complex(number);\n\t\tB._re = A._re + B._re;\n\t\tB._im = A._im + B._im;\n\t\treturn B;\n\t}\n\n\t/**\n\t * Subtract.\n\t * @param {KComplexInputData} number\n\t * @returns {Complex} A - B\n\t */\n\tsub(number) {\n\t\tconst A = this;\n\t\tconst B = new Complex(number);\n\t\tB._re = A._re - B._re;\n\t\tB._im = A._im - B._im;\n\t\treturn B;\n\t}\n\n\t/**\n\t * Multiply.\n\t * @param {KComplexInputData} number\n\t * @returns {Complex} A * B\n\t */\n\tmul(number) {\n\t\tconst A = this;\n\t\tconst B = new Complex(number);\n\t\tif((A._im === 0) && (B._im === 0)) {\n\t\t\tB._re = A._re * B._re;\n\t\t\treturn B;\n\t\t}\n\t\telse if((A._re === 0) && (B._re === 0)) {\n\t\t\tB._re = - A._im * B._im;\n\t\t\tB._im = 0;\n\t\t\treturn B;\n\t\t}\n\t\telse {\n\t\t\tconst re = A._re * B._re - A._im * B._im;\n\t\t\tconst im = A._im * B._re + A._re * B._im;\n\t\t\tB._re = re;\n\t\t\tB._im = im;\n\t\t\treturn B;\n\t\t}\n\t}\n\t\n\t/**\n\t * Inner product/Dot product.\n\t * @param {KComplexInputData} number\n\t * @returns {Complex} A * conj(B)\n\t */\n\tdot(number) {\n\t\tconst A = this;\n\t\tconst B = new Complex(number);\n\t\tif((A._im === 0) && (B._im === 0)) {\n\t\t\tB._re = A._re * B._re;\n\t\t\treturn B;\n\t\t}\n\t\telse if((A._re === 0) && (B._re === 0)) {\n\t\t\tB._re = A._im * B._im;\n\t\t\tB._im = 0;\n\t\t\treturn B;\n\t\t}\n\t\telse {\n\t\t\tconst re =   A._re * B._re + A._im * B._im;\n\t\t\tconst im = - A._im * B._re + A._re * B._im;\n\t\t\tB._re = re;\n\t\t\tB._im = im;\n\t\t\treturn B;\n\t\t}\n\t}\n\t\n\t/**\n\t * Divide.\n\t * @param {KComplexInputData} number\n\t * @returns {Complex} A / B\n\t */\n\tdiv(number) {\n\t\tconst A = this;\n\t\tconst B = new Complex(number);\n\t\tif((A._im === 0) && (B._im === 0)) {\n\t\t\tB._re = A._re / B._re;\n\t\t\treturn B;\n\t\t}\n\t\telse if((A._re === 0) && (B._re === 0)) {\n\t\t\tB._re = A._im / B._im;\n\t\t\tB._im = 0;\n\t\t\treturn B;\n\t\t}\n\t\telse {\n\t\t\tconst re = A._re * B._re + A._im * B._im;\n\t\t\tconst im = A._im * B._re - A._re * B._im;\n\t\t\tconst denominator = 1.0 / (B._re * B._re + B._im * B._im);\n\t\t\tB._re = re * denominator;\n\t\t\tB._im = im * denominator;\n\t\t\treturn B;\n\t\t}\n\t}\n\n\t/**\n\t * Modulo, positive remainder of division.\n\t * - Result has same sign as the Dividend.\n\t * @param {KComplexInputData} number - Divided value (real number only).\n\t * @returns {Complex} A rem B\n\t */\n\trem(number) {\n\t\tconst A = this;\n\t\tconst B = new Complex(number);\n\t\tif((A._im !== 0) || (B._im !== 0)) {\n\t\t\tthrow \"calculation method is undefined.\";\n\t\t}\n\t\tif(!A.isFinite() || !B.isFinite() || B.isZero()) {\n\t\t\treturn Complex.NaN;\n\t\t}\n\t\tB._re = A._re - B._re * (Math.trunc(A._re / B._re));\n\t\treturn B;\n\t}\n\n\t/**\n\t * Modulo, positive remainder of division.\n\t * - Result has same sign as the Divisor.\n\t * @param {KComplexInputData} number - Divided value (real number only).\n\t * @returns {Complex} A mod B\n\t */\n\tmod(number) {\n\t\tconst A = this;\n\t\tconst B = new Complex(number);\n\t\tif((A._im !== 0) || (B._im !== 0)) {\n\t\t\tthrow \"calculation method is undefined.\";\n\t\t}\n\t\tif(B.isZero()) {\n\t\t\treturn A;\n\t\t}\n\t\tconst ret = A.rem(B);\n\t\tif(!A.equalsState(B)) {\n\t\t\treturn ret.add(B);\n\t\t}\n\t\telse {\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\t/**\n\t * Inverse number of this value.\n\t * @returns {Complex} 1 / A\n\t */\n\tinv() {\n\t\tif(this._im === 0) {\n\t\t\treturn new Complex(1.0 / this._re);\n\t\t}\n\t\telse if(this._re === 0) {\n\t\t\treturn new Complex([0, - 1.0 / this._im]);\n\t\t}\n\t\treturn Complex.ONE.div(this);\n\t}\n\n\t// ----------------------\n\t// 他の型に変換用\n\t// ----------------------\n\t\n\t/**\n\t * boolean value.\n\t * @returns {boolean}\n\t */\n\tbooleanValue() {\n\t\treturn !this.isZero() && !this.isNaN();\n\t}\n\n\t/**\n\t * integer value.\n\t * @returns {number}\n\t */\n\tintValue() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this.isNaN() ? NaN : (this.isPositiveInfinity() ? Infinity : -Infinity);\n\t\t}\n\t\tconst value = this._re;\n\t\tconst delta = Math.abs(value - Math.trunc(value));\n\t\tif(delta < Number.EPSILON) {\n\t\t\treturn Math.round(value);\n\t\t}\n\t\telse {\n\t\t\treturn Math.trunc(value);\n\t\t}\n\t}\n\n\t/**\n\t * floating point.\n\t * @returns {number}\n\t */\n\tdoubleValue() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this.isNaN() ? NaN : (this.isPositiveInfinity() ? Infinity : -Infinity);\n\t\t}\n\t\tconst value = this._re;\n\t\tconst delta = Math.abs(value - Math.trunc(value));\n\t\tif(delta < Number.EPSILON) {\n\t\t\treturn Math.round(value);\n\t\t}\n\t\telse {\n\t\t\treturn value;\n\t\t}\n\t}\n\n\t// ----------------------\n\t// konpeito で扱う数値型へ変換\n\t// ----------------------\n\t\n\t/**\n\t * return Complex.\n\t * @returns {Complex}\n\t */\n\ttoComplex() {\n\t\treturn this;\n\t}\n\n\t// ----------------------\n\t// 比較\n\t// ----------------------\n\t\n\t/**\n\t * Equals.\n\t * @param {KComplexInputData} number\n\t * @param {KComplexInputData} [tolerance=Number.EPSILON] - Calculation tolerance of calculation.\n\t * @returns {boolean} A === B\n\t */\n\tequals(number, tolerance) {\n\t\tconst A = this;\n\t\tconst B = Complex._toComplex(number);\n\t\t// 無限大、非数の値も含めて一度確認\n\t\tif(A.isNaN() || B.isNaN()) {\n\t\t\treturn false;\n\t\t}\n\t\tif((A._re === B._re) && (A._im === B._im)) {\n\t\t\treturn true;\n\t\t}\n\t\t// 誤差を含んだ値の比較\n\t\tconst tolerance_ = tolerance ? Complex._toDouble(tolerance) : Number.EPSILON;\n\t\treturn (Math.abs(A._re - B._re) <  tolerance_) && (Math.abs(A._im - B._im) < tolerance_);\n\t}\n\n\t/**\n\t * Numeric type match.\n\t * @param {KComplexInputData} number \n\t * @returns {boolean}\n\t */\n\tequalsState(number) {\n\t\tconst A = this;\n\t\tconst B = Complex._toComplex(number);\n\t\t/**\n\t\t * @param {Complex} num\n\t\t * @returns {number}\n\t\t */\n\t\tconst getState = function(num) {\n\t\t\tif(num.isZero()) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tif(!num.isFinite()) {\n\t\t\t\tif(num.isPositiveInfinity()) {\n\t\t\t\t\treturn 4;\n\t\t\t\t}\n\t\t\t\telse if(num.isNegativeInfinity()) {\n\t\t\t\t\treturn 5;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 3;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn num.isPositive() ? 1 : 2;\n\t\t};\n\t\tconst A_type = getState(A);\n\t\tconst B_type = getState(B);\n\t\treturn A_type === B_type;\n\t}\n\n\t/**\n\t * Compare values.\n\t * @param {KComplexInputData} number\n\t * @param {KComplexInputData} [tolerance=Number.EPSILON] - Calculation tolerance of calculation.\n\t * @returns {number} A > B ? 1 : (A === B ? 0 : -1)\n\t */\n\tcompareTo(number, tolerance) {\n\t\tconst A = this;\n\t\tconst B = Complex._toComplex(number);\n\t\tif(!A.isFinite() || !B.isFinite()) {\n\t\t\tif(A.equals(B)) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\telse if(\n\t\t\t\tA.isNaN() || B.isNaN() ||\n\t\t\t\t(A.real() ===  Infinity && A.imag() === -Infinity) ||\n\t\t\t\t(A.real() === -Infinity && A.imag() ===  Infinity) ||\n\t\t\t\t(B.real() ===  Infinity && B.imag() === -Infinity) ||\n\t\t\t\t(B.real() === -Infinity && B.imag() ===  Infinity) ) {\n\t\t\t\treturn NaN;\n\t\t\t}\n\t\t\telse if(A.isFinite()) {\n\t\t\t\treturn B.real() + B.imag() < 0 ? 1 : -1;\n\t\t\t}\n\t\t\telse if(B.isFinite()) {\n\t\t\t\treturn A.real() + A.imag() > 0 ? 1 : -1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn NaN;\n\t\t\t}\n\t\t}\n\t\tconst tolerance_ = tolerance ? Complex._toDouble(tolerance) : Number.EPSILON;\n\t\tconst a = A.real() + A.imag();\n\t\tconst b = B.real() + B.imag();\n\t\tif((Math.abs(a - b) <= tolerance_)) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn a > b ? 1 : -1;\n\t}\n\t\n\t/**\n\t * Maximum number.\n\t * @param {KComplexInputData} number\n\t * @returns {Complex} max([A, B])\n\t */\n\tmax(number) {\n\t\tconst x = Complex._toComplex(number);\n\t\tif(this.compareTo(x) >= 0) {\n\t\t\treturn this;\n\t\t}\n\t\telse {\n\t\t\treturn x;\n\t\t}\n\t}\n\n\t/**\n\t * Minimum number.\n\t * @param {KComplexInputData} number\n\t * @returns {Complex} min([A, B])\n\t */\n\tmin(number) {\n\t\tconst x = Complex._toComplex(number);\n\t\tif(this.compareTo(x) <= 0) {\n\t\t\treturn this;\n\t\t}\n\t\telse {\n\t\t\treturn x;\n\t\t}\n\t}\n\n\t/**\n\t * Clip number within range.\n\t * @param {KComplexInputData} min \n\t * @param {KComplexInputData} max\n\t * @returns {Complex} min(max(x, min), max)\n\t */\n\tclip(min, max) {\n\t\tconst min_ = Complex._toComplex(min);\n\t\tconst max_ = Complex._toComplex(max);\n\t\tconst arg_check = min_.compareTo(max_);\n\t\tif(arg_check === 1) {\n\t\t\tthrow \"clip(min, max) error. (min > max)->(\" + min_ + \" > \" + max_ + \")\";\n\t\t}\n\t\telse if(arg_check === 0) {\n\t\t\treturn min_;\n\t\t}\n\t\tif(this.compareTo(max_) === 1) {\n\t\t\treturn max_;\n\t\t}\n\t\telse if(this.compareTo(min_) === -1) {\n\t\t\treturn min_;\n\t\t}\n\t\treturn this;\n\t}\n\n\t// ----------------------\n\t// 丸め\n\t// ----------------------\n\t\n\t/**\n\t * Floor.\n\t * @returns {Complex} floor(A)\n\t */\n\tfloor() {\n\t\treturn new Complex([Math.floor(this._re), Math.floor(this._im)]);\n\t}\n\n\t/**\n\t * Ceil.\n\t * @returns {Complex} ceil(A)\n\t */\n\tceil() {\n\t\treturn new Complex([Math.ceil(this._re), Math.ceil(this._im)]);\n\t}\n\t\n\t/**\n\t * Rounding to the nearest integer.\n\t * @returns {Complex} round(A)\n\t */\n\tround() {\n\t\treturn new Complex([Math.round(this._re), Math.round(this._im)]);\n\t}\n\n\t/**\n\t * To integer rounded down to the nearest.\n\t * @returns {Complex} fix(A), trunc(A)\n\t */\n\tfix() {\n\t\treturn new Complex([Math.trunc(this._re), Math.trunc(this._im)]);\n\t}\n\n\t/**\n\t * Fraction.\n\t * @returns {Complex} fract(A)\n\t */\n\tfract() {\n\t\treturn new Complex([this._re - Math.floor(this._re), this._im - Math.floor(this._im)]);\n\t}\n\n\t// ----------------------\n\t// 複素数\n\t// ----------------------\n\t\n\t/**\n\t * Absolute value.\n\t * @returns {Complex} abs(A)\n\t */\n\tabs() {\n\t\treturn new Complex(this.norm());\n\t}\n\n\t/**\n\t * Complex conjugate.\n\t * @returns {Complex} real(A) - imag(A)j\n\t */\n\tconj() {\n\t\tif(this._im === 0) {\n\t\t\treturn this;\n\t\t}\n\t\t// 共役複素数\n\t\treturn new Complex([this._re, -this._im]);\n\t}\n\n\t/**\n\t * this * -1\n\t * @returns {Complex} -A\n\t */\n\tnegate() {\n\t\treturn new Complex([-this._re, -this._im]);\n\t}\n\n\t// ----------------------\n\t// 指数\n\t// ----------------------\n\t\n\t/**\n\t * Power function.\n\t * @param {KComplexInputData} number\n\t * @returns {Complex} pow(A, B)\n\t */\n\tpow(number) {\n\t\tconst A = this;\n\t\tconst B = new Complex(number);\n\t\t// -2 ^ 0.5 ... 複素数\n\t\t// -2 ^ 1   ... 実数\n\t\t//  2 ^ 0.5 ... 実数\n\t\tif(B.isReal()) {\n\t\t\tif(A.isReal() && (A.isNotNegative() || B.isInteger())) {\n\t\t\t\tB._re = Math.pow(A._re, B._re);\n\t\t\t\treturn B;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst r = Math.pow(A.norm(), B._re);\n\t\t\t\tconst s = A.arg() * B._re;\n\t\t\t\tB._re = r * Math.cos(s);\n\t\t\t\tB._im = r * Math.sin(s);\n\t\t\t\treturn B;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn B.mul(A.log()).exp();\n\t\t}\n\t}\n\n\t/**\n\t * Square.\n\t * @returns {Complex} pow(A, 2)\n\t */\n\tsquare() {\n\t\tif(this._im === 0.0) {\n\t\t\treturn new Complex(this._re * this._re);\n\t\t}\n\t\treturn this.mul(this);\n\t}\n\n\t/**\n\t * Square root.\n\t * @returns {Complex} sqrt(A)\n\t */\n\tsqrt() {\n\t\tif(this.isReal()) {\n\t\t\tif(this.isNotNegative()) {\n\t\t\t\treturn new Complex(Math.sqrt(this._re));\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn new Complex([0, Math.sqrt(-this._re)]);\n\t\t\t}\n\t\t}\n\t\tconst r = Math.sqrt(this.norm());\n\t\tconst s = this.arg() * 0.5;\n\t\treturn new Complex([r * Math.cos(s), r * Math.sin(s)]);\n\t}\n\n\t/**\n\t * Cube root.\n\t * @param {KComplexInputData} [n=0] - Value type(0,1,2)\n\t * @returns {Complex} cbrt(A)\n\t */\n\tcbrt(n) {\n\t\tconst type = Complex._toInteger(n !== undefined ? n : 0);\n\t\tconst x = this.log().div(3).exp();\n\t\tif(type === 0) {\n\t\t\treturn x;\n\t\t}\n\t\telse if(type === 1) {\n\t\t\treturn x.mul([-0.5, Math.sqrt(3) * 0.5]);\n\t\t}\n\t\telse {\n\t\t\treturn x.mul([-0.5, - Math.sqrt(3) * 0.5]);\n\t\t}\n\t}\n\n\t/**\n\t * Reciprocal square root.\n\t * @returns {Complex} rsqrt(A)\n\t */\n\trsqrt() {\n\t\tif(this.isReal()) {\n\t\t\tif(this.isNotNegative()) {\n\t\t\t\treturn new Complex(1.0 / Math.sqrt(this._re));\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn new Complex([0, - 1.0 / Math.sqrt(-this._re)]);\n\t\t\t}\n\t\t}\n\t\treturn this.sqrt().inv();\n\t}\n\n\t/**\n\t * Logarithmic function.\n\t * @returns {Complex} log(A)\n\t */\n\tlog() {\n\t\tif(this.isReal() && this.isNotNegative()) {\n\t\t\treturn new Complex(Math.log(this._re));\n\t\t}\n\t\t// 負の値が入っているか、もともと複素数が入っている場合は、複素対数関数\n\t\treturn new Complex([Math.log(this.norm()), this.arg]);\n\t}\n\n\t/**\n\t * Exponential function.\n\t * @returns {Complex} exp(A)\n\t */\n\texp() {\n\t\tif(this.isReal()) {\n\t\t\treturn new Complex(Math.exp(this._re));\n\t\t}\n\t\t// 複素指数関数\n\t\tconst r = Math.exp(this._re);\n\t\treturn new Complex([r * Math.cos(this._im), r * Math.sin(this._im)]);\n\t}\n\n\t/**\n\t * e^x - 1\n\t * @returns {Complex} expm1(A)\n\t */\n\texpm1() {\n\t\treturn this.exp().sub(1);\n\t}\n\n\t/**\n\t * ln(1 + x)\n\t * @returns {Complex} log1p(A)\n\t */\n\tlog1p() {\n\t\treturn this.add(1).log();\n\t}\n\t\n\t/**\n\t * log_2(x)\n\t * @returns {Complex} log2(A)\n\t */\n\tlog2() {\n\t\treturn this.log().div(Complex.LN2);\n\t\t\n\t}\n\n\t/**\n\t * log_10(x)\n\t * @returns {Complex} log10(A)\n\t */\n\tlog10() {\n\t\treturn this.log().div(Complex.LN10);\n\t}\n\n\t// ----------------------\n\t// 三角関数\n\t// ----------------------\n\t\n\t/**\n\t * Sine function.\n\t * @returns {Complex} sin(A)\n\t */\n\tsin() {\n\t\tif(this.isReal()) {\n\t\t\treturn new Complex(Math.sin(this._re));\n\t\t}\n\t\t// オイラーの公式より\n\t\t// sin x = (e^ix - e^-ex) / 2i\n\t\tconst a = this.mul(Complex.I).exp();\n\t\tconst b = this.mul(Complex.I.negate()).exp();\n\t\treturn a.sub(b).div([0, 2]);\n\t}\n\n\t/**\n\t * Cosine function.\n\t * @returns {Complex} cos(A)\n\t */\n\tcos() {\n\t\tif(this.isReal()) {\n\t\t\treturn new Complex(Math.cos(this._re));\n\t\t}\n\t\t// オイラーの公式より\n\t\t// cos x = (e^ix + e^-ex) / 2\n\t\tconst a = this.mul(Complex.I).exp();\n\t\tconst b = this.mul(Complex.I.negate()).exp();\n\t\treturn a.add(b).div(2);\n\t}\n\n\t/**\n\t * Tangent function.\n\t * @returns {Complex} tan(A)\n\t */\n\ttan() {\n\t\tif(this.isReal()) {\n\t\t\treturn new Complex(Math.tan(this._re));\n\t\t}\n\t\t// 三角関数の相互関係 tan x = sin x / cos x\n\t\treturn this.sin().div(this.cos());\n\t}\n\n\t/**\n\t * Atan (arc tangent) function.\n\t * - Return the values of [-PI/2, PI/2].\n\t * @returns {Complex} atan(A)\n\t */\n\tatan() {\n\t\tif(this.isReal()) {\n\t\t\treturn new Complex(Math.atan(this._re));\n\t\t}\n\t\t// 逆正接 tan-1 x = i/2 log( i+x / i-x )\n\t\treturn Complex.I.div(Complex.TWO).mul(Complex.I.add(this).div(Complex.I.sub(this)).log());\n\t}\n\n\t/**\n\t * Atan (arc tangent) function.\n\t * Return the values of [-PI, PI] .\n\t * Supports only real numbers.\n\t * @param {KComplexInputData} [number] - X\n\t * @returns {Complex} atan2(Y, X)\n\t */\n\tatan2(number) {\n\t\tif(arguments.length === 0) {\n\t\t\treturn new Complex(this.arg);\n\t\t}\n\t\t// y.atan2(x) とする。\n\t\tconst y = this;\n\t\tconst x = Complex._toComplex(number);\n\t\tif(y.isReal() && x.isReal()) {\n\t\t\treturn new Complex(Math.atan2(y._re, x._re));\n\t\t}\n\t\t// 複素数のatan2は未定義である（実装不可能）\n\t\tthrow \"calculation method is undefined.\";\n\t}\n\t\n\t// ----------------------\n\t// 双曲線関数\n\t// ----------------------\n\t\n\t/**\n\t * Arc sine function.\n\t * @returns {Complex} asin(A)\n\t */\n\tasin() {\n\t\t// 逆正弦\n\t\treturn this.mul(Complex.I).add(Complex.ONE.sub(this.square()).sqrt()).log().mul(Complex.MINUS_I);\n\t}\n\n\t/**\n\t * Arc cosine function.\n\t * @returns {Complex} acos(A)\n\t */\n\tacos() {\n\t\t// 逆余弦\n\t\treturn this.add(Complex.I.mul(Complex.ONE.sub(this.square()).sqrt())).log().mul(Complex.MINUS_I);\n\t}\n\t\n\n\t/**\n\t * Hyperbolic sine function.\n\t * @returns {Complex} sinh(A)\n\t */\n\tsinh() {\n\t\t// 双曲線正弦\n\t\tconst y = this.exp();\n\t\treturn y.sub(y.inv()).mul(0.5);\n\t}\n\n\t/**\n\t * Inverse hyperbolic sine function.\n\t * @returns {Complex} asinh(A)\n\t */\n\tasinh() {\n\t\t// 逆双曲線正弦 Math.log(x + Math.sqrt(x * x + 1));\n\t\tif(this.isInfinite()) {\n\t\t\treturn this;\n\t\t}\n\t\treturn this.add(this.mul(this).add(1).sqrt()).log();\n\t}\n\n\t/**\n\t * Hyperbolic cosine function.\n\t * @returns {Complex} cosh(A)\n\t */\n\tcosh() {\n\t\t// 双曲線余弦\n\t\treturn this.exp().add(this.negate().exp()).mul(0.5);\n\t}\n\n\t/**\n\t * Inverse hyperbolic cosine function.\n\t * @returns {Complex} acosh(A)\n\t */\n\tacosh() {\n\t\t// 逆双曲線余弦 Math.log(x + Math.sqrt(x * x - 1));\n\t\t// Octave だと log(0.5+(0.5*0.5-1)^0.5) !== acosh(0.5) になる。\n\t\t// おそらく log(0.5-(0.5*0.5-1)^0.5) の式に切り替わるようになっている\n\t\t// これは2つの値を持っているためだと思われるので合わせてみる\n\t\tif(this.isZero()) {\n\t\t\treturn new Complex([0, Math.PI * 0.5]);\n\t\t}\n\t\tif(this.compareTo(Complex.ONE) >= 1) {\n\t\t\treturn this.add(this.square().sub(1).sqrt()).log();\n\t\t}\n\t\telse {\n\t\t\treturn this.sub(this.square().sub(1).sqrt()).log();\n\t\t}\n\t}\n\n\t/**\n\t * Hyperbolic tangent function.\n\t * @returns {Complex} tanh(A)\n\t */\n\ttanh() {\n\t\t// 双曲線正接\n\t\tif(this.isNaN()) {\n\t\t\treturn Complex.NaN;\n\t\t}\n\t\tconst y =  this.mul(2).exp();\n\t\tif(y.isZero()) {\n\t\t\treturn Complex.MINUS_ONE;\n\t\t}\n\t\telse if(y.isPositiveInfinity()) {\n\t\t\treturn Complex.ONE;\n\t\t}\n\t\treturn y.sub(1).div(y.add(1));\n\t}\n\t\n\t/**\n\t * Inverse hyperbolic tangent function.\n\t * @returns {Complex} atanh(A)\n\t */\n\tatanh() {\n\t\t// 逆双曲線正接\n\t\tif(this.isInfinite() && this.isReal()) {\n\t\t\treturn new Complex([0, Math.PI * 0.5]);\n\t\t}\n\t\treturn this.add(1).div(this.negate().add(1)).log().mul(0.5);\n\t}\n\n\t/**\n\t * Secant function.\n\t * @returns {Complex} sec(A)\n\t */\n\tsec() {\n\t\t// 正割\n\t\treturn this.cos().inv();\n\t}\n\n\t/**\n\t * Reverse secant function.\n\t * @returns {Complex} asec(A)\n\t */\n\tasec() {\n\t\t// 逆正割\n\t\treturn this.inv().acos();\n\t}\n\n\t/**\n\t * Hyperbolic secant function.\n\t * @returns {Complex} sech(A)\n\t */\n\tsech() {\n\t\t// 双曲線正割\n\t\treturn this.exp().add(this.negate().exp()).inv().mul(2);\n\t}\n\n\t/**\n\t * Inverse hyperbolic secant function.\n\t * @returns {Complex} asech(A)\n\t */\n\tasech() {\n\t\t// 逆双曲線正割\n\t\tif(this.isInfinite() && this.isReal()) {\n\t\t\treturn new Complex([0, Math.PI * 0.5]);\n\t\t}\n\t\tif(this.isPositive() || (this.compareTo(Complex.MINUS_ONE) == -1)) {\n\t\t\treturn this.inv().add(this.square().inv().sub(1).sqrt()).log();\n\t\t}\n\t\telse {\n\t\t\treturn this.inv().sub(this.square().inv().sub(1).sqrt()).log();\n\t\t}\n\t}\n\n\t/**\n\t * Cotangent function.\n\t * @returns {Complex} cot(A)\n\t */\n\tcot() {\n\t\t// 余接\n\t\treturn this.tan().inv();\n\t}\n\n\t/**\n\t * Inverse cotangent function.\n\t * @returns {Complex} acot(A)\n\t */\n\tacot() {\n\t\t// 逆余接\n\t\treturn this.inv().atan();\n\t}\n\n\t/**\n\t * Hyperbolic cotangent function.\n\t * @returns {Complex} coth(A)\n\t */\n\tcoth() {\n\t\t// 双曲線余接\n\t\tif(this.isZero()) {\n\t\t\treturn Complex.POSITIVE_INFINITY;\n\t\t}\n\t\treturn this.tanh().inv();\n\t}\n\n\t/**\n\t * Inverse hyperbolic cotangent function.\n\t * @returns {Complex} acoth(A)\n\t */\n\tacoth() {\n\t\t// 逆双曲線余接\n\t\tif(this.isInfinite()) {\n\t\t\treturn Complex.ZERO;\n\t\t}\n\t\treturn this.add(1).div(this.sub(1)).log().mul(0.5);\n\t}\n\n\t/**\n\t * Cosecant function.\n\t * @returns {Complex} csc(A)\n\t */\n\tcsc() {\n\t\t// 余割\n\t\treturn this.sin().inv();\n\t}\n\n\t/**\n\t * Inverse cosecant function.\n\t * @returns {Complex} acsc(A)\n\t */\n\tacsc() {\n\t\t// 逆余割\n\t\treturn this.inv().asin();\n\t}\n\n\t/**\n\t * Hyperbolic cosecant function.\n\t * @returns {Complex} csch(A)\n\t */\n\tcsch() {\n\t\t// 双曲線余割\n\t\treturn this.exp().sub(this.negate().exp()).inv().mul(2);\n\t}\n\n\t/**\n\t * Inverse hyperbolic cosecant function.\n\t * @returns {Complex} acsch(A)\n\t */\n\tacsch() {\n\t\t// 逆双曲線余割\n\t\treturn this.inv().add(this.square().inv().add(1).sqrt()).log();\n\t}\n\n\t// ----------------------\n\t// 確率・統計系\n\t// ----------------------\n\t\n\t/**\n\t * Logit function.\n\t * @returns {Complex} logit(A)\n\t */\n\tlogit() {\n\t\treturn this.log().sub(Complex.ONE.sub(this).log());\n\t}\n\n\t// ----------------------\n\t// 信号処理系\n\t// ----------------------\n\t\n\t/**\n\t * Normalized sinc function.\n\t * @returns {Complex} sinc(A)\n\t */\n\tsinc() {\n\t\tif(this.isReal()) {\n\t\t\tif(this._re === 0) {\n\t\t\t\treturn(Complex.ONE);\n\t\t\t}\n\t\t\tconst x = Math.PI * this._re;\n\t\t\treturn new Complex(Math.sin(x) / x);\n\t\t}\n\t\tconst x = this.mul(Complex.PI);\n\t\treturn new Complex( x.sin().div(x) );\n\t}\n\n\t// ----------------------\n\t// 乱数\n\t// ----------------------\n\t\n\t/**\n\t * Create random values [0, 1) with uniform random numbers.\n\t * @param {Random} [random] - Class for creating random numbers.\n\t * @returns {Complex}\n\t */\n\tstatic rand(random) {\n\t\tconst rand = (random !== undefined && random instanceof Random) ? random : random_class;\n\t\treturn new Complex(rand.nextDouble());\n\t}\n\n\t/**\n\t * Create random values with normal distribution.\n\t * @param {Random} [random] - Class for creating random numbers.\n\t * @returns {Complex}\n\t */\n\tstatic randn(random) {\n\t\tconst rand = (random !== undefined && random instanceof Random) ? random : random_class;\n\t\treturn new Complex(rand.nextGaussian());\n\t}\n\n\t// ----------------------\n\t// テスト系\n\t// ----------------------\n\t\n\t/**\n\t * Return true if the value is integer.\n\t * @param {KComplexInputData} [tolerance=Number.EPSILON] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisInteger(tolerance) {\n\t\tconst tolerance_ = tolerance ? Complex._toDouble(tolerance) : Number.EPSILON;\n\t\treturn this.isReal() && (Math.abs(this._re - Math.trunc(this._re)) < tolerance_);\n\t}\n\n\t/**\n\t * Returns true if the vallue is complex integer (including normal integer).\n\t * @param {KComplexInputData} [tolerance=Number.EPSILON] - Calculation tolerance of calculation.\n\t * @returns {boolean} real(A) === integer && imag(A) === integer\n\t */\n\tisComplexInteger(tolerance) {\n\t\tconst tolerance_ = tolerance ? Complex._toDouble(tolerance) : Number.EPSILON;\n\t\t// 複素整数\n\t\treturn (Math.abs(this._re - Math.trunc(this._re)) < tolerance_) &&\n\t\t\t\t(Math.abs(this._im - Math.trunc(this._im)) < tolerance_);\n\t}\n\n\t/**\n\t * this === 0\n\t * @param {KComplexInputData} [tolerance=Number.EPSILON] - Calculation tolerance of calculation.\n\t * @returns {boolean} A === 0\n\t */\n\tisZero(tolerance) {\n\t\tconst tolerance_ = tolerance ? Complex._toDouble(tolerance) : Number.EPSILON;\n\t\treturn (Math.abs(this._re) < tolerance_) && (Math.abs(this._im) < tolerance_);\n\t}\n\n\t/**\n\t * this === 1\n\t * @param {KComplexInputData} [tolerance=Number.EPSILON] - Calculation tolerance of calculation.\n\t * @returns {boolean} A === 1\n\t */\n\tisOne(tolerance) {\n\t\tconst tolerance_ = tolerance ? Complex._toDouble(tolerance) : Number.EPSILON;\n\t\treturn (Math.abs(this._re - 1.0) < tolerance_) && (Math.abs(this._im) < tolerance_);\n\t}\n\n\t/**\n\t * Returns true if the vallue is complex number (imaginary part is not 0).\n\t * @param {KComplexInputData} [tolerance=Number.EPSILON] - Calculation tolerance of calculation.\n\t * @returns {boolean} imag(A) !== 0\n\t */\n\tisComplex(tolerance) {\n\t\tconst tolerance_ = tolerance ? Complex._toDouble(tolerance) : Number.EPSILON;\n\t\treturn (Math.abs(this._im) >= tolerance_);\n\t}\n\t\n\t/**\n\t * Return true if the value is real number.\n\t * @param {KComplexInputData} [tolerance=Number.EPSILON] - Calculation tolerance of calculation.\n\t * @returns {boolean} imag(A) === 0\n\t */\n\tisReal(tolerance) {\n\t\tconst tolerance_ = tolerance ? Complex._toDouble(tolerance) : Number.EPSILON;\n\t\treturn (Math.abs(this._im) < tolerance_);\n\t}\n\n\t/**\n\t * this === NaN\n\t * @returns {boolean} isNaN(A)\n\t */\n\tisNaN() {\n\t\treturn isNaN(this._re) || isNaN(this._im);\n\t}\n\n\t/**\n\t * Return true if this real part of the complex positive.\n\t * @returns {boolean} real(x) > 0\n\t */\n\tisPositive() {\n\t\t// Number.EPSILONは使用しない。どちらにぶれるか不明な点及び\n\t\t// わずかな負の数だった場合に、sqrtでエラーが発生するため\n\t\treturn 0.0 < this._re;\n\t}\n\n\t/**\n\t * real(this) < 0\n\t * @returns {boolean} real(x) < 0\n\t */\n\tisNegative() {\n\t\treturn 0.0 > this._re;\n\t}\n\n\t/**\n\t * real(this) >= 0\n\t * @returns {boolean} real(x) >= 0\n\t */\n\tisNotNegative() {\n\t\treturn 0.0 <= this._re;\n\t}\n\n\t/**\n\t * this === Infinity\n\t * @returns {boolean} isPositiveInfinity(A)\n\t */\n\tisPositiveInfinity() {\n\t\treturn this._re === Number.POSITIVE_INFINITY || this._im === Number.POSITIVE_INFINITY;\n\t}\n\n\t/**\n\t * this === -Infinity\n\t * @returns {boolean} isNegativeInfinity(A)\n\t */\n\tisNegativeInfinity() {\n\t\treturn this._re === Number.NEGATIVE_INFINITY || this._im === Number.NEGATIVE_INFINITY;\n\t}\n\n\t/**\n\t * this === Infinity or -Infinity\n\t * @returns {boolean} isPositiveInfinity(A) || isNegativeInfinity(A)\n\t */\n\tisInfinite() {\n\t\treturn this.isPositiveInfinity() || this.isNegativeInfinity();\n\t}\n\t\n\t/**\n\t * Return true if the value is finite number.\n\t * @returns {boolean} !isNaN(A) && !isInfinite(A)\n\t */\n\tisFinite() {\n\t\treturn !this.isNaN() && !this.isInfinite();\n\t}\n\n\t// ----------------------\n\t// 確率\n\t// ----------------------\n\t\n\t/**\n\t * Log-gamma function.\n\t * - Calculate from real values.\n\t * @returns {Complex}\n\t */\n\tgammaln() {\n\t\treturn new Complex(Probability.gammaln(this._re));\n\t}\n\t\n\t/**\n\t * Gamma function.\n\t * - Calculate from real values.\n\t * @returns {Complex}\n\t */\n\tgamma() {\n\t\treturn new Complex(Probability.gamma(this._re));\n\t}\n\t\n\t/**\n\t * Incomplete gamma function.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} a\n\t * @param {string} [tail=\"lower\"] - lower (default) , \"upper\"\n\t * @returns {Complex}\n\t */\n\tgammainc(a, tail) {\n\t\tconst a_ = Complex._toDouble(a);\n\t\treturn new Complex(Probability.gammainc(this._re, a_, tail));\n\t}\n\n\t/**\n\t * Probability density function (PDF) of the gamma distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} k - Shape parameter.\n\t * @param {KComplexInputData} s - Scale parameter.\n\t * @returns {Complex}\n\t */\n\tgampdf(k, s) {\n\t\tconst k_ = Complex._toDouble(k);\n\t\tconst s_ = Complex._toDouble(s);\n\t\treturn new Complex(Probability.gampdf(this._re, k_, s_));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of gamma distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} k - Shape parameter.\n\t * @param {KComplexInputData} s - Scale parameter.\n\t * @returns {Complex}\n\t */\n\tgamcdf(k, s) {\n\t\tconst k_ = Complex._toDouble(k);\n\t\tconst s_ = Complex._toDouble(s);\n\t\treturn new Complex(Probability.gamcdf(this._re, k_, s_));\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of gamma distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} k - Shape parameter.\n\t * @param {KComplexInputData} s - Scale parameter.\n\t * @returns {Complex}\n\t */\n\tgaminv(k, s) {\n\t\tconst k_ = Complex._toDouble(k);\n\t\tconst s_ = Complex._toDouble(s);\n\t\treturn new Complex(Probability.gaminv(this._re, k_, s_));\n\t}\n\n\t/**\n\t * Beta function.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} y\n\t * @returns {Complex}\n\t */\n\tbeta(y) {\n\t\tconst y_ = Complex._toDouble(y);\n\t\treturn new Complex(Probability.beta(this._re, y_));\n\t}\n\n\t/**\n\t * Incomplete beta function.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} a\n\t * @param {KComplexInputData} b\n\t * @param {string} [tail=\"lower\"] - lower (default) , \"upper\"\n\t * @returns {Complex}\n\t */\n\tbetainc(a, b, tail) {\n\t\tconst a_ = Complex._toDouble(a);\n\t\tconst b_ = Complex._toDouble(b);\n\t\treturn new Complex(Probability.betainc(this._re, a_, b_, tail));\n\t}\n\n\t/**\n\t * Probability density function (PDF) of beta distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} a\n\t * @param {KComplexInputData} b\n\t * @returns {Complex}\n\t */\n\tbetapdf(a, b) {\n\t\tconst a_ = Complex._toDouble(a);\n\t\tconst b_ = Complex._toDouble(b);\n\t\treturn new Complex(Probability.betapdf(this._re, a_, b_));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of beta distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} a\n\t * @param {KComplexInputData} b\n\t * @returns {Complex}\n\t */\n\tbetacdf(a, b) {\n\t\tconst a_ = Complex._toDouble(a);\n\t\tconst b_ = Complex._toDouble(b);\n\t\treturn new Complex(Probability.betacdf(this._re, a_, b_));\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of beta distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} a\n\t * @param {KComplexInputData} b\n\t * @returns {Complex}\n\t */\n\tbetainv(a, b) {\n\t\tconst a_ = Complex._toDouble(a);\n\t\tconst b_ = Complex._toDouble(b);\n\t\treturn new Complex(Probability.betainv(this._re, a_, b_));\n\t}\n\n\t/**\n\t * Factorial function, x!.\n\t * - Calculate from real values.\n\t * @returns {Complex}\n\t */\n\tfactorial() {\n\t\treturn new Complex(Probability.factorial(this._re));\n\t}\n\n\t/**\n\t * Binomial coefficient, number of all combinations, nCk.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} k\n\t * @returns {Complex}\n\t */\n\tnchoosek(k) {\n\t\tconst k_ = Complex._toDouble(k);\n\t\treturn new Complex(Probability.nchoosek(this._re, k_));\n\t}\n\t\n\t/**\n\t * Error function.\n\t * - Calculate from real values.\n\t * @returns {Complex}\n\t */\n\terf() {\n\t\treturn new Complex(Probability.erf(this._re));\n\t}\n\n\t/**\n\t * Complementary error function.\n\t * - Calculate from real values.\n\t * @returns {Complex}\n\t */\n\terfc() {\n\t\treturn new Complex(Probability.erfc(this._re));\n\t}\n\n\t/**\n\t * Inverse function of Error function.\n\t * - Calculate from real values.\n\t * @returns {Complex}\n\t */\n\terfinv() {\n\t\treturn new Complex(Probability.erfinv(this._re));\n\t}\n\n\t/**\n\t * Inverse function of Complementary error function.\n\t * - Calculate from real values.\n\t * @returns {Complex}\n\t */\n\terfcinv() {\n\t\treturn new Complex(Probability.erfcinv(this._re));\n\t}\n\n\t/**\n\t * Probability density function (PDF) of normal distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} [u=0.0] - Average value.\n\t * @param {KComplexInputData} [s=1.0] - Variance value.\n\t * @returns {Complex}\n\t */\n\tnormpdf(u, s) {\n\t\tconst u_ = u !== undefined ? Complex._toDouble(u) : 0.0;\n\t\tconst s_ = s !== undefined ? Complex._toDouble(s) : 1.0;\n\t\treturn new Complex(Probability.normpdf(this._re, u_, s_));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of normal distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} [u=0.0] - Average value.\n\t * @param {KComplexInputData} [s=1.0] - Variance value.\n\t * @returns {Complex}\n\t */\n\tnormcdf(u, s) {\n\t\tconst u_ = u !== undefined ? Complex._toDouble(u) : 0.0;\n\t\tconst s_ = s !== undefined ? Complex._toDouble(s) : 1.0;\n\t\treturn new Complex(Probability.normcdf(this._re, u_, s_));\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of normal distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} [u=0.0] - Average value.\n\t * @param {KComplexInputData} [s=1.0] - Variance value.\n\t * @returns {Complex}\n\t */\n\tnorminv(u, s) {\n\t\tconst u_ = u !== undefined ? Complex._toDouble(u) : 0.0;\n\t\tconst s_ = s !== undefined ? Complex._toDouble(s) : 1.0;\n\t\treturn new Complex(Probability.norminv(this._re, u_, s_));\n\t}\n\t\n\t/**\n\t * Probability density function (PDF) of binomial distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} n\n\t * @param {KComplexInputData} p\n\t * @returns {Complex}\n\t */\n\tbinopdf(n, p) {\n\t\tconst n_ = Complex._toDouble(n);\n\t\tconst p_ = Complex._toDouble(p);\n\t\treturn new Complex(Probability.binopdf(this._re, n_, p_));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of binomial distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} n\n\t * @param {KComplexInputData} p\n\t * @param {string} [tail=\"lower\"] - lower (default) , \"upper\"\n\t * @returns {Complex}\n\t */\n\tbinocdf(n, p, tail) {\n\t\tconst n_ = Complex._toDouble(n);\n\t\tconst p_ = Complex._toDouble(p);\n\t\treturn new Complex(Probability.binocdf(this._re, n_, p_, tail));\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of binomial distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} n\n\t * @param {KComplexInputData} p\n\t * @returns {Complex}\n\t */\n\tbinoinv(n, p) {\n\t\tconst n_ = Complex._toDouble(n);\n\t\tconst p_ = Complex._toDouble(p);\n\t\treturn new Complex(Probability.binoinv(this._re, n_, p_));\n\t}\n\n\t/**\n\t * Probability density function (PDF) of Poisson distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} lambda\n\t * @returns {Complex}\n\t */\n\tpoisspdf(lambda) {\n\t\tconst lambda_ = Complex._toDouble(lambda);\n\t\treturn new Complex(Probability.poisspdf(this._re, lambda_));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of Poisson distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} lambda\n\t * @returns {Complex}\n\t */\n\tpoisscdf(lambda) {\n\t\tconst lambda_ = Complex._toDouble(lambda);\n\t\treturn new Complex(Probability.poisscdf(this._re, lambda_));\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of Poisson distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} lambda\n\t * @returns {Complex}\n\t */\n\tpoissinv(lambda) {\n\t\tconst lambda_ = Complex._toDouble(lambda);\n\t\treturn new Complex(Probability.poissinv(this._re, lambda_));\n\t}\n\n\t/**\n\t * Probability density function (PDF) of Student's t-distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} v - The degrees of freedom. (DF)\n\t * @returns {Complex}\n\t */\n\ttpdf(v) {\n\t\tconst v_ = Complex._toDouble(v);\n\t\treturn new Complex(Probability.tpdf(this._re, v_));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of Student's t-distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} v - The degrees of freedom. (DF)\n\t * @returns {Complex}\n\t */\n\ttcdf(v) {\n\t\tconst v_ = Complex._toDouble(v);\n\t\treturn new Complex(Probability.tcdf(this._re, v_));\n\t}\n\n\t/**\n\t * Inverse of cumulative distribution function (CDF) of Student's t-distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} v - The degrees of freedom. (DF)\n\t * @returns {Complex}\n\t */\n\ttinv(v) {\n\t\tconst v_ = Complex._toDouble(v);\n\t\treturn new Complex(Probability.tinv(this._re, v_));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of Student's t-distribution that can specify tail.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} v - The degrees of freedom. (DF)\n\t * @param {KComplexInputData} tails - Tail. (1 = the one-tailed distribution, 2 =  the two-tailed distribution.)\n\t * @returns {Complex}\n\t */\n\ttdist(v, tails) {\n\t\tconst v_ = Complex._toDouble(v);\n\t\tconst tails_ = Complex._toInteger(tails);\n\t\treturn new Complex(Probability.tdist(this._re, v_, tails_));\n\t}\n\n\t/**\n\t * Inverse of cumulative distribution function (CDF) of Student's t-distribution in two-sided test.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} v - The degrees of freedom. (DF)\n\t * @returns {Complex}\n\t */\n\ttinv2(v) {\n\t\tconst v_ = Complex._toDouble(v);\n\t\treturn new Complex(Probability.tinv2(this._re, v_));\n\t}\n\n\t/**\n\t * Probability density function (PDF) of chi-square distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} k - The degrees of freedom. (DF)\n\t * @returns {Complex}\n\t */\n\tchi2pdf(k) {\n\t\tconst k_ = Complex._toDouble(k);\n\t\treturn new Complex(Probability.chi2pdf(this._re, k_));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of chi-square distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} k - The degrees of freedom. (DF)\n\t * @returns {Complex}\n\t */\n\tchi2cdf(k) {\n\t\tconst k_ = Complex._toDouble(k);\n\t\treturn new Complex(Probability.chi2cdf(this._re, k_));\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of chi-square distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} k - The degrees of freedom. (DF)\n\t * @returns {Complex}\n\t */\n\tchi2inv(k) {\n\t\tconst k_ = Complex._toDouble(k);\n\t\treturn new Complex(Probability.chi2inv(this._re, k_));\n\t}\n\n\t/**\n\t * Probability density function (PDF) of F-distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} d1 - The degree of freedom of the molecules.\n\t * @param {KComplexInputData} d2 - The degree of freedom of the denominator\n\t * @returns {Complex}\n\t */\n\tfpdf(d1, d2) {\n\t\tconst d1_ = Complex._toDouble(d1);\n\t\tconst d2_ = Complex._toDouble(d2);\n\t\treturn new Complex(Probability.fpdf(this._re, d1_, d2_));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of F-distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} d1 - The degree of freedom of the molecules.\n\t * @param {KComplexInputData} d2 - The degree of freedom of the denominator\n\t * @returns {Complex}\n\t */\n\tfcdf(d1, d2) {\n\t\tconst d1_ = Complex._toDouble(d1);\n\t\tconst d2_ = Complex._toDouble(d2);\n\t\treturn new Complex(Probability.fcdf(this._re, d1_, d2_));\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of F-distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} d1 - The degree of freedom of the molecules.\n\t * @param {KComplexInputData} d2 - The degree of freedom of the denominator\n\t * @returns {Complex}\n\t */\n\tfinv(d1, d2) {\n\t\tconst d1_ = Complex._toDouble(d1);\n\t\tconst d2_ = Complex._toDouble(d2);\n\t\treturn new Complex(Probability.finv(this._re, d1_, d2_));\n\t}\n\n\t// ----------------------\n\t// ビット演算系\n\t// ----------------------\n\t\n\t/**\n\t * Logical AND.\n\t * - Calculated as an integer.\n\t * @param {KComplexInputData} number \n\t * @returns {Complex} A & B\n\t */\n\tand(number) {\n\t\tconst n_src = Math.round(this.real());\n\t\tconst n_tgt = Math.round(Complex._toDouble(number));\n\t\treturn new Complex(n_src & n_tgt);\n\t}\n\n\t/**\n\t * Logical OR.\n\t * - Calculated as an integer.\n\t * @param {KComplexInputData} number \n\t * @returns {Complex} A | B\n\t */\n\tor(number) {\n\t\tconst n_src = Math.round(this.real());\n\t\tconst n_tgt = Math.round(Complex._toDouble(number));\n\t\treturn new Complex(n_src | n_tgt);\n\t}\n\n\t/**\n\t * Logical Exclusive-OR.\n\t * - Calculated as an integer.\n\t * @param {KComplexInputData} number \n\t * @returns {Complex} A ^ B\n\t */\n\txor(number) {\n\t\tconst n_src = Math.round(this.real());\n\t\tconst n_tgt = Math.round(Complex._toDouble(number));\n\t\treturn new Complex(n_src ^ n_tgt);\n\t}\n\n\t/**\n\t * Logical Not. (mutable)\n\t * - Calculated as an integer.\n\t * @returns {Complex} !A\n\t */\n\tnot() {\n\t\tconst n_src = Math.round(this.real());\n\t\treturn new Complex(!n_src);\n\t}\n\t\n\t/**\n\t * this << n\n\t * - Calculated as an integer.\n\t * @param {KComplexInputData} n\n\t * @returns {Complex} A << n\n\t */\n\tshift(n) {\n\t\tconst src = Math.round(this.real());\n\t\tconst number = Math.round(Complex._toDouble(n));\n\t\treturn new Complex(src << number);\n\t}\n\n\t// ----------------------\n\t// その他の演算\n\t// ----------------------\n\t\n\t/**\n\t * Multiply a multiple of ten.\n\t * @param {KComplexInputData} n\n\t * @returns {Complex} x * 10^n\n\t */\n\tscaleByPowerOfTen(n) {\n\t\treturn this.mul(Complex.TEN.pow(n));\n\t}\n\n\t// ----------------------\n\t// 互換性\n\t// ----------------------\n\t\n\t/**\n\t * The positive or negative sign of this number.\n\t * - +1 if positive, -1 if negative, 0 if 0.\n\t * @returns {Complex}\n\t */\n\tsignum() {\n\t\treturn this.sign();\n\t}\n\n\t/**\n\t * Subtract.\n\t * @param {KComplexInputData} number\n\t * @returns {Complex} A - B\n\t */\n\tsubtract(number) {\n\t\treturn this.sub(number);\n\t}\n\n\t/**\n\t * Multiply.\n\t * @param {KComplexInputData} number\n\t * @returns {Complex} A * B\n\t */\n\tmultiply(number) {\n\t\treturn this.mul(number);\n\t}\n\n\t/**\n\t * Divide.\n\t * @param {KComplexInputData} number\n\t * @returns {Complex} fix(A / B)\n\t */\n\tdivide(number) {\n\t\treturn this.div(number);\n\t}\n\n\t/**\n\t * Remainder of division.\n\t * - Result has same sign as the Dividend.\n\t * @param {KComplexInputData} number\n\t * @returns {Complex} A % B\n\t */\n\tremainder(number) {\n\t\treturn this.rem(number);\n\t}\n\t\n\t/**\n\t * To integer rounded down to the nearest.\n\t * @returns {Complex} fix(A), trunc(A)\n\t */\n\ttrunc() {\n\t\treturn this.fix();\n\t}\n\n\t\n\t/**\n\t * @returns {boolean} true\n\t * @private\n\t */\n\tisComplexData() {\n\t\treturn true;\n\t}\n\t\n}\n\n/**\n * Collection of constant values used in the class.\n * @ignore\n */\nconst DEFINE = {\n\n\t/**\n\t * 0\n\t */\n\tZERO : new Complex(0),\n\n\t/**\n\t * 1\n\t */\n\tONE : new Complex(1),\n\n\t/**\n\t * 2\n\t */\n\tTWO : new Complex(2),\n\n\t/**\n\t * 10\n\t */\n\tTEN : new Complex(10),\n\n\t/**\n\t * -1\n\t */\n\tMINUS_ONE : new Complex(-1),\n\n\t/**\n\t * i, j\n\t */\n\tI : new Complex([0, 1]),\n\n\t/**\n\t * - i, - j\n\t */\n\tMINUS_I : new Complex([0, -1]),\n\n\t/**\n\t * PI.\n\t */\n\tPI : new Complex(Math.PI),\n\n\t/**\n\t * 0.25 * PI.\n\t */\n\tQUARTER_PI : new Complex(0.25 * Math.PI),\n\n\t/**\n\t * 0.5 * PI.\n\t */\n\tHALF_PI : new Complex(0.5 * Math.PI),\n\n\t/**\n\t * 2 * PI.\n\t */\n\tTWO_PI : new Complex(2.0 * Math.PI),\n\n\t/**\n\t * E, Napier's constant.\n\t */\n\tE : new Complex(Math.E),\n\n\t/**\n\t * log_e(2)\n\t */\n\tLN2 : new Complex(Math.LN2),\n\n\t/**\n\t * log_e(10)\n\t */\n\tLN10 : new Complex(Math.LN10),\n\n\t/**\n\t * log_2(e)\n\t */\n\tLOG2E : new Complex(Math.LOG2E),\n\n\t/**\n\t * log_10(e)\n\t */\n\tLOG10E : new Complex(Math.LOG10E),\n\n\t/**\n\t * sqrt(2)\n\t */\n\tSQRT2 : new Complex(Math.SQRT2),\n\n\t/**\n\t * sqrt(0.5)\n\t */\n\tSQRT1_2 : new Complex(Math.SQRT1_2),\n\n\t/**\n\t * 0.5\n\t */\n\tHALF : new Complex(0.5),\n\n\t/**\n\t * Positive infinity.\n\t */\n\tPOSITIVE_INFINITY : new Complex(Number.POSITIVE_INFINITY),\n\n\t/**\n\t * Negative Infinity.\n\t */\n\tNEGATIVE_INFINITY : new Complex(Number.NEGATIVE_INFINITY),\n\n\t/**\n\t * Not a Number.\n\t */\n\tNaN : new Complex(Number.NaN)\n};\n\n// ----------------------\n// 定数\n// ----------------------\n\n/**\n * 1\n * @type {Complex}\n */\nComplex.ONE = DEFINE.ONE;\n\n/**\n * 2\n * @type {Complex}\n */\nComplex.TWO = DEFINE.TWO;\n\n/**\n * 10\n * @type {Complex}\n */\nComplex.TEN = DEFINE.TEN;\n\n/**\n * 0\n * @type {Complex}\n */\nComplex.ZERO = DEFINE.ZERO;\n\n/**\n * -1\n * @type {Complex}\n */\nComplex.MINUS_ONE = DEFINE.MINUS_ONE;\n\n/**\n * i, j\n * @type {Complex}\n */\nComplex.I = DEFINE.I;\n\n/**\n * - i, - j\n * @type {Complex}\n */\nComplex.MINUS_I = DEFINE.MINUS_I;\n\n/**\n * PI.\n * @type {Complex}\n */\nComplex.PI = DEFINE.PI;\n\n/**\n * 0.25 * PI.\n * @type {Complex}\n */\nComplex.QUARTER_PI = DEFINE.QUARTER_PI;\n\n/**\n * 0.5 * PI.\n * @type {Complex}\n */\nComplex.HALF_PI = DEFINE.HALF_PI;\n\n/**\n * 2 * PI.\n * @type {Complex}\n */\nComplex.TWO_PI = DEFINE.TWO_PI;\n\n/**\n * E, Napier's constant.\n * @type {Complex}\n */\nComplex.E = DEFINE.E;\n\n/**\n * log_e(2)\n * @type {Complex}\n */\nComplex.LN2 = DEFINE.LN2;\n\n/**\n * log_e(10)\n * @type {Complex}\n */\nComplex.LN10 = DEFINE.LN10;\n\n/**\n * log_2(e)\n * @type {Complex}\n */\nComplex.LOG2E = DEFINE.LOG2E;\n\n/**\n * log_10(e)\n * @type {Complex}\n */\nComplex.LOG10E = DEFINE.LOG10E;\n\n/**\n * sqrt(2)\n * @type {Complex}\n */\nComplex.SQRT2 = DEFINE.SQRT2;\n\n/**\n * sqrt(0.5)\n * @type {Complex}\n */\nComplex.SQRT1_2 = DEFINE.SQRT1_2;\n\n/**\n * 0.5\n * @type {Complex}\n */\nComplex.HALF = DEFINE.HALF;\n\n/**\n * Positive infinity.\n * @type {Complex}\n */\nComplex.POSITIVE_INFINITY = DEFINE.POSITIVE_INFINITY;\n\n/**\n * Negative Infinity.\n * @type {Complex}\n */\nComplex.NEGATIVE_INFINITY = DEFINE.NEGATIVE_INFINITY;\n\n/**\n * Not a Number.\n * @type {Complex}\n */\nComplex.NaN = DEFINE.NaN;\n\n",
    "static": true,
    "longname": "D:/JavaScript/konpeitoWSH/src/math/core/Complex.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "instanceofComplex",
    "memberof": "src/math/core/Complex.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~instanceofComplex",
    "access": "private",
    "export": false,
    "importPath": "konpeito_wsh/src/math/core/Complex.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "typedef",
    "name": "KComplexInputData",
    "memberof": "src/math/core/Complex.js",
    "static": true,
    "longname": "src/math/core/Complex.js~KComplexInputData",
    "access": "public",
    "description": "Complex type argument.\n- Complex\n- number\n- boolean\n- string\n- Array<number>\n- {_re:number,_im:number}\n- {doubleValue:number}\n- {toString:function}\n\nInitialization can be performed as follows.\n- 1200, \"1200\", \"12e2\", \"1.2e3\"\n- \"3 + 4i\", \"4j + 3\", [3, 4].",
    "type": {
      "types": [
        "Complex",
        "number",
        "boolean",
        "string",
        "Array<number>",
        "{_re:number,_im:number}",
        "{doubleValue:number}",
        "{toString:function}"
      ],
      "optional": false,
      "name": "KComplexInputData"
    }
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "random_class",
    "memberof": "src/math/core/Complex.js",
    "static": true,
    "longname": "src/math/core/Complex.js~random_class",
    "access": "public",
    "export": false,
    "importPath": "konpeito_wsh/src/math/core/Complex.js",
    "importStyle": null,
    "description": "Random number generation class used within Complex.",
    "lineNumber": 45,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Random"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "class",
    "name": "ComplexTool",
    "memberof": "src/math/core/Complex.js",
    "static": true,
    "longname": "src/math/core/Complex.js~ComplexTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito_wsh/src/math/core/Complex.js",
    "importStyle": null,
    "description": "Collection of functions used in Complex.",
    "lineNumber": 51,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "ToComplexFromString",
    "memberof": "src/math/core/Complex.js~ComplexTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~ComplexTool.ToComplexFromString",
    "access": "public",
    "description": "Create data for complex numbers from strings.",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{real : number, imag : number}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Target strings."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{real : number, imag : number}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 57,
    "kind": "class",
    "name": "Complex",
    "memberof": "src/math/core/Complex.js",
    "static": true,
    "longname": "src/math/core/Complex.js~Complex",
    "access": "public",
    "export": true,
    "importPath": "konpeito_wsh/src/math/core/Complex.js",
    "importStyle": "Complex",
    "description": "Complex number class. (immutable)",
    "lineNumber": 101,
    "interface": false
  },
  {
    "__docId__": 58,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#constructor",
    "access": "public",
    "description": "Create a complex number.\n\nInitialization can be performed as follows.\n- 1200, \"1200\", \"12e2\", \"1.2e3\"\n- \"3 + 4i\", \"4j + 3\", [3, 4].",
    "lineNumber": 111,
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "Complex number. See how to use the function."
      }
    ]
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "_re",
    "memberof": "src/math/core/Complex.js~Complex",
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#_re",
    "access": "private",
    "description": "The real part of this Comlex.",
    "lineNumber": 123,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "_im",
    "memberof": "src/math/core/Complex.js~Complex",
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#_im",
    "access": "private",
    "description": "The imaginary part of this Comlex.",
    "lineNumber": 130,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "create",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.create",
    "access": "public",
    "description": "Create an entity object of this class.",
    "lineNumber": 177,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.valueOf",
    "access": "public",
    "description": "Convert number to Complex type.",
    "lineNumber": 191,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "_toComplex",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex._toComplex",
    "access": "private",
    "description": "Convert to Complex.\nIf type conversion is unnecessary, return the value as it is.",
    "lineNumber": 202,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "_toDouble",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex._toDouble",
    "access": "private",
    "description": "Convert to real number.",
    "lineNumber": 222,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "_toInteger",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex._toInteger",
    "access": "private",
    "description": "Convert to integer.",
    "lineNumber": 241,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "clone",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#clone",
    "access": "public",
    "description": "Deep copy.",
    "lineNumber": 249,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#toString",
    "access": "public",
    "description": "Convert to string.",
    "lineNumber": 257,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#toJSON",
    "access": "public",
    "description": "Convert to JSON.",
    "lineNumber": 300,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "real",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#real",
    "access": "public",
    "description": "The real part of this Comlex.",
    "lineNumber": 321,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} real(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "real(A)"
    },
    "params": []
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "imag",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#imag",
    "access": "public",
    "description": "The imaginary part of this Comlex.",
    "lineNumber": 329,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} imag(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "imag(A)"
    },
    "params": []
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "norm",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#norm",
    "access": "public",
    "description": "norm.",
    "lineNumber": 337,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} |A|"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "|A|"
    },
    "params": []
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "arg",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#arg",
    "access": "public",
    "description": "The argument of this complex number.",
    "lineNumber": 353,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} arg(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "arg(A)"
    },
    "params": []
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "getDecimalPosition",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#getDecimalPosition",
    "access": "public",
    "description": "Return number of decimal places for real and imaginary parts.\n- Used to make a string.",
    "lineNumber": 370,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Number of decimal places."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Number of decimal places."
    },
    "params": []
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "sign",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#sign",
    "access": "public",
    "description": "The positive or negative sign of this number.\n- +1 if positive, -1 if negative, 0 if 0.",
    "lineNumber": 397,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "add",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#add",
    "access": "public",
    "description": "Add.",
    "lineNumber": 429,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A + B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A + B"
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "sub",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#sub",
    "access": "public",
    "description": "Subtract.",
    "lineNumber": 442,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A - B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A - B"
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "mul",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#mul",
    "access": "public",
    "description": "Multiply.",
    "lineNumber": 455,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A * B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A * B"
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "dot",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#dot",
    "access": "public",
    "description": "Inner product/Dot product.",
    "lineNumber": 481,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A * conj(B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A * conj(B)"
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "div",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#div",
    "access": "public",
    "description": "Divide.",
    "lineNumber": 507,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A / B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A / B"
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "rem",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#rem",
    "access": "public",
    "description": "Modulo, positive remainder of division.\n- Result has same sign as the Dividend.",
    "lineNumber": 535,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A rem B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "Divided value (real number only)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A rem B"
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "mod",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#mod",
    "access": "public",
    "description": "Modulo, positive remainder of division.\n- Result has same sign as the Divisor.",
    "lineNumber": 554,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A mod B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "Divided value (real number only)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A mod B"
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "inv",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#inv",
    "access": "public",
    "description": "Inverse number of this value.",
    "lineNumber": 576,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 1 / A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "1 / A"
    },
    "params": []
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "booleanValue",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#booleanValue",
    "access": "public",
    "description": "boolean value.",
    "lineNumber": 594,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "intValue",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#intValue",
    "access": "public",
    "description": "integer value.",
    "lineNumber": 602,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "doubleValue",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#doubleValue",
    "access": "public",
    "description": "floating point.",
    "lineNumber": 620,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "toComplex",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#toComplex",
    "access": "public",
    "description": "return Complex.",
    "lineNumber": 642,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "equals",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#equals",
    "access": "public",
    "description": "Equals.",
    "lineNumber": 656,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === B"
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "equalsState",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#equalsState",
    "access": "public",
    "description": "Numeric type match.",
    "lineNumber": 676,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "compareTo",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#compareTo",
    "access": "public",
    "description": "Compare values.",
    "lineNumber": 711,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} A > B ? 1 : (A === B ? 0 : -1)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A > B ? 1 : (A === B ? 0 : -1)"
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "max",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#max",
    "access": "public",
    "description": "Maximum number.",
    "lineNumber": 750,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} max([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "max([A, B])"
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "min",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#min",
    "access": "public",
    "description": "Minimum number.",
    "lineNumber": 765,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} min([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "min([A, B])"
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "clip",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#clip",
    "access": "public",
    "description": "Clip number within range.",
    "lineNumber": 781,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} min(max(x, min), max)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "min(max(x, min), max)"
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "floor",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#floor",
    "access": "public",
    "description": "Floor.",
    "lineNumber": 808,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} floor(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "floor(A)"
    },
    "params": []
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "ceil",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#ceil",
    "access": "public",
    "description": "Ceil.",
    "lineNumber": 816,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} ceil(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "ceil(A)"
    },
    "params": []
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "round",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#round",
    "access": "public",
    "description": "Rounding to the nearest integer.",
    "lineNumber": 824,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} round(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "round(A)"
    },
    "params": []
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "fix",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#fix",
    "access": "public",
    "description": "To integer rounded down to the nearest.",
    "lineNumber": 832,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} fix(A), trunc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "fix(A), trunc(A)"
    },
    "params": []
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "fract",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#fract",
    "access": "public",
    "description": "Fraction.",
    "lineNumber": 840,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} fract(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "fract(A)"
    },
    "params": []
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "abs",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#abs",
    "access": "public",
    "description": "Absolute value.",
    "lineNumber": 852,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} abs(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "abs(A)"
    },
    "params": []
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "conj",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#conj",
    "access": "public",
    "description": "Complex conjugate.",
    "lineNumber": 860,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} real(A) - imag(A)j"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "real(A) - imag(A)j"
    },
    "params": []
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "negate",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#negate",
    "access": "public",
    "description": "this * -1",
    "lineNumber": 872,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} -A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A"
    },
    "params": []
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "pow",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#pow",
    "access": "public",
    "description": "Power function.",
    "lineNumber": 885,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} pow(A, B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "pow(A, B)"
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "square",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#square",
    "access": "public",
    "description": "Square.",
    "lineNumber": 913,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} pow(A, 2)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "pow(A, 2)"
    },
    "params": []
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "sqrt",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#sqrt",
    "access": "public",
    "description": "Square root.",
    "lineNumber": 924,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} sqrt(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "sqrt(A)"
    },
    "params": []
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "cbrt",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#cbrt",
    "access": "public",
    "description": "Cube root.",
    "lineNumber": 943,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} cbrt(A)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "n",
        "description": "Value type(0,1,2)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "cbrt(A)"
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "rsqrt",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#rsqrt",
    "access": "public",
    "description": "Reciprocal square root.",
    "lineNumber": 961,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} rsqrt(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "rsqrt(A)"
    },
    "params": []
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "log",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#log",
    "access": "public",
    "description": "Logarithmic function.",
    "lineNumber": 977,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} log(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "log(A)"
    },
    "params": []
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "exp",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#exp",
    "access": "public",
    "description": "Exponential function.",
    "lineNumber": 989,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} exp(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "exp(A)"
    },
    "params": []
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "expm1",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#expm1",
    "access": "public",
    "description": "e^x - 1",
    "lineNumber": 1002,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} expm1(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "expm1(A)"
    },
    "params": []
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "log1p",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#log1p",
    "access": "public",
    "description": "ln(1 + x)",
    "lineNumber": 1010,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} log1p(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "log1p(A)"
    },
    "params": []
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "log2",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#log2",
    "access": "public",
    "description": "log_2(x)",
    "lineNumber": 1018,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} log2(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "log2(A)"
    },
    "params": []
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "log10",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#log10",
    "access": "public",
    "description": "log_10(x)",
    "lineNumber": 1027,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} log10(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "log10(A)"
    },
    "params": []
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "sin",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#sin",
    "access": "public",
    "description": "Sine function.",
    "lineNumber": 1039,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} sin(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "sin(A)"
    },
    "params": []
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "cos",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#cos",
    "access": "public",
    "description": "Cosine function.",
    "lineNumber": 1054,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} cos(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "cos(A)"
    },
    "params": []
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "tan",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#tan",
    "access": "public",
    "description": "Tangent function.",
    "lineNumber": 1069,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} tan(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "tan(A)"
    },
    "params": []
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "atan",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#atan",
    "access": "public",
    "description": "Atan (arc tangent) function.\n- Return the values of [-PI/2, PI/2].",
    "lineNumber": 1082,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} atan(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "atan(A)"
    },
    "params": []
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "atan2",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#atan2",
    "access": "public",
    "description": "Atan (arc tangent) function.\nReturn the values of [-PI, PI] .\nSupports only real numbers.",
    "lineNumber": 1097,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} atan2(Y, X)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "number",
        "description": "X"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "atan2(Y, X)"
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "asin",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#asin",
    "access": "public",
    "description": "Arc sine function.",
    "lineNumber": 1119,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} asin(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "asin(A)"
    },
    "params": []
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "acos",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#acos",
    "access": "public",
    "description": "Arc cosine function.",
    "lineNumber": 1128,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} acos(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "acos(A)"
    },
    "params": []
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "sinh",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#sinh",
    "access": "public",
    "description": "Hyperbolic sine function.",
    "lineNumber": 1138,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} sinh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "sinh(A)"
    },
    "params": []
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "asinh",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#asinh",
    "access": "public",
    "description": "Inverse hyperbolic sine function.",
    "lineNumber": 1148,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} asinh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "asinh(A)"
    },
    "params": []
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "cosh",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#cosh",
    "access": "public",
    "description": "Hyperbolic cosine function.",
    "lineNumber": 1160,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} cosh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "cosh(A)"
    },
    "params": []
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "acosh",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#acosh",
    "access": "public",
    "description": "Inverse hyperbolic cosine function.",
    "lineNumber": 1169,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} acosh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "acosh(A)"
    },
    "params": []
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "tanh",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#tanh",
    "access": "public",
    "description": "Hyperbolic tangent function.",
    "lineNumber": 1189,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} tanh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "tanh(A)"
    },
    "params": []
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "atanh",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#atanh",
    "access": "public",
    "description": "Inverse hyperbolic tangent function.",
    "lineNumber": 1208,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} atanh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "atanh(A)"
    },
    "params": []
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "sec",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#sec",
    "access": "public",
    "description": "Secant function.",
    "lineNumber": 1220,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} sec(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "sec(A)"
    },
    "params": []
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "asec",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#asec",
    "access": "public",
    "description": "Reverse secant function.",
    "lineNumber": 1229,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} asec(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "asec(A)"
    },
    "params": []
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "sech",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#sech",
    "access": "public",
    "description": "Hyperbolic secant function.",
    "lineNumber": 1238,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} sech(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "sech(A)"
    },
    "params": []
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "asech",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#asech",
    "access": "public",
    "description": "Inverse hyperbolic secant function.",
    "lineNumber": 1247,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} asech(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "asech(A)"
    },
    "params": []
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "cot",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#cot",
    "access": "public",
    "description": "Cotangent function.",
    "lineNumber": 1264,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} cot(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "cot(A)"
    },
    "params": []
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "acot",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#acot",
    "access": "public",
    "description": "Inverse cotangent function.",
    "lineNumber": 1273,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} acot(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "acot(A)"
    },
    "params": []
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "coth",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#coth",
    "access": "public",
    "description": "Hyperbolic cotangent function.",
    "lineNumber": 1282,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} coth(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "coth(A)"
    },
    "params": []
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "acoth",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#acoth",
    "access": "public",
    "description": "Inverse hyperbolic cotangent function.",
    "lineNumber": 1294,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} acoth(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "acoth(A)"
    },
    "params": []
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "csc",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#csc",
    "access": "public",
    "description": "Cosecant function.",
    "lineNumber": 1306,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} csc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "csc(A)"
    },
    "params": []
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "acsc",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#acsc",
    "access": "public",
    "description": "Inverse cosecant function.",
    "lineNumber": 1315,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} acsc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "acsc(A)"
    },
    "params": []
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "csch",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#csch",
    "access": "public",
    "description": "Hyperbolic cosecant function.",
    "lineNumber": 1324,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} csch(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "csch(A)"
    },
    "params": []
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "acsch",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#acsch",
    "access": "public",
    "description": "Inverse hyperbolic cosecant function.",
    "lineNumber": 1333,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} acsch(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "acsch(A)"
    },
    "params": []
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "logit",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#logit",
    "access": "public",
    "description": "Logit function.",
    "lineNumber": 1346,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} logit(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "logit(A)"
    },
    "params": []
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "sinc",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#sinc",
    "access": "public",
    "description": "Normalized sinc function.",
    "lineNumber": 1358,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} sinc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "sinc(A)"
    },
    "params": []
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "rand",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.rand",
    "access": "public",
    "description": "Create random values [0, 1) with uniform random numbers.",
    "lineNumber": 1379,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Random"
        ],
        "spread": false,
        "optional": true,
        "name": "random",
        "description": "Class for creating random numbers."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "randn",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.randn",
    "access": "public",
    "description": "Create random values with normal distribution.",
    "lineNumber": 1389,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Random"
        ],
        "spread": false,
        "optional": true,
        "name": "random",
        "description": "Class for creating random numbers."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "isInteger",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isInteger",
    "access": "public",
    "description": "Return true if the value is integer.",
    "lineNumber": 1403,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "isComplexInteger",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isComplexInteger",
    "access": "public",
    "description": "Returns true if the vallue is complex integer (including normal integer).",
    "lineNumber": 1413,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} real(A) === integer && imag(A) === integer"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "real(A) === integer && imag(A) === integer"
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "isZero",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isZero",
    "access": "public",
    "description": "this === 0",
    "lineNumber": 1425,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === 0"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === 0"
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "isOne",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isOne",
    "access": "public",
    "description": "this === 1",
    "lineNumber": 1435,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === 1"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === 1"
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "isComplex",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isComplex",
    "access": "public",
    "description": "Returns true if the vallue is complex number (imaginary part is not 0).",
    "lineNumber": 1445,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} imag(A) !== 0"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "imag(A) !== 0"
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "isReal",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isReal",
    "access": "public",
    "description": "Return true if the value is real number.",
    "lineNumber": 1455,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} imag(A) === 0"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "imag(A) === 0"
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "isNaN",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isNaN",
    "access": "public",
    "description": "this === NaN",
    "lineNumber": 1464,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isNaN(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isNaN(A)"
    },
    "params": []
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "isPositive",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isPositive",
    "access": "public",
    "description": "Return true if this real part of the complex positive.",
    "lineNumber": 1472,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} real(x) > 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "real(x) > 0"
    },
    "params": []
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "isNegative",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isNegative",
    "access": "public",
    "description": "real(this) < 0",
    "lineNumber": 1482,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} real(x) < 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "real(x) < 0"
    },
    "params": []
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "isNotNegative",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isNotNegative",
    "access": "public",
    "description": "real(this) >= 0",
    "lineNumber": 1490,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} real(x) >= 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "real(x) >= 0"
    },
    "params": []
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "isPositiveInfinity",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isPositiveInfinity",
    "access": "public",
    "description": "this === Infinity",
    "lineNumber": 1498,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isPositiveInfinity(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isPositiveInfinity(A)"
    },
    "params": []
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "isNegativeInfinity",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isNegativeInfinity",
    "access": "public",
    "description": "this === -Infinity",
    "lineNumber": 1506,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isNegativeInfinity(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isNegativeInfinity(A)"
    },
    "params": []
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "isInfinite",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isInfinite",
    "access": "public",
    "description": "this === Infinity or -Infinity",
    "lineNumber": 1514,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isPositiveInfinity(A) || isNegativeInfinity(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isPositiveInfinity(A) || isNegativeInfinity(A)"
    },
    "params": []
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "isFinite",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isFinite",
    "access": "public",
    "description": "Return true if the value is finite number.",
    "lineNumber": 1522,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} !isNaN(A) && !isInfinite(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "!isNaN(A) && !isInfinite(A)"
    },
    "params": []
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "gammaln",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#gammaln",
    "access": "public",
    "description": "Log-gamma function.\n- Calculate from real values.",
    "lineNumber": 1535,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "gamma",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#gamma",
    "access": "public",
    "description": "Gamma function.\n- Calculate from real values.",
    "lineNumber": 1544,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "gammainc",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#gammainc",
    "access": "public",
    "description": "Incomplete gamma function.\n- Calculate from real values.",
    "lineNumber": 1555,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower (default) , \"upper\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "gampdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#gampdf",
    "access": "public",
    "description": "Probability density function (PDF) of the gamma distribution.\n- Calculate from real values.",
    "lineNumber": 1567,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "gamcdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#gamcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of gamma distribution.\n- Calculate from real values.",
    "lineNumber": 1580,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "gaminv",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#gaminv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of gamma distribution.\n- Calculate from real values.",
    "lineNumber": 1593,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "beta",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#beta",
    "access": "public",
    "description": "Beta function.\n- Calculate from real values.",
    "lineNumber": 1605,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "betainc",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#betainc",
    "access": "public",
    "description": "Incomplete beta function.\n- Calculate from real values.",
    "lineNumber": 1618,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower (default) , \"upper\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "betapdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#betapdf",
    "access": "public",
    "description": "Probability density function (PDF) of beta distribution.\n- Calculate from real values.",
    "lineNumber": 1631,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "betacdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#betacdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of beta distribution.\n- Calculate from real values.",
    "lineNumber": 1644,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "betainv",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#betainv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of beta distribution.\n- Calculate from real values.",
    "lineNumber": 1657,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "factorial",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#factorial",
    "access": "public",
    "description": "Factorial function, x!.\n- Calculate from real values.",
    "lineNumber": 1668,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "nchoosek",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#nchoosek",
    "access": "public",
    "description": "Binomial coefficient, number of all combinations, nCk.\n- Calculate from real values.",
    "lineNumber": 1678,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "erf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#erf",
    "access": "public",
    "description": "Error function.\n- Calculate from real values.",
    "lineNumber": 1688,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "erfc",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#erfc",
    "access": "public",
    "description": "Complementary error function.\n- Calculate from real values.",
    "lineNumber": 1697,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "erfinv",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#erfinv",
    "access": "public",
    "description": "Inverse function of Error function.\n- Calculate from real values.",
    "lineNumber": 1706,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "erfcinv",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#erfcinv",
    "access": "public",
    "description": "Inverse function of Complementary error function.\n- Calculate from real values.",
    "lineNumber": 1715,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "normpdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#normpdf",
    "access": "public",
    "description": "Probability density function (PDF) of normal distribution.\n- Calculate from real values.",
    "lineNumber": 1726,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "normcdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#normcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of normal distribution.\n- Calculate from real values.",
    "lineNumber": 1739,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "norminv",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#norminv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of normal distribution.\n- Calculate from real values.",
    "lineNumber": 1752,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "binopdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#binopdf",
    "access": "public",
    "description": "Probability density function (PDF) of binomial distribution.\n- Calculate from real values.",
    "lineNumber": 1765,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "binocdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#binocdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of binomial distribution.\n- Calculate from real values.",
    "lineNumber": 1779,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower (default) , \"upper\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "binoinv",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#binoinv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of binomial distribution.\n- Calculate from real values.",
    "lineNumber": 1792,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "poisspdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#poisspdf",
    "access": "public",
    "description": "Probability density function (PDF) of Poisson distribution.\n- Calculate from real values.",
    "lineNumber": 1804,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "lambda",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "poisscdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#poisscdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of Poisson distribution.\n- Calculate from real values.",
    "lineNumber": 1815,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "lambda",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "poissinv",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#poissinv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of Poisson distribution.\n- Calculate from real values.",
    "lineNumber": 1826,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "lambda",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "tpdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#tpdf",
    "access": "public",
    "description": "Probability density function (PDF) of Student's t-distribution.\n- Calculate from real values.",
    "lineNumber": 1837,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "tcdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#tcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of Student's t-distribution.\n- Calculate from real values.",
    "lineNumber": 1848,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "tinv",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#tinv",
    "access": "public",
    "description": "Inverse of cumulative distribution function (CDF) of Student's t-distribution.\n- Calculate from real values.",
    "lineNumber": 1859,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "tdist",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#tdist",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of Student's t-distribution that can specify tail.\n- Calculate from real values.",
    "lineNumber": 1871,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "tails",
        "description": "Tail. (1 = the one-tailed distribution, 2 =  the two-tailed distribution.)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "tinv2",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#tinv2",
    "access": "public",
    "description": "Inverse of cumulative distribution function (CDF) of Student's t-distribution in two-sided test.\n- Calculate from real values.",
    "lineNumber": 1883,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "chi2pdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#chi2pdf",
    "access": "public",
    "description": "Probability density function (PDF) of chi-square distribution.\n- Calculate from real values.",
    "lineNumber": 1894,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "chi2cdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#chi2cdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of chi-square distribution.\n- Calculate from real values.",
    "lineNumber": 1905,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "chi2inv",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#chi2inv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of chi-square distribution.\n- Calculate from real values.",
    "lineNumber": 1916,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "fpdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#fpdf",
    "access": "public",
    "description": "Probability density function (PDF) of F-distribution.\n- Calculate from real values.",
    "lineNumber": 1928,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "fcdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#fcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of F-distribution.\n- Calculate from real values.",
    "lineNumber": 1941,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "finv",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#finv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of F-distribution.\n- Calculate from real values.",
    "lineNumber": 1954,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "and",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#and",
    "access": "public",
    "description": "Logical AND.\n- Calculated as an integer.",
    "lineNumber": 1970,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A & B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A & B"
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "or",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#or",
    "access": "public",
    "description": "Logical OR.\n- Calculated as an integer.",
    "lineNumber": 1982,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A | B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A | B"
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "xor",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#xor",
    "access": "public",
    "description": "Logical Exclusive-OR.\n- Calculated as an integer.",
    "lineNumber": 1994,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A ^ B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A ^ B"
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "not",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#not",
    "access": "public",
    "description": "Logical Not. (mutable)\n- Calculated as an integer.",
    "lineNumber": 2005,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} !A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "!A"
    },
    "params": []
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "shift",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#shift",
    "access": "public",
    "description": "this << n\n- Calculated as an integer.",
    "lineNumber": 2016,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A << n"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A << n"
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "scaleByPowerOfTen",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#scaleByPowerOfTen",
    "access": "public",
    "description": "Multiply a multiple of ten.",
    "lineNumber": 2031,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} x * 10^n"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "x * 10^n"
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "signum",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#signum",
    "access": "public",
    "description": "The positive or negative sign of this number.\n- +1 if positive, -1 if negative, 0 if 0.",
    "lineNumber": 2044,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "subtract",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#subtract",
    "access": "public",
    "description": "Subtract.",
    "lineNumber": 2053,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A - B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A - B"
    }
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "multiply",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#multiply",
    "access": "public",
    "description": "Multiply.",
    "lineNumber": 2062,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A * B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A * B"
    }
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "divide",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#divide",
    "access": "public",
    "description": "Divide.",
    "lineNumber": 2071,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} fix(A / B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "fix(A / B)"
    }
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "remainder",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#remainder",
    "access": "public",
    "description": "Remainder of division.\n- Result has same sign as the Dividend.",
    "lineNumber": 2081,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A % B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A % B"
    }
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "trunc",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#trunc",
    "access": "public",
    "description": "To integer rounded down to the nearest.",
    "lineNumber": 2089,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} fix(A), trunc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "fix(A), trunc(A)"
    },
    "params": []
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "isComplexData",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isComplexData",
    "access": "private",
    "description": "",
    "lineNumber": 2098,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true"
    },
    "params": []
  },
  {
    "__docId__": 217,
    "kind": "variable",
    "name": "DEFINE",
    "memberof": "src/math/core/Complex.js",
    "static": true,
    "longname": "src/math/core/Complex.js~DEFINE",
    "access": "public",
    "export": false,
    "importPath": "konpeito_wsh/src/math/core/Complex.js",
    "importStyle": null,
    "description": "Collection of constant values used in the class.",
    "lineNumber": 2108,
    "ignore": true,
    "type": {
      "types": [
        "{\"ZERO\": *, \"ONE\": *, \"TWO\": *, \"TEN\": *, \"MINUS_ONE\": *, \"I\": *, \"MINUS_I\": *, \"PI\": *, \"QUARTER_PI\": *, \"HALF_PI\": *, \"TWO_PI\": *, \"E\": *, \"LN2\": *, \"LN10\": *, \"LOG2E\": *, \"LOG10E\": *, \"SQRT2\": *, \"SQRT1_2\": *, \"HALF\": *, \"POSITIVE_INFINITY\": *, \"NEGATIVE_INFINITY\": *, \"NaN\": *}"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "file",
    "name": "src/math/core/Matrix.js",
    "content": "﻿/**\n * The script is part of konpeitoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport LinearAlgebra from \"./tools/LinearAlgebra.js\";\nimport Statistics from \"./tools/Statistics.js\";\nimport Random from \"./tools/Random.js\";\nimport Complex from \"./Complex.js\";\n\n/**\n * @param {any} obj \n * @returns {boolean} \n * @private\n */\nconst instanceofComplex = function(obj) {\n\treturn obj.isComplexData ? obj.isComplexData() : false;\n}\n\n/**\n * @param {any} obj \n * @returns {boolean} \n * @private\n */\n const instanceofMatrix = function(obj) {\n\treturn obj.isMatrixData ? obj.isMatrixData() : false;\n}\n\n/**\n * Matrix type argument.\n * - Matrix\n * - Complex\n * - number\n * - string\n * - Array<string|number|Complex|Matrix>\n * - Array<Array<string|number|Complex|Matrix>>\n * - {doubleValue:number}\n * - {toString:function}\n * \n * Initialization can be performed as follows.\n * - 10, \"10\", \"3 + 4j\", \"[ 1 ]\", \"[1, 2, 3]\", \"[1 2 3]\", [1, 2, 3],\n * - [[1, 2], [3, 4]], \"[1 2; 3 4]\", \"[1+2i 3+4i]\",\n * - \"[1:10]\", \"[1:2:3]\" (MATLAB / Octave / Scilab compatible).\n * @typedef {Matrix|Complex|number|string|Array<string|number|Complex|Matrix>|Array<Array<string|number|Complex|Matrix>>|{doubleValue:number}|{toString:function}} KMatrixInputData\n */\n\n/**\n * Collection of calculation settings for matrix.\n * - Available options vary depending on the method.\n * @typedef {Object} KMatrixSettings\n * @property {?string|?number} [dimension=\"auto\"] Calculation direction. 0/\"auto\", 1/\"row\", 2/\"column\", 3/\"both\".\n * @property {Object} [correction] Correction value. For statistics. 0(unbiased), 1(sample).\n */\n\n/**\n * Collection of functions used in Matrix.\n * @ignore\n */\nclass MatrixTool {\n\n\t/**\n\t * Create actual values from data specifying matrix position.\n\t * @param {any} data - A value indicating the position in a matrix.\n\t * @param {number} max - Length to initialize. (Used when \":\" is specified at matrix creation.)\n\t * @param {number} geta - Offset at initialization. (Used when \":\" is specified at matrix creation.)\n\t * @returns {Array<number>}\n\t */\n\tstatic toPositionArrayFromObject(data, max, geta) {\n\t\tif(typeof data === \"string\") {\n\t\t\tconst array_or_string = MatrixTool.toArrayFromString(data);\n\t\t\tif(array_or_string === \":\") {\n\t\t\t\t// : が指定された場合\n\t\t\t\tconst y = new Array(max);\n\t\t\t\tfor(let i = 0; i < max; i++) {\n\t\t\t\t\ty[i] =  i + geta;\n\t\t\t\t}\n\t\t\t\treturn y;\n\t\t\t}\n\t\t\telse if(array_or_string instanceof Array) {\n\t\t\t\t// 複素数の配列から中身を取り出す\n\t\t\t\tconst y = array_or_string;\n\t\t\t\tconst num_y = new Array(y.length);\n\t\t\t\tfor(let i = 0; i < y.length; i++) {\n\t\t\t\t\tnum_y[i] = Math.trunc(y[i].real());\n\t\t\t\t}\n\t\t\t\treturn num_y;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow \"toArrayFromString[\" + data + \"][\" + array_or_string + \"]\";\n\t\t\t}\n\t\t}\n\t\tlet t_data = data;\n\t\tif(!(instanceofMatrix(t_data)) && !(instanceofComplex(t_data)) && !((typeof t_data === \"number\"))) {\n\t\t\tt_data = Matrix._toMatrix(t_data);\n\t\t}\n\t\tif(instanceofMatrix(t_data)) {\n\t\t\tif(!t_data.isVector()) {\n\t\t\t\tthrow \"getMatrix argument \" + t_data;\n\t\t\t}\n\t\t\tconst len = t_data.length();\n\t\t\tconst y = new Array(t_data.length());\n\t\t\tif(t_data.isRow()) {\n\t\t\t\tfor(let i = 0; i < len; i++) {\n\t\t\t\t\ty[i] = Math.trunc(t_data.matrix_array[0][i].real());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(t_data.isColumn()) {\n\t\t\t\tfor(let i = 0; i < len; i++) {\n\t\t\t\t\ty[i] = Math.trunc(t_data.matrix_array[i][0].real());\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\treturn [ Matrix._toInteger(t_data) ];\n\t}\n\n\t/**\n\t * A match function that can also extract strings excluding matched strings.\n\t * @param {string} text - Search target.\n\t * @param {RegExp} regexp - Regular expression.\n\t * @returns {Array<Object<boolean, string>>}\n\t */\n\tstatic match2(text, regexp) {\n\t\t// 対象ではないregexpの情報以外も抽出match\n\t\t// つまり \"1a2b\" で \\d を抽出すると、次のように抽出される\n\t\t// [false \"1\"]\n\t\t// [true \"a\"]\n\t\t// [false \"2\"]\n\t\t// [true \"b\"]\n\t\t// 0 ... 一致したかどうか\n\t\t// 1 ... 一致した文字列、あるいは一致していない文字列\n\t\tconst output = [];\n\t\tlet search_target = text;\n\t\tfor(let x = 0; x < 1000; x++) {\n\t\t\tconst match = search_target.match(regexp);\n\t\t\tif(match === null) {\n\t\t\t\tif(search_target.length) {\n\t\t\t\t\toutput.push([ false, search_target ]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(match.index > 0) {\n\t\t\t\toutput.push([ false, search_target.substr(0, match.index) ]);\n\t\t\t}\n\t\t\toutput.push([ true, match[0] ]);\n\t\t\tsearch_target = search_target.substr(match.index + match[0].length);\n\t\t}\n\t\treturn output;\n\t}\n\t\n\t/**\n\t * Removed front and back brackets when enclosed by brackets.\n\t * - Return null if the string has no brackets.\n\t * @param {string} text - String to be processed.\n\t * @returns {{text : string, is_transpose : boolean}|null} String after brackets removal or null.\n\t */\n\tstatic trimBracket(text) {\n\t\tlet input_text = text;\n\t\tlet is_transpose = false;\n\t\t// 後ろに'が付いているかどうか検知(転置行列用)\n\t\tif(/'$/.test(input_text)) {\n\t\t\tconst dash_text = input_text.match(/(\\s*')*$/g)[0];\n\t\t\tconst dash_count = (dash_text.split(\"'\").length - 1);\n\t\t\tis_transpose = (dash_count % 2) === 1;\n\t\t\tinput_text = input_text.substring(0, input_text.length - dash_text.length);\n\t\t}\n\t\t// 前後に[]があるか確認\n\t\tif( !(/^\\[/).test(input_text) || !(/\\]$/).test(input_text)) {\n\t\t\treturn null;\n\t\t}\n\t\t// 前後の[]を除去\n\t\treturn {\n\t\t\ttext : input_text.substring(1, input_text.length - 1),\n\t\t\tis_transpose : is_transpose\n\t\t};\n\t}\n\n\t/**\n\t * Create Matrix type data from string data defined in JSON.\n\t * - For example, \"[xx,xx,xx], [xx,xx,xx]\"\n\t * @param {string} text - String to be processed.\n\t * @returns {Array<Array<Complex>>} Internal array used by Matrix type.\n\t */\n\tstatic toMatrixArrayFromStringForArrayJSON(text) {\n\t\tconst matrix_array = [];\n\t\t// さらにブランケット内を抽出\n\t\tlet rows = text.match(/\\[[^\\]]+\\]/g);\n\t\tif(rows === null) {\n\t\t\t// ブランケットがない場合は、1行行列である\n\t\t\trows = [text];\n\t\t}\n\t\t// 各ブランケット内を列ごとに調査\n\t\tfor(let row_count = 0; row_count < rows.length; row_count++) {\n\t\t\tconst row = rows[row_count];\n\t\t\tconst column_array = row.substring(1, row.length - 1).split(\",\");\n\t\t\tconst rows_array = [];\n\t\t\tfor(let col_count = 0; col_count < column_array.length; col_count++) {\n\t\t\t\tconst column = column_array[col_count];\n\t\t\t\trows_array[col_count] = new Complex(column);\n\t\t\t}\n\t\t\tmatrix_array[row_count] = rows_array;\n\t\t}\n\t\treturn matrix_array;\n\t}\n\n\t/**\n\t * Create a numeric array from initial values, difference values, and final values.\n\t * @param {Complex} from - Start value.\n\t * @param {Complex} delta - Delta.\n\t * @param {Complex} to - End value.\n\t * @param {boolean} [is_include_last_number=true] - Whether to include the last value.\n\t * @returns {Array<Complex>}\n\t */\n\tstatic InterpolationCalculation(from, delta, to, is_include_last_number) {\n\t\tconst FromIsGreaterThanTo = from.compareTo(to);\n\t\tconst is_include_last_number_ = is_include_last_number !== undefined ? is_include_last_number : true;\n\t\tif(FromIsGreaterThanTo === 0) {\n\t\t\treturn [from];\n\t\t}\n\t\tif(delta.isZero()) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\t// delta が負のため、どれだけたしても to にならない。\n\t\tif(delta.isNegative() && (FromIsGreaterThanTo === -1)) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\t// FromIsGreaterThanTo\n\t\t// +1 from の方が大きい。下に減算タイプ\n\t\t// -1 to の方が大きい。上に加算タイプ\n\t\tconst rows_array = [];\n\t\tlet num = from;\n\t\trows_array[0] = num;\n\t\tfor(let i = 1; i < 0x10000; i++) {\n\t\t\tnum = num.add(delta);\n\t\t\tif(is_include_last_number_) {\n\t\t\t\tif(to.compareTo(num) === FromIsGreaterThanTo) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif((to.compareTo(num) * FromIsGreaterThanTo) >= 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\trows_array[i] = num;\n\t\t}\n\t\treturn rows_array;\n\t}\n\n\t/**\n\t * Create an array of numbers from data separated by match2.\n\t * @param {Array<Object<boolean, string>>} match2_string - Data separated by \"toArrayFromString\".\n\t * @returns {Array<Complex>}\n\t */\n\tstatic toArrayFromMatch2String(match2_string) {\n\t\tconst xs = match2_string;\n\t\tconst rows_array = [];\n\t\tfor(let i = 0; i < xs.length; i++) {\n\t\t\tconst xx = xs[i];\n\t\t\tif(!xx[0]) {\n\t\t\t\t// 一致していないデータであれば次へ\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// 「:記法」 1:3 なら 1,2,3。 1:2:9 なら 1:3:5:7:9\n\t\t\tif((i < xs.length - 2) && !xs[i + 1][0] && /:/.test(xs[i + 1][1])) {\n\t\t\t\tlet from, delta, to;\n\t\t\t\tif((i < xs.length - 4) && !xs[i + 3][0] && /:/.test(xs[i + 3][1])) {\n\t\t\t\t\tfrom = new Complex(xx[1]);\n\t\t\t\t\tdelta = new Complex(xs[i + 2][1]);\n\t\t\t\t\tto = new Complex(xs[i + 4][1]);\n\t\t\t\t\ti += 4;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfrom = new Complex(xx[1]);\n\t\t\t\t\tdelta = Complex.ONE;\n\t\t\t\t\tto = new Complex(xs[i + 2][1]);\n\t\t\t\t\ti += 2;\n\t\t\t\t}\n\t\t\t\tconst ip_array = MatrixTool.InterpolationCalculation(from, delta, to, true);\n\t\t\t\tfor(let j = 0; j < ip_array.length; j++) {\n\t\t\t\t\trows_array.push(ip_array[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\trows_array.push(new Complex(xx[1]));\n\t\t\t}\n\t\t}\n\n\t\treturn rows_array;\n\t}\n\n\t/**\n\t * Convert string to row part of matrix type matrix data.\n\t * Estimate the matrix by extracting parts like numbers.\n\t * @param {string} row_text - A string describing one row of the matrix.\n\t * @returns {Array<Complex>|string}\n\t */\n\tstatic toArrayFromString(row_text) {\n\t\t// 「:」のみ記載されていないかの確認\n\t\tif(row_text.trim() === \":\") {\n\t\t\treturn \":\";\n\t\t}\n\t\tconst str = row_text.toLowerCase().replace(/infinity|inf/g, \"1e100000\");\n\t\t// 左が実数（強制）で右が複素数（任意）タイプ\n\t\tconst reg1 = /[+-]? *(([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)|(nan))( *[+-] *[- ]?(([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)|(nan))?[ij])?/;\n\t\t// 左が複素数（強制）で右が実数（任意）タイプ\n\t\tconst reg2 = /[+-]? *(([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)|(nan))?[ij]( *[+] *[- ]?(([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)|(nan)))?/;\n\t\t// reg2優先で検索\n\t\tconst reg3 = new RegExp(\"(\" + reg2.source + \")|(\" + reg1.source + \")\", \"i\");\n\t\t// 問題として 1 - -jが通る\n\t\treturn MatrixTool.toArrayFromMatch2String(MatrixTool.match2(str, reg3));\n\t}\n\n\t/**\n\t * Create Matrix type data from string data defined by character string with space separation etc.\n\t * @param {string} text - Strings to analyze.\n\t * @returns {Array<Array<Complex>>} Internal array used by Matrix type.\n\t */\n\tstatic toMatrixArrayFromStringForArraySPACE(text) {\n\t\t// 行ごとを抽出して\n\t\tconst rows = text.split(\";\");\n\t\tconst matrix_array = new Array(rows.length);\n\t\tfor(let row_count = 0; row_count < rows.length; row_count++) {\n\t\t\t// 各行の文字を解析\n\t\t\tmatrix_array[row_count] = MatrixTool.toArrayFromString(rows[row_count]);\n\t\t}\n\t\treturn matrix_array;\n\t}\n\n\t/**\n\t * Create Matrix type data composed of string data for matrix.\n\t * @param {string} text - Strings to analyze.\n\t * @returns {Array<Array<Complex>>} Internal array used by Matrix type.\n\t */\n\tstatic toMatrixArrayFromStringInBracket(text) {\n\t\t// ブラケットの中にブラケットがある＝JSON形式\n\t\tif(/[[\\]]/.test(text)) {\n\t\t\treturn MatrixTool.toMatrixArrayFromStringForArrayJSON(text);\n\t\t}\n\t\t// それ以外(MATLAB, Octave, Scilab)\n\t\telse {\n\t\t\treturn MatrixTool.toMatrixArrayFromStringForArraySPACE(text);\n\t\t}\n\t}\n\n\t/**\n\t * Create Matrix type data from string data.\n\t * @param {string} text - Strings to analyze.\n\t * @returns {Array<Array<Complex>>} Internal array used by Matrix type.\n\t */\n\tstatic toMatrixArrayFromString(text) {\n\t\t// 前後のスペースを除去\n\t\tconst trimtext = text.replace(/^\\s*|\\s*$/g, \"\");\n\t\t// ブラケットを外す\n\t\tconst withoutBracket = MatrixTool.trimBracket(trimtext);\n\t\tif(withoutBracket) {\n\t\t\t// 配列用の初期化\n\t\t\tlet array_data = MatrixTool.toMatrixArrayFromStringInBracket(withoutBracket.text);\n\t\t\t// 転置が必要なら転置させる\n\t\t\tif(withoutBracket.is_transpose) {\n\t\t\t\tarray_data = (new Matrix(array_data)).T().matrix_array;\n\t\t\t}\n\t\t\treturn array_data;\n\t\t}\n\t\t// ブラケットがないが、; や , が含まれていたり、数字と数字にスペースがある場合は配列としてみなす\n\t\telse if(/[;,]|[0-9]\\s+[0-9]/.test(text)) {\n\t\t\treturn MatrixTool.toMatrixArrayFromStringInBracket(text.replace(/[[\\]]/g, \"\").replace(/,/g, \" \"));\n\t\t}\n\t\telse {\n\t\t\t// スカラー用の初期化\n\t\t\treturn [[new Complex(text)]];\n\t\t}\n\t}\n\n\t/**\n\t * Returns true if Matrix type internal data is correct as matrix data.\n\t * @param {Array<Array<Complex>>} m_array\n\t * @returns {boolean} \n\t */\n\tstatic isCorrectMatrixArray(m_array) {\n\t\tif(m_array.length === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tconst num = m_array[0].length;\n\t\tif(num === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tfor(let i = 1; i < m_array.length; i++) {\n\t\t\tif(m_array[i].length !== num) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\n/**\n * Complex matrix class. (immutable)\n */\nexport default class Matrix {\n\t\n\t/**\n\t * Create a complex matrix.\n\t * Initialization can be performed as follows.\n\t * - 10, \"10\", \"3 + 4j\", \"[ 1 ]\", \"[1, 2, 3]\", \"[1 2 3]\", [1, 2, 3],\n\t * - [[1, 2], [3, 4]], \"[1 2; 3 4]\", \"[1+2i 3+4i]\",\n\t * - \"[1:10]\", \"[1:2:3]\" (MATLAB / Octave / Scilab compatible).\n\t * @param {KMatrixInputData} number - Complex matrix. See how to use the function.\n\t */\n\tconstructor(number) {\n\t\tlet matrix_array = null;\n\t\tlet is_check_string = false;\n\t\tif(arguments.length === 1) {\n\t\t\tconst obj = number;\n\t\t\t// 行列型なら中身をディープコピーする\n\t\t\tif(instanceofMatrix(obj)) {\n\t\t\t\tmatrix_array = new Array(obj.row_length);\n\t\t\t\tfor(let i = 0; i < obj.row_length; i++) {\n\t\t\t\t\tmatrix_array[i] = new Array(obj.column_length);\n\t\t\t\t\tfor(let j = 0; j < obj.column_length; j++) {\n\t\t\t\t\t\tmatrix_array[i][j] = obj.matrix_array[i][j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 複素数型なら1要素の行列\n\t\t\telse if(instanceofComplex(obj)) {\n\t\t\t\tmatrix_array = [[obj]];\n\t\t\t}\n\t\t\t// 行列の場合は中身を解析していく\n\t\t\telse if(obj instanceof Array) {\n\t\t\t\tmatrix_array = [];\n\t\t\t\tfor(let row_count = 0; row_count < obj.length; row_count++) {\n\t\t\t\t\t// 毎行ごと調査\n\t\t\t\t\tconst row = obj[row_count];\n\t\t\t\t\t// 各行の要素が配列の場合は、配列内配列のため再度for文で調べていく\n\t\t\t\t\tif(row instanceof Array) {\n\t\t\t\t\t\tconst rows_array = new Array(row.length);\n\t\t\t\t\t\t// 1行を調査する\n\t\t\t\t\t\tfor(let col_count = 0; col_count < row.length; col_count++) {\n\t\t\t\t\t\t\tconst column = row[col_count];\n\t\t\t\t\t\t\t// 1要素が複素数ならそのまま代入\n\t\t\t\t\t\t\tif(instanceofComplex(column)) {\n\t\t\t\t\t\t\t\trows_array[col_count] = column;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// 1要素が行列なら、中身を抽出して代入\n\t\t\t\t\t\t\telse if(instanceofMatrix(column)) {\n\t\t\t\t\t\t\t\tif(!column.isScalar()) {\n\t\t\t\t\t\t\t\t\tthrow \"Matrix in matrix\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\trows_array[col_count] = column.scalar();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// それ以外の場合は、複素数クラスのコンストラクタに判断させる\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\trows_array[col_count] = new Complex(column);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatrix_array[row_count] = rows_array;\n\t\t\t\t\t}\n\t\t\t\t\t// 1つの値のみ宣言の場合は、中の配列を行ベクトルとして定義する\n\t\t\t\t\telse {\n\t\t\t\t\t\t// 行ベクトルの初期化\n\t\t\t\t\t\tif(row_count === 0) {\n\t\t\t\t\t\t\tmatrix_array[0] = new Array(obj.length);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 1要素が複素数ならそのまま代入\n\t\t\t\t\t\tif(instanceofComplex(row)) {\n\t\t\t\t\t\t\tmatrix_array[0][row_count] = row;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 1要素が行列なら、中身を抽出して代入\n\t\t\t\t\t\telse if(instanceofMatrix(row)) {\n\t\t\t\t\t\t\tif(!row.isScalar()) {\n\t\t\t\t\t\t\t\tthrow \"Matrix in matrix\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmatrix_array[0][row_count] = row.scalar();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// それ以外の場合は、複素数クラスのコンストラクタに判断させる\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tmatrix_array[0][row_count] = new Complex(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 文字列の場合は、文字列解析を行う\n\t\t\telse if(typeof obj === \"string\") {\n\t\t\t\tis_check_string = true;\n\t\t\t\tmatrix_array = MatrixTool.toMatrixArrayFromString(obj);\n\t\t\t}\n\t\t\t// 文字列変換できる場合は返還後に、文字列解析を行う\n\t\t\telse if(obj instanceof Object) {\n\t\t\t\tis_check_string = true;\n\t\t\t\tmatrix_array = MatrixTool.toMatrixArrayFromString(obj.toString());\n\t\t\t}\n\t\t\t// 単純なビルトインの数値など\n\t\t\telse {\n\t\t\t\tmatrix_array = [[new Complex(obj)]];\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow \"Matrix : Many arguments [\" + arguments.length + \"]\";\n\t\t}\n\t\tif(is_check_string) {\n\t\t\t// 文字列データの解析の場合、\":\" データが紛れていないかを確認する。\n\t\t\t// 紛れていたらその行は削除する。\n\t\t\tfor(let row = 0; row < matrix_array.length; row++) {\n\t\t\t\tif(matrix_array[row] === \":\") {\n\t\t\t\t\tmatrix_array.splice(row--, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(!MatrixTool.isCorrectMatrixArray(matrix_array)) {\n\t\t\tconsole.log(matrix_array);\n\t\t\tthrow \"new Matrix IllegalArgumentException\";\n\t\t}\n\t\t\n\t\t/**\n\t\t * An array of elements in the matrix.\n\t\t * @ignore\n\t\t * @type {Array<Array<Complex>>}\n\t\t */\n\t\tthis.matrix_array = matrix_array;\n\n\t\t/**\n\t\t * The number of rows in a matrix.\n\t\t * @ignore\n\t\t * @type {number}\n\t\t */\n\t\tthis.row_length = this.matrix_array.length;\n\t\t\n\t\t/**\n\t\t * The number of columns in a matrix.\n\t\t * @ignore\n\t\t * @type {number}\n\t\t */\n\t\tthis.column_length = this.matrix_array[0].length;\n\n\t\t/**\n\t\t * A cache that records data converted to a string.\n\t\t * @private\n\t\t * @ignore\n\t\t * @type {string}\n\t\t */\n\t\tthis.string_cash = null;\n\t}\n\n\t/**\n\t * Create an entity object of this class.\n\t * @param {KMatrixInputData} number\n\t * @returns {Matrix}\n\t */\n\tstatic create(number) {\n\t\tif((arguments.length === 1) && (instanceofMatrix(number))) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new Matrix(number);\n\t\t}\n\t}\n\t\n\t/**\n\t * Convert number to Matrix type.\n\t * @param {KMatrixInputData} number\n\t * @returns {Matrix}\n\t */\n\tstatic valueOf(number) {\n\t\treturn Matrix.create(number);\n\t}\n\n\t/**\n\t * Convert to Matrix.\n\t * If type conversion is unnecessary, return the value as it is.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix}\n\t * @ignore\n\t */\n\tstatic _toMatrix(number) {\n\t\tif(instanceofMatrix(number)) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new Matrix(number);\n\t\t}\n\t}\n\n\t/**\n\t * Convert to Complex.\n\t * If type conversion is unnecessary, return the value as it is.\n\t * @param {KMatrixInputData} number \n\t * @returns {Complex}\n\t * @ignore\n\t */\n\tstatic _toComplex(number) {\n\t\tif(instanceofComplex(number)) {\n\t\t\treturn number;\n\t\t}\n\t\tconst M = Matrix._toMatrix(number);\n\t\tif(M.isScalar()) {\n\t\t\treturn M.scalar();\n\t\t}\n\t\telse {\n\t\t\tthrow \"not scalar. [\" + number + \"]\";\n\t\t}\n\t}\n\n\t/**\n\t * Convert to real number.\n\t * @param {KMatrixInputData} number \n\t * @returns {number}\n\t * @ignore\n\t */\n\tstatic _toDouble(number) {\n\t\tif(typeof number === \"number\") {\n\t\t\treturn number;\n\t\t}\n\t\tconst x = Matrix._toComplex(number);\n\t\tif(x.isReal()) {\n\t\t\treturn x.real();\n\t\t}\n\t\telse {\n\t\t\tthrow \"not support complex numbers.\";\n\t\t}\n\t}\n\n\t/**\n\t * Convert to integer.\n\t * @param {KMatrixInputData} number \n\t * @returns {number}\n\t * @ignore\n\t */\n\tstatic _toInteger(number) {\n\t\treturn Math.trunc(Matrix._toDouble(number));\n\t}\n\n\t/**\n\t * Delete cache.\n\t */\n\t_clearCash() {\n\t\tif(this.string_cash) {\n\t\t\tdelete this.string_cash;\n\t\t}\n\t}\n\n\t/**\n\t * Deep copy.\n\t * @returns {Matrix}\n\t */\n\tclone() {\n\t\treturn new Matrix(this.matrix_array);\n\t}\n\n\t/**\n\t * Convert to string.\n\t * @returns {string} \n\t */\n\ttoString() {\n\t\tif(this.string_cash) {\n\t\t\treturn this.string_cash;\n\t\t}\n\t\tif(this.isScalar()) {\n\t\t\treturn this.scalar().toString();\n\t\t}\n\t\tconst exp_turn_point = 9;\n\t\tconst exp_turn_num = Math.pow(10, exp_turn_point);\n\t\tconst exp_point = 4;\n\t\tlet isDrawImag = false;\n\t\tlet isDrawExp = false;\n\t\tlet draw_decimal_position = 0;\n\n\t\t// 行列を確認して表示するための表示方法の確認する\n\t\tthis._each(\n\t\t\tfunction(num, row, col) {\n\t\t\t\tif(!num.isReal()) {\n\t\t\t\t\tisDrawImag = true;\n\t\t\t\t}\n\t\t\t\tif(Number.isFinite(num.real())) {\n\t\t\t\t\tif(Math.abs(num.real()) >= exp_turn_num) {\n\t\t\t\t\t\tisDrawExp = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(Number.isFinite(num.imag())) {\n\t\t\t\t\tif(Math.abs(num.imag()) >= exp_turn_num) {\n\t\t\t\t\t\tisDrawExp = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdraw_decimal_position = Math.max(draw_decimal_position, num.getDecimalPosition());\n\t\t\t}\n\t\t);\n\n\t\tif(draw_decimal_position > 0) {\n\t\t\tdraw_decimal_position = exp_point;\n\t\t}\n\n\t\t// 文字列データを作成とともに、最大の長さを記録する\n\t\tlet str_max = 0;\n\n\t\t/**\n\t\t * @type {Array<{re_sign : string, re_str : string, im_sign : string, im_str : string}>}\n\t\t */\n\t\tconst draw_buff = [];\n\n\t\t// 数値データを文字列にする関数（eの桁がある場合は中身は3桁にする）\n\t\t/**\n\t\t * @type {function(number): string }\n\t\t */\n\t\tconst toStrFromFloat = function(number) {\n\t\t\tconst str = !isDrawExp ? number.toFixed(draw_decimal_position) : number.toExponential(exp_point);\n\t\t\tif(/inf/i.test(str)) {\n\t\t\t\tif(number === Number.POSITIVE_INFINITY) {\n\t\t\t\t\treturn \"Inf\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn \"-Inf\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(/nan/i.test(str)) {\n\t\t\t\treturn \"NaN\";\n\t\t\t}\n\t\t\telse if(!isDrawExp) {\n\t\t\t\treturn str;\n\t\t\t}\n\t\t\tconst split = str.split(\"e\");\n\t\t\tlet exp_text = split[1];\n\t\t\tif(exp_text.length === 2) {\n\t\t\t\texp_text = exp_text.substr(0, 1) + \"00\" + exp_text.substr(1);\n\t\t\t}\n\t\t\telse if(exp_text.length === 3) {\n\t\t\t\texp_text = exp_text.substr(0, 1) + \"0\" + exp_text.substr(1);\n\t\t\t}\n\t\t\treturn split[0] + \"e\" + exp_text;\n\t\t};\n\t\tthis._each(\n\t\t\tfunction(num) {\n\t\t\t\tconst data = {};\n\t\t\t\tlet real = num.real();\n\t\t\t\tdata.re_sign = real < 0 ? \"-\" : \" \";\n\t\t\t\treal = Math.abs(real);\n\t\t\t\tdata.re_str = toStrFromFloat(real);\n\t\t\t\tstr_max = Math.max(str_max, data.re_str.length + 1);\n\t\t\t\tif(isDrawImag) {\n\t\t\t\t\tlet imag = num.imag();\n\t\t\t\t\tdata.im_sign = imag < 0 ? \"-\" : \"+\";\n\t\t\t\t\timag = Math.abs(imag);\n\t\t\t\t\tdata.im_str = toStrFromFloat(imag);\n\t\t\t\t\tstr_max = Math.max(str_max, data.im_str.length + 1);\n\t\t\t\t}\n\t\t\t\tdraw_buff.push(data);\n\t\t\t}\n\t\t);\n\n\t\t// 右寄せ用関数\n\t\t/**\n\t\t * @type {function(string, number): string }\n\t\t */\n\t\tconst right = function(text, length) {\n\t\t\tconst space = \"                                        \";\n\t\t\treturn space.substr(0, length - text.length) + text;\n\t\t};\n\n\t\t// 出力用文字列を作成する\n\t\t/**\n\t\t * @type {Array<string>}\n\t\t */\n\t\tconst output = [];\n\t\tconst that = this;\n\t\tthis._each(\n\t\t\tfunction(num, row, col) {\n\t\t\t\tconst data = draw_buff.shift();\n\t\t\t\tlet text = right(data.re_sign + data.re_str, str_max);\n\t\t\t\tif(isDrawImag) {\n\t\t\t\t\ttext += \" \" + data.im_sign + right(data.im_str, str_max) + \"i\";\n\t\t\t\t}\n\t\t\t\toutput.push(text);\n\t\t\t\toutput.push((col < that.column_length - 1) ? \" \" : \"\\n\");\n\t\t\t}\n\t\t);\n\n\t\tthis.string_cash = output.join(\"\");\n\n\t\treturn this.string_cash;\n\t}\n\n\t/**\n\t * Convert to string in one line.\n\t * @returns {string} \n\t */\n\ttoOneLineString() {\n\t\tif(this.isScalar()) {\n\t\t\treturn this.scalar().toString();\n\t\t}\n\t\tlet output = \"[ \";\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\toutput += this.matrix_array[row][col].toString();\n\t\t\t\tif(col < this.column_length - 1) {\n\t\t\t\t\toutput += \", \";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(row < this.row_length - 1) {\n\t\t\t\t\t\toutput += \"; \";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\toutput += \" ]\";\n\t\treturn output;\n\t}\n\n\t/**\n\t * Convert to JSON.\n\t * @returns {string} \n\t */\n\ttoJSON() {\n\t\tif(this.isScalar()) {\n\t\t\treturn this.scalar().toJSON();\n\t\t}\n\t\tlet output = \"[\";\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\toutput += this.matrix_array[row][col].toJSON();\n\t\t\t\tif(col < this.column_length - 1) {\n\t\t\t\t\toutput += \",\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(row < this.row_length - 1) {\n\t\t\t\t\t\toutput += \";\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\toutput += \"]\";\n\t\treturn output;\n\t}\n\n\t/**\n\t * Equals.\n\t * @param {KMatrixInputData} number\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean} A === B\n\t */\n\tequals(number, tolerance) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif((M1.row_length !== M2.row_length) || (M1.column_length !== M2.column_length)) {\n\t\t\treturn false;\n\t\t}\n\t\tif((M1.row_length === 1) && (M1.column_length ===1)) {\n\t\t\treturn M1.scalar().equals(M2.scalar(), tolerance);\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tif(!x1[row][col].equals(x2[row][col], tolerance)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Array of real parts of elements in matrix.\n\t * @returns {Array<Array<number>>}\n\t */\n\tgetNumberMatrixArray() {\n\t\tconst y = new Array(this.row_length);\n\t\tfor(let i = 0; i < this.row_length; i++) {\n\t\t\ty[i] = new Array(this.column_length);\n\t\t\tfor(let j = 0; j < this.column_length; j++) {\n\t\t\t\ty[i][j] = this.matrix_array[i][j].real();\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\t\n\t/**\n\t * Complex array of complex numbers of each element of the matrix.\n\t * @returns {Array<Array<Complex>>}\n\t */\n\tgetComplexMatrixArray() {\n\t\tconst y = new Array(this.row_length);\n\t\tfor(let i = 0; i < this.row_length; i++) {\n\t\t\ty[i] = new Array(this.column_length);\n\t\t\tfor(let j = 0; j < this.column_length; j++) {\n\t\t\t\ty[i][j] = this.matrix_array[i][j];\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\t\n\t/**\n\t * Perform the same process on all elements in the matrix. (mutable)\n\t * @param {function(Complex, number, number): any } eachfunc - Function(num, row, col)\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @ignore\n\t */\n\t_each(eachfunc) {\n\t\tlet isclearcash = false;\n\t\t// 行優先ですべての値に対して指定した関数を実行する。内容を書き換える可能性もある\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tconst ret = eachfunc(this.matrix_array[row][col], row, col);\n\t\t\t\tif(ret === undefined) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if(instanceofComplex(ret)) {\n\t\t\t\t\tthis.matrix_array[row][col] = ret;\n\t\t\t\t}\n\t\t\t\telse if(instanceofMatrix(ret)) {\n\t\t\t\t\tthis.matrix_array[row][col] = ret.scalar();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.matrix_array[row][col] = new Complex(ret);\n\t\t\t\t}\n\t\t\t\tisclearcash = true;\n\t\t\t}\n\t\t}\n\t\tif(isclearcash) {\n\t\t\tthis._clearCash();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Perform the same process on all elements in the matrix.\n\t * @param {function(Complex, number, number): ?Object } eachfunc - Function(num, row, col)\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tcloneMatrixDoEachCalculation(eachfunc) {\n\t\treturn this.clone()._each(eachfunc);\n\t}\n\n\t/**\n\t * Create Matrix with specified initialization for each element in matrix.\n\t * @param {function(number, number): ?Object } eachfunc - Function(row, col)\n\t * @param {KMatrixInputData} dimension - Number of dimensions or rows.\n\t * @param {KMatrixInputData} [column_length=dimension] - Number of columns.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tstatic createMatrixDoEachCalculation(eachfunc, dimension, column_length) {\n\t\tif((arguments.length === 0) || (arguments.length > 3)) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\tconst y_row_length = Matrix._toInteger(dimension);\n\t\tconst y_column_length = column_length ? Matrix._toInteger(column_length) : y_row_length;\n\t\tconst y = new Array(y_row_length);\n\t\tfor(let row = 0; row < y_row_length; row++) {\n\t\t\ty[row] = new Array(y_column_length);\n\t\t\tfor(let col = 0; col < y_column_length; col++) {\n\t\t\t\tconst ret = eachfunc(row, col);\n\t\t\t\tif(ret === undefined) {\n\t\t\t\t\ty[row][col] = Complex.ZERO;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ty[row][col] = Matrix._toComplex(ret);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * Treat the columns of the matrix as vectors and execute the same process.\n\t * - If the matrix is a row vector, it performs the same processing for the row vector.\n\t * @param {function(Array<Complex>): Array<Complex>} array_function - Function(array)\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\teachVectorAuto(array_function) {\n\t\tif(this.isRow()) {\n\t\t\t// 1行であれば、その1行に対して処理を行う\n\t\t\tconst row_array = new Array(this.row_length);\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\trow_array[col] = this.matrix_array[0][col];\n\t\t\t}\n\t\t\treturn new Matrix(array_function(row_array));\n\t\t}\n\t\telse {\n\t\t\tconst y = Matrix.ZERO;\n\t\t\ty._resize(1, this.column_length);\n\t\t\t// 1列、行列であれば、列ごとに処理を行う\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tconst col_array = new Array(this.row_length);\n\t\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\t\tcol_array[row] = this.matrix_array[row][col];\n\t\t\t\t}\n\t\t\t\tconst col_output = array_function(col_array);\n\t\t\t\ty._resize(Math.max(y.row_length, col_output.length), y.column_length);\n\t\t\t\tfor(let row = 0; row < col_output.length; row++) {\n\t\t\t\t\ty.matrix_array[row][col] = col_output[row];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t}\n\n\t/**\n\t * Treat the rows and columns of the matrix as vectors and perform the same processing.\n\t * 1. First run the same process for the row.\n\t * 2. Finally perform the same processing for the column.\n\t * @param {function(Array<Complex>): Array<Complex>} array_function - Function(array)\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\teachVectorBoth(array_function) {\n\t\tconst y1 = Matrix.ZERO;\n\t\t// 行ごとに処理を行う\n\t\ty1._resize(this.row_length, 1);\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tconst row_array = new Array(this.column_length);\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\trow_array[col] = this.matrix_array[row][col];\n\t\t\t}\n\t\t\tconst row_output = array_function(row_array);\n\t\t\ty1._resize(y1.row_length, Math.max(y1.column_length, row_output.length));\n\t\t\tfor(let col = 0; col < row_output.length; col++) {\n\t\t\t\ty1.matrix_array[row][col] = row_output[col];\n\t\t\t}\n\t\t}\n\t\tconst y2 = Matrix.ZERO;\n\t\t// 列ごとに処理を行う\n\t\ty2._resize(1, y1.column_length);\n\t\tfor(let col = 0; col < y1.column_length; col++) {\n\t\t\tconst col_array = new Array(y1.row_length);\n\t\t\tfor(let row = 0; row < y1.row_length; row++) {\n\t\t\t\tcol_array[row] = y1.matrix_array[row][col];\n\t\t\t}\n\t\t\tconst col_output = array_function(col_array);\n\t\t\ty2._resize(Math.max(y2.row_length, col_output.length), y2.column_length);\n\t\t\tfor(let row = 0; row < col_output.length; row++) {\n\t\t\t\ty2.matrix_array[row][col] = col_output[row];\n\t\t\t}\n\t\t}\n\t\treturn y2;\n\t}\n\n\t/**\n\t * Treat the rows of the matrix as vectors and execute the same process.\n\t * @param {function(Array<Complex>): Array<Complex>} array_function - Function(array)\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\teachVectorRow(array_function) {\n\t\tconst y = Matrix.ZERO;\n\t\t// 行ごとに処理を行う\n\t\ty._resize(this.row_length, 1);\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tconst row_array = new Array(this.column_length);\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\trow_array[col] = this.matrix_array[row][col];\n\t\t\t}\n\t\t\tconst row_output = array_function(row_array);\n\t\t\ty._resize(y.row_length, Math.max(y.column_length, row_output.length));\n\t\t\tfor(let col = 0; col < row_output.length; col++) {\n\t\t\t\ty.matrix_array[row][col] = row_output[col];\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * Treat the columns of the matrix as vectors and execute the same process.\n\t * @param {function(Array<Complex>): Array<Complex>} array_function - Function(array)\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\teachVectorColumn(array_function) {\n\t\tconst y = Matrix.ZERO;\n\t\t// 列ごとに処理を行う\n\t\ty._resize(1, this.column_length);\n\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\tconst col_array = new Array(this.row_length);\n\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\tcol_array[row] = this.matrix_array[row][col];\n\t\t\t}\n\t\t\tconst col_output = array_function(col_array);\n\t\t\ty._resize(Math.max(y.row_length, col_output.length), y.column_length);\n\t\t\tfor(let row = 0; row < col_output.length; row++) {\n\t\t\t\ty.matrix_array[row][col] = col_output[row];\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * Treat the rows and columns of the matrix as vectors and perform the same processing.\n\t * The arguments of the method can switch the direction of the matrix to be executed.\n\t * @param {function(Array<Complex>): Array<Complex>} array_function - Function(array)\n\t * @param {string|number} [dimension=\"auto\"] - 0/\"auto\", 1/\"row\", 2/\"column\", 3/\"both\"\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\teachVector(array_function, dimension) {\n\t\tlet target = dimension !== undefined ? dimension : \"auto\";\n\t\tif(typeof target === \"string\") {\n\t\t\ttarget = target.toLocaleLowerCase();\n\t\t}\n\t\telse if(typeof target !== \"number\") {\n\t\t\ttarget = Matrix._toInteger(target);\n\t\t}\n\t\tif((target === \"auto\") || (target === 0)) {\n\t\t\treturn this.eachVectorAuto(array_function);\n\t\t}\n\t\telse if((target === \"row\") || (target === 1)) {\n\t\t\treturn this.eachVectorRow(array_function);\n\t\t}\n\t\telse if((target === \"column\") || (target === 2)) {\n\t\t\treturn this.eachVectorColumn(array_function);\n\t\t}\n\t\telse if((target === \"both\") || (target === 3)) {\n\t\t\treturn this.eachVectorBoth(array_function);\n\t\t}\n\t\telse {\n\t\t\tthrow \"eachVector argument \" + dimension;\n\t\t}\n\t}\n\n\t/**\n\t * Extract the specified part of the matrix.\n\t * @param {KMatrixInputData} row - A vector containing the row numbers to extract from this matrix. If you specify \":\" select all rows.\n\t * @param {KMatrixInputData} col - A vector containing the column numbers to extract from this matrix. If you specify \":\" select all columns.\n\t * @param {boolean} [isUpOffset=false] - Set offset of matrix position to 1 with true.\n\t * @returns {Matrix} \n\t */\n\tgetMatrix(row, col, isUpOffset=false) {\n\t\tconst geta = isUpOffset ? 1 : 0 ;\n\t\tconst row_array = MatrixTool.toPositionArrayFromObject(row, this.row_length, geta);\n\t\tconst col_array = MatrixTool.toPositionArrayFromObject(col, this.column_length, geta);\n\t\tconst x = this.matrix_array;\n\t\tconst y = new Array(row_array.length);\n\t\tfor(let row = 0; row < row_array.length; row++) {\n\t\t\tconst y_row = new Array(col_array.length);\n\t\t\tfor(let col = 0; col < col_array.length; col++) {\n\t\t\t\ty_row[col] = x[row_array[row] - geta][col_array[col] - geta];\n\t\t\t}\n\t\t\ty[row] = y_row;\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * Change specified element in matrix.\n\t * @param {KMatrixInputData} row - A vector containing the row numbers to replace in this matrix. If you specify \":\" select all rows.\n\t * @param {KMatrixInputData} col - A vector containing the column numbers to replace in this matrix. If you specify \":\" select all columns.\n\t * @param {KMatrixInputData} replace - Matrix to be replaced.\n\t * @param {boolean} [isUpOffset=false] - Set offset of matrix position to 1 with true.\n\t * @returns {Matrix} \n\t */\n\tsetMatrix(row, col, replace, isUpOffset=false) {\n\t\tconst geta = isUpOffset ? 1 : 0 ;\n\t\tconst row_array = MatrixTool.toPositionArrayFromObject(row, this.row_length, geta);\n\t\tconst col_array = MatrixTool.toPositionArrayFromObject(col, this.column_length, geta);\n\t\tconst Y = new Matrix(this);\n\t\tconst y = Y.matrix_array;\n\t\tconst X = Matrix._toMatrix(replace);\n\t\tconst x = X.matrix_array;\n\t\tfor(let row = 0; row < row_array.length; row++) {\n\t\t\tfor(let col = 0; col < col_array.length; col++) {\n\t\t\t\ty[row_array[row] - geta][col_array[col] - geta] = x[row % X.row_length][col % X.column_length];\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * Returns the specified element in the matrix.\n\t * Each element of the matrix is composed of complex numbers.\n\t * @param {KMatrixInputData} row_or_pos - If this is a matrix, the row number. If this is a vector, the address.\n\t * @param {KMatrixInputData} [col] - If this is a matrix, the column number.\n\t * @returns {Complex} \n\t */\n\tgetComplex(row_or_pos, col) {\n\t\tlet row_or_pos_scalar = null;\n\t\tlet col_scalar = null;\n\t\tif(arguments.length === 1) {\n\t\t\trow_or_pos_scalar = Matrix._toInteger(row_or_pos);\n\t\t}\n\t\telse if(arguments.length === 2) {\n\t\t\trow_or_pos_scalar = Matrix._toInteger(row_or_pos);\n\t\t\tcol_scalar = Matrix._toInteger(col);\n\t\t}\n\t\tif(this.isRow()) {\n\t\t\treturn this.matrix_array[0][row_or_pos_scalar];\n\t\t}\n\t\telse if(this.isColumn()) {\n\t\t\treturn this.matrix_array[row_or_pos_scalar][0];\n\t\t}\n\t\telse {\n\t\t\treturn this.matrix_array[row_or_pos_scalar][col_scalar];\n\t\t}\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 他の型に変換用\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t\n\t/**\n\t * Boolean value of the first element of the matrix.\n\t * @returns {boolean}\n\t */\n\tbooleanValue() {\n\t\treturn this.matrix_array[0][0].booleanValue();\n\t}\n\n\t/**\n\t * Integer value of the first element of the matrix.\n\t * @returns {number}\n\t */\n\tintValue() {\n\t\treturn this.matrix_array[0][0].intValue();\n\t}\n\n\t/**\n\t * Real value of first element of the matrix.\n\t * @returns {number}\n\t */\n\tdoubleValue() {\n\t\treturn this.matrix_array[0][0].doubleValue();\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// konpeito で扱う数値型へ変換\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * return Complex.\n\t * @returns {Complex}\n\t */\n\ttoComplex() {\n\t\treturn this.scalar();\n\t}\n\t\n\t/**\n\t * return Matrix.\n\t * @returns {Matrix}\n\t */\n\ttoMatrix() {\n\t\treturn this;\n\t}\n\t\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 行列の基本操作、基本情報の取得\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t\n\t/**\n\t * First element of this matrix.\n\t * @returns {Complex}\n\t */\n\tscalar() {\n\t\treturn this.matrix_array[0][0];\n\t}\n\n\t/**\n\t * Maximum size of rows or columns in the matrix.\n\t * @returns {number}\n\t */\n\tlength() {\n\t\treturn this.row_length > this.column_length ? this.row_length : this.column_length;\n\t}\n\n\t/**\n\t * Number of columns in the matrix.\n\t * @returns {number}\n\t */\n\twidth() {\n\t\treturn this.column_length;\n\t}\n\n\t/**\n\t * Number of rows in matrix.\n\t * @returns {number}\n\t */\n\theight() {\n\t\treturn this.row_length;\n\t}\n\n\t/**\n\t * 1-norm.\n\t * @returns {number}\n\t */\n\tnorm1() {\n\t\treturn LinearAlgebra.norm(this, 1);\n\t}\n\t\n\t/**\n\t * 2-norm.\n\t * @returns {number}\n\t */\n\tnorm2() {\n\t\treturn LinearAlgebra.norm(this, 2);\n\t}\n\n\t/**\n\t * p-norm.\n\t * @param {KMatrixInputData} [p=2]\n\t * @returns {number}\n\t */\n\tnorm(p) {\n\t\treturn LinearAlgebra.norm(this, p);\n\t}\n\n\t/**\n\t * Condition number of the matrix\n\t * @param {KMatrixInputData} [p=2]\n\t * @returns {number}\n\t */\n\tcond(p) {\n\t\treturn LinearAlgebra.cond(this, p);\n\t}\n\n\t/**\n\t * Inverse condition number.\n\t * @returns {number}\n\t */\n\trcond() {\n\t\treturn LinearAlgebra.rcond(this);\n\t}\n\n\t/**\n\t * Rank.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {number} rank(A)\n\t */\n\trank(tolerance) {\n\t\treturn LinearAlgebra.rank(this, tolerance);\n\t}\n\n\t/**\n\t * Trace of a matrix.\n\t * Sum of diagonal elements.\n\t * @returns {Complex} trace(A)\n\t */\n\ttrace() {\n\t\treturn LinearAlgebra.trace(this);\n\t}\n\n\t/**\n\t * Determinant.\n\t * @returns {Matrix} |A|\n\t */\n\tdet() {\n\t\treturn LinearAlgebra.det(this);\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 行列の作成関係\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t\n\t/**\n\t * Creates a matrix composed of the specified number.\n\t * @param {KMatrixInputData} number - Value after initialization.\n\t * @param {KMatrixInputData} dimension - Number of dimensions or rows.\n\t * @param {KMatrixInputData} [column_length] - Number of columns.\n\t * @returns {Matrix}\n\t */\n\tstatic memset(number, dimension, column_length) {\n\t\tif((arguments.length === 0) || (arguments.length > 3)) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\tconst M = Matrix._toMatrix(number);\n\t\tif(!M.isScalar()) {\n\t\t\tconst x = M.matrix_array;\n\t\t\tconst x_row_length = M.row_length;\n\t\t\tconst x_column_length = M.column_length;\n\t\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\t\treturn x[row % x_row_length][col % x_column_length];\n\t\t\t}, dimension, column_length);\n\t\t}\n\t\telse {\n\t\t\tconst x = M.scalar();\n\t\t\treturn Matrix.createMatrixDoEachCalculation(function() {\n\t\t\t\treturn x;\n\t\t\t}, dimension, column_length);\n\t\t}\n\t}\n\n\t/**\n\t * Return identity matrix.\n\t * @param {KMatrixInputData} dimension - Number of dimensions or rows.\n\t * @param {KMatrixInputData} [column_length] - Number of columns.\n\t * @returns {Matrix}\n\t */\n\tstatic eye(dimension, column_length) {\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn row === col ? Complex.ONE : Complex.ZERO;\n\t\t}, dimension, column_length);\n\t}\n\t\n\t/**\n\t * Create zero matrix.\n\t * @param {KMatrixInputData} dimension - Number of dimensions or rows.\n\t * @param {KMatrixInputData} [column_length] - Number of columns.\n\t * @returns {Matrix}\n\t */\n\tstatic zeros(dimension, column_length) {\n\t\tif((arguments.length === 0) || (arguments.length > 2)) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\treturn Matrix.memset(Complex.ZERO, dimension, column_length);\n\t}\n\n\t/**\n\t * Create a matrix of all ones.\n\t * @param {KMatrixInputData} dimension - Number of dimensions or rows.\n\t * @param {KMatrixInputData} [column_length] - Number of columns.\n\t * @returns {Matrix}\n\t */\n\tstatic ones(dimension, column_length) {\n\t\tif((arguments.length === 0) || (arguments.length > 2)) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\treturn Matrix.memset(Complex.ONE, dimension, column_length);\n\t}\n\n\t/**\n\t * If matrix, generate diagonal column vector.\n\t * If vector, generate a matrix with diagonal elements.\n\t * @returns {Matrix} Matrix or vector created. See how to use the function.\n\t */\n\tdiag() {\n\t\tif(this.isVector()) {\n\t\t\t// 行列を作成\n\t\t\tconst M = this;\n\t\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\t\tif(row === col) {\n\t\t\t\t\treturn M.getComplex(row);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn Complex.ZERO;\n\t\t\t\t}\n\t\t\t}, this.length);\n\t\t}\n\t\telse {\n\t\t\t// 列ベクトルを作成\n\t\t\tconst len = Math.min(this.row_length, this.column_length);\n\t\t\tconst y = new Array(len);\n\t\t\tfor(let i = 0; i < len; i++) {\n\t\t\t\ty[i] = new Array(1);\n\t\t\t\ty[i][0] = this.matrix_array[i][i];\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 比較や判定\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * Return true if the matrix is scalar.\n\t * @returns {boolean}\n\t */\n\tisScalar() {\n\t\treturn this.row_length === 1 && this.column_length == 1;\n\t}\n\t\n\t/**\n\t * Return true if the matrix is row vector.\n\t * @returns {boolean}\n\t */\n\tisRow() {\n\t\treturn this.row_length === 1;\n\t}\n\t\n\t/**\n\t * Return true if the matrix is column vector.\n\t * @returns {boolean}\n\t */\n\tisColumn() {\n\t\treturn this.column_length === 1;\n\t}\n\n\t/**\n\t * Return true if the matrix is vector.\n\t * @returns {boolean}\n\t */\n\tisVector() {\n\t\treturn this.row_length === 1 || this.column_length === 1;\n\t}\n\n\t/**\n\t * Return true if the value is not scalar.\n\t * @returns {boolean}\n\t */\n\tisMatrix() {\n\t\treturn this.row_length !== 1 && this.column_length !== 1;\n\t}\n\n\t/**\n\t * Return true if the matrix is square matrix.\n\t * @returns {boolean}\n\t */\n\tisSquare() {\n\t\treturn this.row_length === this.column_length;\n\t}\n\n\t/**\n\t * Return true if the matrix is real matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisReal(tolerance) {\n\t\tlet is_real = true;\n\t\tthis._each(function(num){\n\t\t\tif(is_real && (num.isComplex(tolerance))) {\n\t\t\t\tis_real = false;\n\t\t\t}\n\t\t});\n\t\treturn is_real;\n\t}\n\n\t/**\n\t * Return true if the matrix is complex matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisComplex(tolerance) {\n\t\treturn !this.isReal(tolerance);\n\t}\n\n\t/**\n\t * Return true if the matrix is zero matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisZeros(tolerance) {\n\t\tlet is_zeros = true;\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tthis._each(function(num){\n\t\t\tif(is_zeros && (!num.isZero(tolerance_))) {\n\t\t\t\tis_zeros = false;\n\t\t\t}\n\t\t});\n\t\treturn is_zeros;\n\t}\n\n\t/**\n\t * Return true if the matrix is identity matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisIdentity(tolerance) {\n\t\tlet is_identity = true;\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tthis._each(function(num, row, col){\n\t\t\tif(is_identity) {\n\t\t\t\tif(row === col) {\n\t\t\t\t\tif(!num.isOne(tolerance_)) {\n\t\t\t\t\t\tis_identity = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(!num.isZero(tolerance_)) {\n\t\t\t\t\t\tis_identity = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn is_identity;\n\t}\n\n\t/**\n\t * Return true if the matrix is diagonal matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisDiagonal(tolerance) {\n\t\tlet is_diagonal = true;\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tthis._each(function(num, row, col){\n\t\t\tif(is_diagonal && (row !== col) && (!num.isZero(tolerance_))) {\n\t\t\t\tis_diagonal = false;\n\t\t\t}\n\t\t});\n\t\treturn is_diagonal;\n\t}\n\t\n\t/**\n\t * Return true if the matrix is tridiagonal matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisTridiagonal(tolerance) {\n\t\tlet is_tridiagonal = true;\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tthis._each(function(num, row, col){\n\t\t\tif(is_tridiagonal && (Math.abs(row - col) > 1) && (!num.isZero(tolerance_))) {\n\t\t\t\tis_tridiagonal = false;\n\t\t\t}\n\t\t});\n\t\treturn is_tridiagonal;\n\t}\n\n\t/**\n\t * Return true if the matrix is regular matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisRegular(tolerance) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\t// ランクが行列の次元と等しいかどうかで判定\n\t\t// det(M) != 0 でもよいが、時間がかかる可能性があるので\n\t\t// 誤差は自動で計算など本当はもうすこし良い方法を考える必要がある\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\treturn (this.rank(tolerance_) === this.row_length);\n\t}\n\n\t/**\n\t * Return true if the matrix is orthogonal matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisOrthogonal(tolerance) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\treturn (this.mul(this.transpose()).isIdentity(tolerance_));\n\t}\n\n\t/**\n\t * Return true if the matrix is unitary matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisUnitary(tolerance) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\treturn (this.mul(this.ctranspose()).isIdentity(tolerance_));\n\t}\n\n\t/**\n\t * Return true if the matrix is symmetric matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisSymmetric(tolerance) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = row + 1; col < this.column_length; col++) {\n\t\t\t\tif(!this.matrix_array[row][col].equals(this.matrix_array[col][row], tolerance_)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Return true if the matrix is hermitian matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisHermitian(tolerance) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = row; col < this.column_length; col++) {\n\t\t\t\tif(row === col) {\n\t\t\t\t\tif(!this.matrix_array[row][col].isReal(tolerance_)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(!this.matrix_array[row][col].equals(this.matrix_array[col][row].conj(), tolerance_)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Return true if the matrix is upper triangular matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisTriangleUpper(tolerance) {\n\t\tlet is_upper = true;\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tthis._each(function(num, row, col){\n\t\t\tif(is_upper && (row > col) && (!num.isZero(tolerance_))) {\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t});\n\t\treturn is_upper;\n\t}\n\n\t/**\n\t * Return true if the matrix is  lower triangular matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisTriangleLower(tolerance) {\n\t\tlet is_lower = true;\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tthis._each(function(num, row, col){\n\t\t\tif(is_lower && (row < col) && (!num.isZero(tolerance_))) {\n\t\t\t\tis_lower = false;\n\t\t\t}\n\t\t});\n\t\treturn is_lower;\n\t}\n\n\t/**\n\t * Return true if the matrix is permutation matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisPermutation(tolerance) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tconst is_row = new Array(this.row_length);\n\t\tconst is_col = new Array(this.column_length);\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tconst target = this.matrix_array[row][col];\n\t\t\t\tif(target.isOne(tolerance_)) {\n\t\t\t\t\tif(!is_row[row] && !is_col[col]) {\n\t\t\t\t\t\tis_row[row] = 1;\n\t\t\t\t\t\tis_col[col] = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(!target.isZero(tolerance_)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(let i = 0;i < this.row_length; i++) {\n\t\t\tif(is_row[i] === undefined || is_col[i] === undefined) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Number of rows and columns of matrix.\n\t * @param {?string|?number} [dimension] direction. 1/\"row\", 2/\"column\"\n\t * @returns {Matrix} [row_length, column_length]\n\t */\n\tsize(dimension) {\n\t\tif(dimension !== undefined) {\n\t\t\tlet target = dimension;\n\t\t\tif(typeof target === \"string\") {\n\t\t\t\ttarget = target.toLocaleLowerCase();\n\t\t\t}\n\t\t\telse if(typeof target !== \"number\") {\n\t\t\t\ttarget = Matrix._toInteger(target);\n\t\t\t}\n\t\t\tif((target === \"row\") || (target === 1)) {\n\t\t\t\treturn new Matrix(this.row_length);\n\t\t\t}\n\t\t\telse if((target === \"column\") || (target === 2)) {\n\t\t\t\treturn new Matrix(this.column_length);\n\t\t\t}\n\t\t}\n\t\t// 行列のサイズを取得\n\t\treturn new Matrix([[this.row_length, this.column_length]]);\n\t}\n\n\t/**\n\t * Compare values.\n\t * - Use `compareToMatrix` if you want to compare matrices.\n\t * @param {KMatrixInputData} number \n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {number} A > B ? 1 : (A === B ? 0 : -1)\n\t */\n\tcompareTo(number, tolerance) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\t// ※スカラー同士の場合は、実数を返す\n\t\tif(M1.isScalar() && M2.isScalar()) {\n\t\t\treturn M1.scalar().compareTo(M2.scalar(), tolerance);\n\t\t}\n\t\tthrow \"IllegalArgumentException\";\n\t}\n\n\t/**\n\t * Compare values.\n\t * - Use `compareTo` if you want to compare scalar values.\n\t * @param {KMatrixInputData} number \n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {Matrix} A > B ? 1 : (A === B ? 0 : -1)\n\t */\n\tcompareToMatrix(number, tolerance) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].compareTo(x2[row % M2.row_length][col % M2.column_length], tolerance);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 四則演算\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t\n\t/**\n\t * Add.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A + B\n\t */\n\tadd(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif((M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].add(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t/**\n\t * Subtract.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A - B\n\t */\n\tsub(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif((M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].sub(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t/**\n\t * Multiply.\n\t * - Use `dotmul` if you want to use `mul` for each element.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A * B\n\t */\n\tmul(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tif(M1.isScalar() && M2.isScalar()) {\n\t\t\treturn new Matrix(M1.scalar().mul(M2.scalar()));\n\t\t}\n\t\tif(M1.isScalar()) {\n\t\t\tconst y = new Array(M2.row_length);\n\t\t\tfor(let row = 0; row < M2.row_length; row++) {\n\t\t\t\ty[row] = new Array(M2.column_length);\n\t\t\t\tfor(let col = 0; col < M2.column_length; col++) {\n\t\t\t\t\ty[row][col] = M1.scalar().mul(x2[row][col]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\telse if(M2.isScalar()) {\n\t\t\tconst y = new Array(M1.row_length);\n\t\t\tfor(let row = 0; row < M1.row_length; row++) {\n\t\t\t\ty[row] = new Array(M1.column_length);\n\t\t\t\tfor(let col = 0; col < M1.column_length; col++) {\n\t\t\t\t\ty[row][col] = x1[row][col].mul(M2.scalar());\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\tif(M1.column_length !== M2.row_length) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\t{\n\t\t\tconst y = new Array(M1.row_length);\n\t\t\tfor(let row = 0; row < M1.row_length; row++) {\n\t\t\t\ty[row] = new Array(M2.column_length);\n\t\t\t\tfor(let col = 0; col < M2.column_length; col++) {\n\t\t\t\t\tlet sum = Complex.ZERO;\n\t\t\t\t\tfor(let i = 0; i < M1.column_length; i++) {\n\t\t\t\t\t\tsum = sum.add(x1[row][i].mul(x2[i][col]));\n\t\t\t\t\t}\n\t\t\t\t\ty[row][col] = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t}\n\n\t/**\n\t * Divide.\n\t * - Use `dotdiv` if you want to use `div` for each element.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A / B\n\t */\n\tdiv(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tconst x1 = M1.matrix_array;\n\t\tif(M1.isScalar() && M2.isScalar()) {\n\t\t\treturn new Matrix(M1.scalar().div(M2.scalar()));\n\t\t}\n\t\tif(M2.isScalar()) {\n\t\t\tconst y = new Array(M1.row_length);\n\t\t\tfor(let row = 0; row < M1.row_length; row++) {\n\t\t\t\ty[row] = new Array(M1.column_length);\n\t\t\t\tfor(let col = 0; col < M1.column_length; col++) {\n\t\t\t\t\ty[row][col] = x1[row][col].div(M2.scalar());\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\tif(M2.row_length === M2.column_length) {\n\t\t\tconst tolerance = 1.0e-10;\n\t\t\tconst det = M2.det().scalar().norm();\n\t\t\tif(det > tolerance) {\n\t\t\t\t// ランク落ちしていないので通常の逆行列を使用する\n\t\t\t\treturn this.mul(M2.inv());\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// ランク落ちしているので疑似逆行列を使用する\n\t\t\t\treturn this.mul(M2.pinv());\n\t\t\t}\n\t\t}\n\t\tif(M1.column_length !== M2.column_length) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tthrow \"warning\";\n\t}\n\n\t/**\n\t * Inverse matrix of this matrix.\n\t * - Use `dotinv` if you want to use `inv` for each element.\n\t * @returns {Matrix} A^-1\n\t */\n\tinv() {\n\t\treturn LinearAlgebra.inv(this);\n\t}\n\n\t/**\n\t * Multiplication for each element of matrix.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A .* B\n\t */\n\tdotmul(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif(!M1.isScalar() && !M2.isScalar() && (M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].mul(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t/**\n\t * Division for each element of matrix.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A ./ B\n\t */\n\tdotdiv(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif(!M1.isScalar() && !M2.isScalar() && (M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].div(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t/**\n\t * Inverse of each element of matrix.\n\t * @returns {Matrix} 1 ./ A\n\t */\n\tdotinv() {\n\t\tconst M1 = this;\n\t\tconst x1 = M1.matrix_array;\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row][col].inv();\n\t\t}, M1.row_length, M1.column_length);\n\t}\n\n\t/**\n\t * Multiplication for each element of matrix.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A .* B\n\t * @deprecated use the dotmul.\n\t */\n\tnmul(number) {\n\t\treturn this.dotmul(number);\n\t}\n\n\t/**\n\t * Division for each element of matrix.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A ./ B\n\t * @deprecated use the dotdiv.\n\t */\n\tndiv(number) {\n\t\treturn this.dotdiv(number);\n\t}\n\n\t/**\n\t * Inverse of each element of matrix.\n\t * @returns {Matrix} 1 ./ A\n\t * @deprecated use the dotinv.\n\t */\n\tninv() {\n\t\treturn this.dotinv();\n\t}\n\n\t/**\n\t * Power function for each element of the matrix.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A .^ B\n\t * @deprecated use the dotpow.\n\t */\n\tnpow(number) {\n\t\treturn this.dotpow(number);\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 余り\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * Modulo, positive remainder of division for each element of matrix.\n\t * - Result has same sign as the Dividend.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A .rem B\n\t */\n\trem(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif(!M1.isScalar() && !M2.isScalar() && (M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].rem(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t/**\n\t * Modulo, positive remainder of division for each element of matrix.\n\t * - Result has same sign as the Divisor.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A .mod B\n\t */\n\tmod(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif(!M1.isScalar() && !M2.isScalar() && (M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].mod(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\t\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// Complexのメソッドにある機能\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * Real part of each element.\n\t * @returns {Matrix} real(A)\n\t */\n\treal() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn new Complex(num.real());\n\t\t});\n\t}\n\t\n\t/**\n\t * Imaginary part of each element of the matrix.\n\t * @returns {Matrix} imag(A)\n\t */\n\timag() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn new Complex(num.imag());\n\t\t});\n\t}\n\n\t/**\n\t * The argument of each element of matrix.\n\t * @returns {Matrix} arg(A)\n\t */\n\targ() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn new Complex(num.arg());\n\t\t});\n\t}\n\n\t/**\n\t * The positive or negative signs of each element of the matrix.\n\t * - +1 if positive, -1 if negative, 0 if 0, norm if complex number.\n\t * @returns {Matrix}\n\t */\n\tsign() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn new Complex(num.sign());\n\t\t});\n\t}\n\n\t/**\n\t * Floor.\n\t * @returns {Matrix} floor(A)\n\t */\n\tfloor() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.floor();\n\t\t});\n\t}\n\n\t/**\n\t * Ceil.\n\t * @returns {Matrix} ceil(A)\n\t */\n\tceil() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.ceil();\n\t\t});\n\t}\n\n\t/**\n\t * Rounding to the nearest integer.\n\t * @returns {Matrix} round(A)\n\t */\n\tround() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.round();\n\t\t});\n\t}\n\n\t/**\n\t * To integer rounded down to the nearest.\n\t * @returns {Matrix} fix(A), trunc(A)\n\t */\n\tfix() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.fix();\n\t\t});\n\t}\n\n\t/**\n\t * Fraction.\n\t * @returns {Matrix} fract(A)\n\t */\n\tfract() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.fract();\n\t\t});\n\t}\n\n\t/**\n\t * Absolute value.\n\t * @returns {Matrix} abs(A)\n\t */\n\tabs() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.abs();\n\t\t});\n\t}\n\n\t/**\n\t * Complex conjugate matrix.\n\t * @returns {Matrix} real(A) - imag(A)j\n\t */\n\tconj() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.conj();\n\t\t});\n\t}\n\n\t/**\n\t * this * -1\n\t * @returns {Matrix} -A\n\t */\n\tnegate() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.negate();\n\t\t});\n\t}\n\n\t// ----------------------\n\t// 指数\n\t// ----------------------\n\t\n\t/**\n\t * Power function.\n\t * - Unless the matrix is a scalar value, only integers are supported.\n\t * - Use `dotpow` if you want to use `pow` for each element. A real number can be specified.\n\t * @param {KMatrixInputData} number\n\t * @returns {Matrix} pow(A, B)\n\t */\n\tpow(number) {\n\t\tif(this.isScalar()) {\n\t\t\treturn new Matrix(this.scalar().pow(Matrix._toDouble(number)));\n\t\t}\n\t\telse {\n\t\t\tif(!this.isSquare()) {\n\t\t\t\tthrow \"not square \" + this;\n\t\t\t}\n\t\t\tlet n = Matrix._toInteger(number);\n\t\t\tif(n < 0) {\n\t\t\t\tthrow \"error negative number \" + n;\n\t\t\t}\n\t\t\tlet x, y;\n\t\t\tx = this.clone();\n\t\t\ty = Matrix.eye(this.length);\n\t\t\twhile(n !== 0) {\n\t\t\t\tif((n & 1) !== 0) {\n\t\t\t\t\ty = y.mul(x);\n\t\t\t\t}\n\t\t\t\tx = x.mul(x);\n\t\t\t\tn >>>= 1;\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t}\n\n\t/**\n\t * Power function for each element of the matrix.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A .^ B\n\t */\n\tdotpow(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif(!M1.isScalar() && !M2.isScalar() && (M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].pow(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t/**\n\t * Square.\n\t * - Unless the matrix is a scalar value, only integers are supported.\n\t * @returns {Matrix} pow(A, 2)\n\t */\n\tsquare() {\n\t\treturn this.pow(2);\n\t}\n\n\t/**\n\t * Square root.\n\t * @returns {Matrix} sqrt(A)\n\t */\n\tsqrt() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.sqrt();\n\t\t});\n\t}\n\n\t/**\n\t * Cube root.\n\t * @returns {Matrix} sqrt(A)\n\t */\n\tcbrt() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.cbrt();\n\t\t});\n\t}\n\n\t/**\n\t * Reciprocal square root.\n\t * @returns {Matrix} rsqrt(A)\n\t */\n\trsqrt() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.rsqrt();\n\t\t});\n\t}\n\n\t/**\n\t * Logarithmic function.\n\t * @returns {Matrix} log(A)\n\t */\n\tlog() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.log();\n\t\t});\n\t}\n\n\t/**\n\t * Exponential function.\n\t * @returns {Matrix} exp(A)\n\t */\n\texp() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.exp();\n\t\t});\n\t}\n\n\t/**\n\t * e^x - 1\n\t * @returns {Matrix} expm1(A)\n\t */\n\texpm1() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.expm1();\n\t\t});\n\t}\n\n\t/**\n\t * ln(1 + x)\n\t * @returns {Matrix} log1p(A)\n\t */\n\tlog1p() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.log1p();\n\t\t});\n\t}\n\t\n\t/**\n\t * log_2(x)\n\t * @returns {Matrix} log2(A)\n\t */\n\tlog2() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.log2();\n\t\t});\n\t}\n\n\t/**\n\t * log_10(x)\n\t * @returns {Matrix} log10(A)\n\t */\n\tlog10() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.log10();\n\t\t});\n\t}\n\n\t// ----------------------\n\t// 三角関数\n\t// ----------------------\n\t\n\t/**\n\t * Sine function.\n\t * @returns {Matrix} sin(A)\n\t */\n\tsin() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.sin();\n\t\t});\n\t}\n\n\t/**\n\t * Cosine function.\n\t * @returns {Matrix} cos(A)\n\t */\n\tcos() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.cos();\n\t\t});\n\t}\n\n\t/**\n\t * Tangent function.\n\t * @returns {Matrix} tan(A)\n\t */\n\ttan() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.tan();\n\t\t});\n\t}\n\t\n\t/**\n\t * Atan (arc tangent) function.\n\t * - Return the values of [-PI/2, PI/2].\n\t * @returns {Matrix} atan(A)\n\t */\n\tatan() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.atan();\n\t\t});\n\t}\n\n\t/**\n\t * Atan (arc tangent) function.\n\t * - Return the values of [-PI, PI].\n\t * - Supports only real numbers.\n\t * @param {KMatrixInputData} number - X\n\t * @returns {Matrix} atan2(Y, X)\n\t */\n\tatan2(number) {\n\t\tconst X = Matrix._toComplex(number);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.atan2(X);\n\t\t});\n\t}\n\n\t// ----------------------\n\t// 双曲線関数\n\t// ----------------------\n\t\n\t/**\n\t * Arc sine function.\n\t * @returns {Matrix} asin(A)\n\t */\n\tasin() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.asin();\n\t\t});\n\t}\n\n\t/**\n\t * Arc cosine function.\n\t * @returns {Matrix} acos(A)\n\t */\n\tacos() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.acos();\n\t\t});\n\t}\n\t\n\t/**\n\t * Hyperbolic sine function.\n\t * @returns {Matrix} sinh(A)\n\t */\n\tsinh() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.sinh();\n\t\t});\n\t}\n\n\t/**\n\t * Inverse hyperbolic sine function.\n\t * @returns {Matrix} asinh(A)\n\t */\n\tasinh() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.asinh();\n\t\t});\n\t}\n\n\t/**\n\t * Hyperbolic cosine function.\n\t * @returns {Matrix} cosh(A)\n\t */\n\tcosh() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.cosh();\n\t\t});\n\t}\n\n\t/**\n\t * Inverse hyperbolic cosine function.\n\t * @returns {Matrix} acosh(A)\n\t */\n\tacosh() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.acosh();\n\t\t});\n\t}\n\n\t/**\n\t * Hyperbolic tangent function.\n\t * @returns {Matrix} tanh(A)\n\t */\n\ttanh() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.tanh();\n\t\t});\n\t}\n\t\n\t/**\n\t * Inverse hyperbolic tangent function.\n\t * @returns {Matrix} atanh(A)\n\t */\n\tatanh() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.atanh();\n\t\t});\n\t}\n\n\t/**\n\t * Secant function.\n\t * @returns {Matrix} sec(A)\n\t */\n\tsec() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.sec();\n\t\t});\n\t}\n\n\t/**\n\t * Reverse secant function.\n\t * @returns {Matrix} asec(A)\n\t */\n\tasec() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.asec();\n\t\t});\n\t}\n\n\t/**\n\t * Hyperbolic secant function.\n\t * @returns {Matrix} sech(A)\n\t */\n\tsech() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.sech();\n\t\t});\n\t}\n\n\t/**\n\t * Inverse hyperbolic secant function.\n\t * @returns {Matrix} asech(A)\n\t */\n\tasech() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.asech();\n\t\t});\n\t}\n\n\t/**\n\t * Cotangent function.\n\t * @returns {Matrix} cot(A)\n\t */\n\tcot() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.cot();\n\t\t});\n\t}\n\n\t/**\n\t * Inverse cotangent function.\n\t * @returns {Matrix} acot(A)\n\t */\n\tacot() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.acot();\n\t\t});\n\t}\n\n\t/**\n\t * Hyperbolic cotangent function.\n\t * @returns {Matrix} coth(A)\n\t */\n\tcoth() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.coth();\n\t\t});\n\t}\n\n\t/**\n\t * Inverse hyperbolic cotangent function.\n\t * @returns {Matrix} acoth(A)\n\t */\n\tacoth() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.acoth();\n\t\t});\n\t}\n\n\t/**\n\t * Cosecant function.\n\t * @returns {Matrix} csc(A)\n\t */\n\tcsc() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.csc();\n\t\t});\n\t}\n\n\t/**\n\t * Inverse cosecant function.\n\t * @returns {Matrix} acsc(A)\n\t */\n\tacsc() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.acsc();\n\t\t});\n\t}\n\n\t/**\n\t * Hyperbolic cosecant function.\n\t * @returns {Matrix} csch(A)\n\t */\n\tcsch() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.csch();\n\t\t});\n\t}\n\n\t/**\n\t * Inverse hyperbolic cosecant function.\n\t * @returns {Matrix} acsch(A)\n\t */\n\tacsch() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.acsch();\n\t\t});\n\t}\n\n\t// ----------------------\n\t// 確率・統計系\n\t// ----------------------\n\t\n\t/**\n\t * Logit function.\n\t * @returns {Matrix} logit(A)\n\t */\n\tlogit() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.logit();\n\t\t});\n\t}\n\n\t// ----------------------\n\t// 信号処理系\n\t// ----------------------\n\t\n\t/**\n\t * Normalized sinc function.\n\t * @returns {Matrix} sinc(A)\n\t */\n\tsinc() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.sinc();\n\t\t});\n\t}\n\t\n\t// ----------------------\n\t// 乱数\n\t// ----------------------\n\t\n\t/**\n\t * Generate a matrix composed of random values [0, 1) with uniform random numbers.\n\t * @param {KMatrixInputData} dimension - Number of dimensions or rows.\n\t * @param {KMatrixInputData} [column_length] - Number of columns.\n\t * @param {Random} [random] - Class for creating random numbers.\n\t * @returns {Matrix}\n\t */\n\tstatic rand(dimension, column_length, random) {\n\t\treturn Matrix.createMatrixDoEachCalculation(function() {\n\t\t\treturn Complex.rand(random);\n\t\t}, dimension, column_length);\n\t}\n\n\t/**\n\t * Generate a matrix composed of random values with normal distribution.\n\t * @param {KMatrixInputData} dimension - Number of dimensions or rows.\n\t * @param {KMatrixInputData} [column_length] - Number of columns.\n\t * @param {Random} [random] - Class for creating random numbers.\n\t * @returns {Matrix}\n\t */\n\tstatic randn(dimension, column_length, random) {\n\t\treturn Matrix.createMatrixDoEachCalculation(function() {\n\t\t\treturn Complex.randn(random);\n\t\t}, dimension, column_length);\n\t}\n\n\t// ----------------------\n\t// テスト系\n\t// ----------------------\n\t\n\t/**\n\t * Test if each element of the matrix is integer.\n\t * - 1 if true, 0 if false.\n\t * - Use `isInteger` if you want to test first element.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestInteger(tolerance) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isInteger(tolerance) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * Test if each element of the matrix is complex integer.\n\t * - 1 if true, 0 if false.\n\t * - Use `isComplexInteger` if you want to test first element.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestComplexInteger(tolerance) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isComplexInteger(tolerance) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * real(this) === 0\n\t * - 1 if true, 0 if false.\n\t * - Use `isZero` if you want to test first element.\n\t * - Use `isZeros` to check for a zero matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestZero(tolerance) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isZero(tolerance) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * real(this) === 1\n\t * - 1 if true, 0 if false.\n\t * - Use `isOne` if you want to test first element.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestOne(tolerance) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isOne(tolerance) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\t\n\t/**\n\t * Test if each element of the matrix is complex.\n\t * - 1 if true, 0 if false.\n\t * - Use `isComplex` to test whether a matrix contains complex numbers.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestComplex(tolerance) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isComplex(tolerance) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * Test if each element of the matrix is real.\n\t * - 1 if true, 0 if false.\n\t * - Use `isReal` to test for complex numbers in matrices.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestReal(tolerance) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isReal(tolerance) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * Test if each element of the matrix is NaN.\n\t * - 1 if true, 0 if false.\n\t * - Use `isNaN` if you want to test first element.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestNaN() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isNaN() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * real(this) > 0\n\t * - 1 if true, 0 if false.\n\t * - Use `isPositive` if you want to test first element.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestPositive() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isPositive() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * real(this) < 0\n\t * - 1 if true, 0 if false.\n\t * - Use `isNegative` if you want to test first element.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestNegative() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isNegative() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * real(this) >= 0\n\t * - 1 if true, 0 if false.\n\t * - Use `isNotNegative` if you want to test first element.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestNotNegative() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isNotNegative() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * Test if each element of the matrix is positive infinite.\n\t * - 1 if true, 0 if false.\n\t * - Use `isPositiveInfinity` if you want to test first element.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestPositiveInfinity() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isPositiveInfinity() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\t\n\t/**\n\t * Test if each element of the matrix is negative infinite.\n\t * - 1 if true, 0 if false.\n\t * - Use `isNegativeInfinity` if you want to test first element.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestNegativeInfinity() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isNegativeInfinity() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\t\n\t/**\n\t * Test if each element of the matrix is infinite.\n\t * - 1 if true, 0 if false.\n\t * - Use `isInfinite` if you want to test first element.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestInfinite() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isInfinite() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\t\n\t/**\n\t * Test if each element of the matrix is finite.\n\t * - 1 if true, 0 if false.\n\t * - Use `isFinite` if you want to test first element.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestFinite() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isFinite() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\n\t// ----------------------\n\t// 1要素のみのテスト\n\t// ----------------------\n\t\n\t/**\n\t * this === 0\n\t * - Use only the first element.\n\t * - Use `testZero` if you want to test the elements of a matrix.\n\t * - Use `isZeros` to check for a zero matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisZero(tolerance) {\n\t\treturn this.scalar().isZero(tolerance);\n\t}\n\t\n\t/**\n\t * this === 1\n\t * - Use only the first element.\n\t * - Use `testOne` if you want to test the elements of a matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisOne(tolerance) {\n\t\treturn this.scalar().isOne(tolerance);\n\t}\n\t\n\t/**\n\t * this > 0\n\t * - Use only the first element.\n\t * - Use `testPositive` if you want to test the elements of a matrix.\n\t * @returns {boolean}\n\t */\n\tisPositive() {\n\t\treturn this.scalar().isPositive();\n\t}\n\n\t/**\n\t * this < 0\n\t * - Use only the first element.\n\t * - Use `testNegative` if you want to test the elements of a matrix.\n\t * @returns {boolean}\n\t */\n\tisNegative() {\n\t\treturn this.scalar().isNegative();\n\t}\n\n\t/**\n\t * this >= 0\n\t * - Use only the first element.\n\t * - Use `testNotNegative` if you want to test the elements of a matrix.\n\t * @returns {boolean}\n\t */\n\tisNotNegative() {\n\t\treturn this.scalar().isNotNegative();\n\t}\n\t\n\t/**\n\t * this === NaN\n\t * - Use only the first element.\n\t * - Use `testNaN` if you want to test the elements of a matrix.\n\t * @returns {boolean} isNaN(A)\n\t */\n\tisNaN() {\n\t\treturn this.scalar().isNaN();\n\t}\n\t\n\t/**\n\t * this === Infinity\n\t * - Use only the first element.\n\t * - Use `testPositiveInfinity` if you want to test the elements of a matrix.\n\t * @returns {boolean} isPositiveInfinity(A)\n\t */\n\tisPositiveInfinity() {\n\t\treturn this.scalar().isPositiveInfinity();\n\t}\n\n\t/**\n\t * this === -Infinity\n\t * - Use only the first element.\n\t * - Use `testNegativeInfinity` if you want to test the elements of a matrix.\n\t * @returns {boolean} isNegativeInfinity(A)\n\t */\n\tisNegativeInfinity() {\n\t\treturn this.scalar().isNegativeInfinity();\n\t}\n\n\t/**\n\t * this === Infinity or -Infinity\n\t * - Use only the first element.\n\t * - Use `testInfinite` if you want to test the elements of a matrix.\n\t * @returns {boolean} isPositiveInfinity(A) || isNegativeInfinity(A)\n\t */\n\tisInfinite() {\n\t\treturn this.scalar().isInfinite();\n\t}\n\t\n\t/**\n\t * Return true if the value is finite number.\n\t * - Use only the first element.\n\t * - Use `testFinite` if you want to test the elements of a matrix.\n\t * @returns {boolean} !isNaN(A) && !isInfinite(A)\n\t */\n\tisFinite() {\n\t\treturn this.scalar().isFinite();\n\t}\n\n\t/**\n\t * Return true if the value is integer.\n\t * - Use only the first element.\n\t * - Use `testFinite` if you want to test the elements of a matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisInteger(tolerance) {\n\t\treturn this.scalar().isInteger(tolerance);\n\t}\n\n\t/**\n\t * Returns true if the vallue is complex integer (including normal integer).\n\t * - Use only the first element.\n\t * - Use `testFinite` if you want to test the elements of a matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean} real(A) === integer && imag(A) === integer\n\t */\n\tisComplexInteger(tolerance) {\n\t\treturn this.scalar().isComplexInteger(tolerance);\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 行列の計算でよく使用する処理。\n\t// メソッド内部の処理を記述する際に使用している。\n\t// 他から使用する場合は注意が必要である。\n\t// 前提条件があるメソッド、ミュータブルとなっている。\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * Rotate matrix 90 degrees clockwise. (mutable)\n\t * @param {KMatrixInputData} rot_90_count - Number of times rotated by 90 degrees.\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @private\n\t */\n\t_rot90(rot_90_count) {\n\t\tconst count = Matrix._toInteger(rot_90_count);\n\t\tlet rot_type = 1;\n\t\tif(arguments.length === 1) {\n\t\t\trot_type = ((count % 4) + 4) % 4;\n\t\t}\n\t\tif(rot_type === 0) {\n\t\t\treturn this;\n\t\t}\n\t\t// バックアップ\n\t\tconst x = new Array(this.row_length);\n\t\tfor(let i = 0; i < this.row_length; i++) {\n\t\t\tx[i] = new Array(this.column_length);\n\t\t\tfor(let j = 0; j < this.column_length; j++) {\n\t\t\t\tx[i][j] = this.matrix_array[i][j];\n\t\t\t}\n\t\t}\n\t\tconst y = this.matrix_array;\n\t\tif(rot_type === 1) {\n\t\t\t// 90度回転\n\t\t\ty.splice(this.column_length);\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tif(col < this.row_length) {\n\t\t\t\t\ty[col].splice(this.row_length);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ty[col] = new Array(this.row_length);\n\t\t\t\t}\n\t\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\t\ty[col][row] = x[this.row_length - row - 1][col];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(rot_type === 2) {\n\t\t\t// 180度回転\n\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\t\ty[row][col] = x[this.row_length - row - 1][this.column_length - col - 1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(rot_type === 3) {\n\t\t\t// 270度回転\n\t\t\ty.splice(this.column_length);\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tif(col < this.row_length) {\n\t\t\t\t\ty[col].splice(this.row_length);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ty[col] = new Array(this.row_length);\n\t\t\t\t}\n\t\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\t\ty[col][row] = x[row][this.column_length - col - 1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.row_length = y.length;\n\t\tthis.column_length = y[0].length;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Rotate matrix 90 degrees clockwise.\n\t * @param {KMatrixInputData} rot_90_count - Number of times rotated by 90 degrees.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\trot90(rot_90_count) {\n\t\treturn this.clone()._rot90(rot_90_count);\n\t}\n\n\t/**\n\t * Change the size of the matrix. (mutable)\n\t * Initialized with 0 when expanding.\n\t * @param {KMatrixInputData} new_row_length - Number of rows of matrix to resize.\n\t * @param {KMatrixInputData} new_column_length - Number of columns of matrix to resize.\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @ignore\n\t */\n\t_resize(new_row_length, new_column_length) {\n\t\tconst row_length\t= Matrix._toInteger(new_row_length);\n\t\tconst column_length\t= Matrix._toInteger(new_column_length);\n\t\tif((row_length === this.row_length) && (column_length === this.column_length)) {\n\t\t\treturn this;\n\t\t}\n\t\tif((row_length <= 0) || (column_length <= 0)) {\n\t\t\tthrow \"_resize\";\n\t\t}\n\t\tconst row_max = Math.max(this.row_length, row_length);\n\t\tconst col_max = Math.max(this.column_length, column_length);\n\t\tconst y = this.matrix_array;\n\t\t// 大きくなった行と列に対してゼロで埋める\n\t\tfor(let row = 0; row < row_max; row++) {\n\t\t\tif(row >= this.row_length) {\n\t\t\t\ty[row] = new Array(col_max);\n\t\t\t}\n\t\t\tfor(let col = 0; col < col_max; col++) {\n\t\t\t\tif((row >= this.row_length) || (col >= this.column_length)) {\n\t\t\t\t\ty[row][col] = Complex.ZERO;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// 小さくなった行と列を削除する\n\t\tif(this.row_length > row_length) {\n\t\t\ty.splice(row_length);\n\t\t}\n\t\tif(this.column_length > column_length) {\n\t\t\tfor(let row = 0; row < y.length; row++) {\n\t\t\t\ty[row].splice(column_length);\n\t\t\t}\n\t\t}\n\t\tthis.row_length = row_length;\n\t\tthis.column_length = column_length;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Change the size of the matrix.\n\t * Initialized with 0 when expanding.\n\t * @param {KMatrixInputData} row_length - Number of rows of matrix to resize.\n\t * @param {KMatrixInputData} column_length - Number of columns of matrix to resize.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tresize(row_length, column_length) {\n\t\treturn this.clone()._resize(row_length, column_length);\n\t}\n\n\t/**\n\t * Remove the row in this matrix. (mutable)\n\t * @param {KMatrixInputData} delete_row_index - Number of row of matrix to delete.\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @private\n\t */\n\t_deleteRow(delete_row_index) {\n\t\tconst row_index\t= Matrix._toInteger(delete_row_index);\n\t\tif((this.row_length === 1) || (this.row_length <= row_index)) {\n\t\t\tthrow \"_deleteRow\";\n\t\t}\n\t\tthis.matrix_array.splice(row_index, 1);\n\t\tthis.row_length--;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Remove the column in this matrix. (mutable)\n\t * @param {KMatrixInputData} delete_column_index - Number of column of matrix to delete.\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @private\n\t */\n\t_deleteColumn(delete_column_index) {\n\t\tconst column_index\t= Matrix._toInteger(delete_column_index);\n\t\tif((this.column_length === 1) || (this.column_length <= column_index)) {\n\t\t\tthrow \"_deleteColumn\";\n\t\t}\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tthis.matrix_array[row].splice(column_index, 1);\n\t\t}\n\t\tthis.column_length--;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove the row in this matrix.\n\t * @param {KMatrixInputData} delete_row_index - Number of row of matrix to delete.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tdeleteRow(delete_row_index) {\n\t\treturn this.clone()._deleteRow(delete_row_index);\n\t}\n\n\t/**\n\t * Remove the column in this matrix.\n\t * @param {KMatrixInputData} delete_column_index - Number of column of matrix to delete.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tdeleteColumn(delete_column_index) {\n\t\treturn this.clone()._deleteColumn(delete_column_index);\n\t}\n\n\t/**\n\t * Swap rows in the matrix. (mutable)\n\t * @param {KMatrixInputData} exchange_row_index1 - Number 1 of row of matrix to exchange.\n\t * @param {KMatrixInputData} exchange_row_index2 - Number 2 of row of matrix to exchange.\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @ignore\n\t */\n\t_exchangeRow(exchange_row_index1, exchange_row_index2) {\n\t\tconst row_index1\t= Matrix._toInteger(exchange_row_index1);\n\t\tconst row_index2\t= Matrix._toInteger(exchange_row_index2);\n\t\tif((this.row_length === 1) || (this.row_length <= row_index1) || (this.row_length <= row_index2)) {\n\t\t\tthrow \"_exchangeRow\";\n\t\t}\n\t\tif(row_index1 === row_index2) {\n\t\t\treturn this;\n\t\t}\n\t\tconst swap = this.matrix_array[row_index1];\n\t\tthis.matrix_array[row_index1] = this.matrix_array[row_index2];\n\t\tthis.matrix_array[row_index2] = swap;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Swap columns in the matrix. (mutable)\n\t * @param {KMatrixInputData} exchange_column_index1 - Number 1 of column of matrix to exchange.\n\t * @param {KMatrixInputData} exchange_column_index2 - Number 2 of column of matrix to exchange.\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @ignore\n\t */\n\t_exchangeColumn(exchange_column_index1, exchange_column_index2) {\n\t\tconst column_index1\t= Matrix._toInteger(exchange_column_index1);\n\t\tconst column_index2\t= Matrix._toInteger(exchange_column_index2);\n\t\tif((this.column_length === 1) || (this.column_length <= column_index1) || (this.column_length <= column_index2)) {\n\t\t\tthrow \"_exchangeColumn\";\n\t\t}\n\t\tif(column_index1 === column_index2) {\n\t\t\treturn this;\n\t\t}\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tconst swap = this.matrix_array[row][column_index1];\n\t\t\tthis.matrix_array[row][column_index1] = this.matrix_array[row][column_index2];\n\t\t\tthis.matrix_array[row][column_index2] = swap;\n\t\t}\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Swap rows in the matrix.\n\t * @param {KMatrixInputData} exchange_row_index1 - Number 1 of row of matrix to exchange.\n\t * @param {KMatrixInputData} exchange_row_index2 - Number 2 of row of matrix to exchange.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\texchangeRow(exchange_row_index1, exchange_row_index2) {\n\t\treturn this.clone()._exchangeRow(exchange_row_index1, exchange_row_index2);\n\t}\n\n\t/**\n\t * Swap columns in the matrix.\n\t * @param {KMatrixInputData} exchange_column_index1 - Number 1 of column of matrix to exchange.\n\t * @param {KMatrixInputData} exchange_column_index2 - Number 2 of column of matrix to exchange.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\texchangeColumn(exchange_column_index1, exchange_column_index2) {\n\t\treturn this.clone()._exchangeColumn(exchange_column_index1, exchange_column_index2);\n\t}\n\n\t/**\n\t * Combine matrix to the right of this matrix. (mutable)\n\t * @param {KMatrixInputData} left_matrix - Matrix to combine.\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @ignore\n\t */\n\t_concatRight(left_matrix) {\n\t\tconst M = Matrix._toMatrix(left_matrix);\n\t\tif(this.row_length != M.row_length) {\n\t\t\tthrow \"_concatRight\";\n\t\t}\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = 0; col < M.column_length; col++) {\n\t\t\t\tthis.matrix_array[row].push(M.matrix_array[row][col]);\n\t\t\t}\n\t\t}\n\t\tthis.column_length += M.column_length;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Combine matrix to the bottom of this matrix. (mutable)\n\t * @param {KMatrixInputData} bottom_matrix - Matrix to combine.\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @private\n\t */\n\t_concatBottom(bottom_matrix) {\n\t\tconst M = Matrix._toMatrix(bottom_matrix);\n\t\tif(this.column_length != M.column_length) {\n\t\t\tthrow \"_concatBottom\";\n\t\t}\n\t\tfor(let row = 0; row < M.row_length; row++) {\n\t\t\tthis.matrix_array.push(M.matrix_array[row]);\n\t\t}\n\t\tthis.row_length += M.row_length;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Combine matrix to the right of this matrix.\n\t * @param {KMatrixInputData} left_matrix - Matrix to combine.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tconcatRight(left_matrix) {\n\t\treturn this.clone()._concatRight(left_matrix);\n\t}\n\n\t/**\n\t * Combine matrix to the bottom of this matrix.\n\t * @param {KMatrixInputData} bottom_matrix - Matrix to combine.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tconcatBottom(bottom_matrix) {\n\t\treturn this.clone()._concatBottom(bottom_matrix);\n\t}\n\n\t/**\n\t * Clip each element of matrix to specified range.\n\t * @param {KMatrixInputData} min \n\t * @param {KMatrixInputData} max \n\t * @returns {Matrix} min(max(x, min), max)\n\t */\n\tclip(min, max) {\n\t\tconst MIN = Matrix._toMatrix(min);\n\t\tconst MAX = Matrix._toMatrix(max);\n\t\tconst x_min = MIN.matrix_array;\n\t\tconst x_max = MAX.matrix_array;\n\t\treturn this.cloneMatrixDoEachCalculation(\n\t\t\tfunction(num, row, col) {\n\t\t\t\tconst d_min = x_min[row % MIN.row_length][col % MIN.column_length];\n\t\t\t\tconst d_max = x_max[row % MAX.row_length][col % MAX.column_length];\n\t\t\t\treturn num.clip(d_min, d_max);\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t * Create row vector with specified initial value, step value, end condition.\n\t * @param {KMatrixInputData} start_or_stop \n\t * @param {KMatrixInputData} [stop]\n\t * @param {KMatrixInputData} [step=1] \n\t * @returns {Matrix}\n\t */\n\tstatic arange(start_or_stop, stop, step) {\n\t\tconst from  = stop !== undefined ? Matrix._toComplex(start_or_stop) : Complex.ZERO;\n\t\tconst to    = stop !== undefined ? Matrix._toComplex(stop) : Matrix._toComplex(start_or_stop);\n\t\tconst delta = step !== undefined ? Matrix._toComplex(step) : Complex.ONE;\n\t\treturn new Matrix(MatrixTool.InterpolationCalculation(from, delta, to, false));\n\t}\n\n\t/**\n\t * Circular shift.\n\t * @param {KMatrixInputData} shift_size \n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tcircshift(shift_size, type) {\n\t\tconst shift = Matrix._toInteger(shift_size);\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tconst y = new Array(data.length);\n\t\t\tlet from = ((- shift % data.length) + data.length) % data.length;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\ty[i] = data[from++];\n\t\t\t\tif(from === data.length) {\n\t\t\t\t\tfrom = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn this.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Circular shift.\n\t * @param {KMatrixInputData} shift_size \n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\troll(shift_size, type) {\n\t\treturn this.circshift(shift_size, type);\n\t}\n\n\t/**\n\t * Change the shape of the matrix.\n\t * The number of elements in the matrix doesn't increase or decrease.\n\t * @param {KMatrixInputData} row_length - Number of rows of matrix to reshape.\n\t * @param {KMatrixInputData} column_length - Number of columns of matrix to reshape.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\treshape(row_length, column_length) {\n\t\tconst new_row_length = Matrix._toInteger(row_length);\n\t\tconst new_column_length = Matrix._toInteger(column_length);\n\t\tconst this_size = this.row_length * this.column_length;\n\t\tconst new_size = new_row_length * new_column_length;\n\t\tif(this_size !== new_size) {\n\t\t\tthrow \"reshape error. (this_size !== new_size)->(\" + this_size + \" !== \" + new_size + \")\";\n\t\t}\n\t\tconst m = this.matrix_array;\n\t\tlet m_col = 0;\n\t\tlet m_row = 0;\n\t\tconst y = new Array(new_row_length);\n\t\tfor(let row = 0; row < new_row_length; row++) {\n\t\t\ty[row] = new Array(new_column_length);\n\t\t\tfor(let col = 0; col < new_column_length; col++) {\n\t\t\t\ty[row][col] = m[m_row][m_col];\n\t\t\t\tm_col++;\n\t\t\t\tif(m_col === this.column_length) {\n\t\t\t\t\tm_col = 0;\n\t\t\t\t\tm_row++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * Flip this matrix left and right.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tfliplr() {\n\t\treturn this.flip({dimension : \"row\"});\n\t}\n\n\t/**\n\t * Flip this matrix up and down.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tflipud() {\n\t\treturn this.flip({dimension : \"column\"});\n\t}\n\n\t/**\n\t * Flip this matrix.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tflip(type) {\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tconst y = new Array(data.length);\n\t\t\tfor(let i = 0, j = data.length - 1; i < data.length; i++, j--) {\n\t\t\t\ty[i] = data[j];\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn this.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Index sort.\n\t * - Sorts by row when setting index by row vector to the argument.\n\t * - Sorts by column when setting index by column vector to the argument.\n\t * @param {KMatrixInputData} v - Vector with index. (See the description of this function)\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tindexsort(v) {\n\t\tconst V = Matrix._toMatrix(v);\n\t\tif(V.isMatrix()) {\n\t\t\tthrow \"argsort error. argsort is not vector. (\" + V.toOneLineString + \")\";\n\t\t}\n\t\tlet is_transpose = false;\n\t\tlet target_array = null;\n\t\tlet index_array = null;\n\t\tif(V.isRow()) {\n\t\t\tif(this.column_length !== V.column_length) {\n\t\t\t\tthrow \"argsort error. (this_size !== new_size)->(\" + this.column_length + \" !== \" + V.column_length + \")\";\n\t\t\t}\n\t\t\t// 列をインデックスソートする\n\t\t\tis_transpose = true;\n\t\t\ttarget_array = this.transpose().matrix_array;\n\t\t\tindex_array = V.matrix_array[0];\n\t\t}\n\t\tif(V.isColumn()) {\n\t\t\tif(this.row_length !== V.row_length) {\n\t\t\t\tthrow \"argsort error. (this_size !== new_size)->(\" + this.row_length + \" !== \" + V.row_length + \")\";\n\t\t\t}\n\t\t\t// 行をインデックスソートする\n\t\t\ttarget_array = this.matrix_array;\n\t\t\tindex_array = V.transpose().matrix_array[0];\n\t\t}\n\t\t// データを付け替える\n\t\tconst sort_data = new Array(index_array.length);\n\t\tfor(let i = 0; i < index_array.length; i++) {\n\t\t\tsort_data[i] = {\n\t\t\t\tindex : index_array[i],\n\t\t\t\tdata : target_array[i]\n\t\t\t};\n\t\t}\n\t\t/**\n\t\t * 比較関数を作成\n\t\t * @type {function({index : Complex}, {index : Complex}): number }\n\t\t */\n\t\tconst compare = function(a, b) {\n\t\t\treturn a.index.compareTo(b.index);\n\t\t};\n\t\t{\n\t\t\t/**\n\t\t\t * @type {Array<{index : Complex}>}\n\t\t\t */\n\t\t\tconst temp = [];\n\t\t\t/**\n\t\t\t * ソート関数（安定マージソート）\n\t\t\t * @param {Array<{index : Complex}>} elements \n\t\t\t * @param {number} first \n\t\t\t * @param {number} last \n\t\t\t * @param {function({index : Complex}, {index : Complex}): number} cmp_function \n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tconst sort = function(elements, first, last, cmp_function) { \n\t\t\t\tif(first < last) {\n\t\t\t\t\tconst middle = Math.floor((first + last) / 2);\n\t\t\t\t\tsort(elements, first, middle, cmp_function);\n\t\t\t\t\tsort(elements, middle + 1, last, cmp_function);\n\t\t\t\t\tlet p = 0, i, j, k;\n\t\t\t\t\tfor(i = first; i <= middle; i++) {\n\t\t\t\t\t\ttemp[p++] = elements[i];\n\t\t\t\t\t}\n\t\t\t\t\ti = middle + 1;\n\t\t\t\t\tj = 0;\n\t\t\t\t\tk = first;\n\t\t\t\t\twhile((i <= last) && (j < p)) {\n\t\t\t\t\t\tif(cmp_function(elements[i], temp[j]) >= 0) {\n\t\t\t\t\t\t\telements[k++] = temp[j++];\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\telements[k++] = elements[i++];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\twhile(j < p) {\n\t\t\t\t\t\telements[k++] = temp[j++];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t};\n\t\t\tsort(sort_data, 0, sort_data.length - 1, compare);\n\t\t}\n\t\t// 行列を組み立てなおす\n\t\tconst y = new Array(index_array.length);\n\t\tfor(let i = 0; i < index_array.length; i++) {\n\t\t\ty[i] = sort_data[i].data;\n\t\t}\n\t\t// 行列を作成する\n\t\tconst Y = new Matrix(y);\n\t\tif(!is_transpose) {\n\t\t\treturn Y;\n\t\t}\n\t\telse {\n\t\t\treturn Y.transpose();\n\t\t}\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 行列の一般計算\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * Transpose a matrix.\n\t * @returns {Matrix} A^T\n\t */\n\ttranspose() {\n\t\tconst y = new Array(this.column_length);\n\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\ty[col] = new Array(this.row_length);\n\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\ty[col][row] = this.matrix_array[row][col];\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * Hermitian transpose.\n\t * @returns {Matrix} A^T\n\t */\n\tctranspose() {\n\t\treturn this.transpose().conj();\n\t}\n\n\t/**\n\t * Hermitian transpose.\n\t * @returns {Matrix} A^T\n\t */\n\tT() {\n\t\treturn this.ctranspose();\n\t}\n\n\t/**\n\t * Inner product/Dot product.\n\t * @param {KMatrixInputData} number \n\t * @param {KMatrixInputData} [dimension=1] - Dimension of matrix used for calculation. (1 or 2)\n\t * @returns {Matrix} A・B\n\t */\n\tinner(number, dimension=1) {\n\t\treturn LinearAlgebra.inner(this, number, dimension);\n\t}\n\t\n\t/**\n\t * LUP decomposition.\n\t * - P'*L*U=A\n\t * - P is permutation matrix.\n\t * - L is lower triangular matrix.\n\t * - U is upper triangular matrix.\n\t * @returns {{P: Matrix, L: Matrix, U: Matrix}} {L, U, P}\n\t */\n\tlup() {\n\t\treturn LinearAlgebra.lup(this);\n\t}\n\n\t/**\n\t * LU decomposition.\n\t * - L*U=A\n\t * - L is lower triangular matrix.\n\t * - U is upper triangular matrix.\n\t * @returns {{L: Matrix, U: Matrix}} {L, U}\n\t */\n\tlu() {\n\t\treturn LinearAlgebra.lu(this);\n\t}\n\n\t/**\n\t * Solving a system of linear equations to be Ax = B\n\t * @param {KMatrixInputData} number - B\n\t * @returns {Matrix} x\n\t */\n\tlinsolve(number) {\n\t\treturn LinearAlgebra.linsolve(this, number);\n\t}\n\n\t/**\n\t * QR decomposition.\n\t * - Q*R=A\n\t * - Q is orthonormal matrix.\n\t * - R is upper triangular matrix.\n\t * @returns {{Q: Matrix, R: Matrix}} {Q, R}\n\t */\n\tqr() {\n\t\treturn LinearAlgebra.qr(this);\n\t}\n\n\t/**\n\t * Tridiagonalization of symmetric matrix.\n\t * - Don't support complex numbers.\n\t * - P*H*P'=A\n\t * - P is orthonormal matrix.\n\t * - H is tridiagonal matrix.\n\t * - The eigenvalues of H match the eigenvalues of A.\n\t * @returns {{P: Matrix, H: Matrix}} {P, H}\n\t */\n\ttridiagonalize() {\n\t\treturn LinearAlgebra.tridiagonalize(this);\n\t}\n\n\t/**\n\t * Eigendecomposition of symmetric matrix.\n\t * - Don't support complex numbers.\n\t * - V*D*V'=A.\n\t * - V is orthonormal matrix. and columns of V are the right eigenvectors.\n\t * - D is a matrix containing the eigenvalues on the diagonal component.\n\t * @returns {{V: Matrix, D: Matrix}} {D, V}\n\t */\n\teig() {\n\t\treturn LinearAlgebra.eig(this);\n\t}\n\n\t/**\n\t * Singular Value Decomposition (SVD).\n\t * - U*S*V'=A\n\t * - U and V are orthonormal matrices.\n\t * - S is a matrix with singular values in the diagonal.\n\t * @returns {{U: Matrix, S: Matrix, V: Matrix}} U*S*V'=A\n\t */\n\tsvd() {\n\t\treturn LinearAlgebra.svd(this);\n\t}\n\n\t/**\n\t * Pseudo-inverse matrix.\n\t * @returns {Matrix} A^+\n\t */\n\tpinv() {\n\t\treturn LinearAlgebra.pinv(this);\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// probability 確率計算用\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * Log-gamma function.\n\t * - Calculate from real values.\n\t * @returns {Matrix}\n\t */\n\tgammaln() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.gammaln();\n\t\t});\n\t}\n\n\t/**\n\t * Gamma function.\n\t * - Calculate from real values.\n\t * @returns {Matrix}\n\t */\n\tgamma() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.gamma();\n\t\t});\n\t}\n\n\t/**\n\t * Incomplete gamma function.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} a\n\t * @param {string} [tail=\"lower\"] - lower (default) , \"upper\"\n\t * @returns {Matrix}\n\t */\n\tgammainc(a, tail) {\n\t\tconst a_ = Matrix._toDouble(a);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.gammainc(a_, tail);\n\t\t});\n\t}\n\n\t/**\n\t * Probability density function (PDF) of the gamma distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} k - Shape parameter.\n\t * @param {KMatrixInputData} s - Scale parameter.\n\t * @returns {Matrix}\n\t */\n\tgampdf(k, s) {\n\t\tconst k_ = Matrix._toDouble(k);\n\t\tconst s_ = Matrix._toDouble(s);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.gampdf(k_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of gamma distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} k - Shape parameter.\n\t * @param {KMatrixInputData} s - Scale parameter.\n\t * @returns {Matrix}\n\t */\n\tgamcdf(k, s) {\n\t\tconst k_ = Matrix._toDouble(k);\n\t\tconst s_ = Matrix._toDouble(s);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.gamcdf(k_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of gamma distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} k - Shape parameter.\n\t * @param {KMatrixInputData} s - Scale parameter.\n\t * @returns {Matrix}\n\t */\n\tgaminv(k, s) {\n\t\tconst k_ = Matrix._toDouble(k);\n\t\tconst s_ = Matrix._toDouble(s);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.gaminv(k_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * Beta function.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} y\n\t * @returns {Matrix}\n\t */\n\tbeta(y) {\n\t\tconst y_ = Matrix._toDouble(y);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.beta(y_);\n\t\t});\n\t}\n\t\n\t/**\n\t * Incomplete beta function.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} a\n\t * @param {KMatrixInputData} b\n\t * @param {string} [tail=\"lower\"] - lower (default) , \"upper\"\n\t * @returns {Matrix}\n\t */\n\tbetainc(a, b, tail) {\n\t\tconst a_ = Matrix._toDouble(a);\n\t\tconst b_ = Matrix._toDouble(b);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.betainc(a_, b_, tail);\n\t\t});\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of beta distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} a\n\t * @param {KMatrixInputData} b\n\t * @returns {Matrix}\n\t */\n\tbetacdf(a, b) {\n\t\tconst a_ = Matrix._toDouble(a);\n\t\tconst b_ = Matrix._toDouble(b);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.betacdf(a_, b_);\n\t\t});\n\t}\n\n\t/**\n\t * Probability density function (PDF) of beta distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} a\n\t * @param {KMatrixInputData} b\n\t * @returns {Matrix}\n\t */\n\tbetapdf(a, b) {\n\t\tconst a_ = Matrix._toDouble(a);\n\t\tconst b_ = Matrix._toDouble(b);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.betapdf(a_, b_);\n\t\t});\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of beta distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} a\n\t * @param {KMatrixInputData} b\n\t * @returns {Matrix}\n\t */\n\tbetainv(a, b) {\n\t\tconst a_ = Matrix._toDouble(a);\n\t\tconst b_ = Matrix._toDouble(b);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.betainv(a_, b_);\n\t\t});\n\t}\n\n\t/**\n\t * Factorial function, x!.\n\t * - Calculate from real values.\n\t * @returns {Matrix}\n\t */\n\tfactorial() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.factorial();\n\t\t});\n\t}\n\t\n\t/**\n\t * Binomial coefficient, number of all combinations, nCk.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} k\n\t * @returns {Matrix}\n\t */\n\tnchoosek(k) {\n\t\tconst k_ = Matrix._toDouble(k);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.nchoosek(k_);\n\t\t});\n\t}\n\t\n\t/**\n\t * Error function.\n\t * - Calculate from real values.\n\t * @returns {Matrix}\n\t */\n\terf() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.erf();\n\t\t});\n\t}\n\n\t/**\n\t * Complementary error function.\n\t * - Calculate from real values.\n\t * @returns {Matrix}\n\t */\n\terfc() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.erfc();\n\t\t});\n\t}\n\t\n\t/**\n\t * Inverse function of Error function.\n\t * - Calculate from real values.\n\t * @returns {Matrix}\n\t */\n\terfinv() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.erfinv();\n\t\t});\n\t}\n\t\n\t/**\n\t * Inverse function of Complementary error function.\n\t * - Calculate from real values.\n\t * @returns {Matrix}\n\t */\n\terfcinv() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.erfcinv();\n\t\t});\n\t}\n\n\t/**\n\t * Probability density function (PDF) of normal distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} [u=0.0] - Average value.\n\t * @param {KMatrixInputData} [s=1.0] - Variance value.\n\t * @returns {Matrix}\n\t */\n\tnormpdf(u, s) {\n\t\tconst u_ = u !== undefined ? Matrix._toDouble(u) : 0.0;\n\t\tconst s_ = s !== undefined ? Matrix._toDouble(s) : 1.0;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.normpdf(u_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of normal distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} [u=0.0] - Average value.\n\t * @param {KMatrixInputData} [s=1.0] - Variance value.\n\t * @returns {Matrix}\n\t */\n\tnormcdf(u, s) {\n\t\tconst u_ = u !== undefined ? Matrix._toDouble(u) : 0.0;\n\t\tconst s_ = s !== undefined ? Matrix._toDouble(s) : 1.0;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.normcdf(u_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of normal distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} [u=0.0] - Average value.\n\t * @param {KMatrixInputData} [s=1.0] - Variance value.\n\t * @returns {Matrix}\n\t */\n\tnorminv(u, s) {\n\t\tconst u_ = u !== undefined ? Matrix._toDouble(u) : 0.0;\n\t\tconst s_ = s !== undefined ? Matrix._toDouble(s) : 1.0;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.norminv(u_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * Probability density function (PDF) of binomial distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} n\n\t * @param {KMatrixInputData} p\n\t * @returns {Matrix}\n\t */\n\tbinopdf(n, p) {\n\t\tconst n_ = Matrix._toDouble(n);\n\t\tconst p_ = Matrix._toDouble(p);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.binopdf(n_, p_);\n\t\t});\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of binomial distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} n\n\t * @param {KMatrixInputData} p\n\t * @param {string} [tail=\"lower\"] - lower (default) , \"upper\"\n\t * @returns {Matrix}\n\t */\n\tbinocdf(n, p, tail) {\n\t\tconst n_ = Matrix._toDouble(n);\n\t\tconst p_ = Matrix._toDouble(p);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.binocdf(n_, p_, tail);\n\t\t});\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of binomial distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} n\n\t * @param {KMatrixInputData} p\n\t * @returns {Matrix}\n\t */\n\tbinoinv(n, p) {\n\t\tconst n_ = Matrix._toDouble(n);\n\t\tconst p_ = Matrix._toDouble(p);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.binoinv(n_, p_);\n\t\t});\n\t}\n\n\t/**\n\t * Probability density function (PDF) of Poisson distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} lambda\n\t * @returns {Matrix}\n\t */\n\tpoisspdf(lambda) {\n\t\tconst lambda_ = Matrix._toDouble(lambda);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.poisspdf(lambda_);\n\t\t});\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of Poisson distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} lambda\n\t * @returns {Matrix}\n\t */\n\tpoisscdf(lambda) {\n\t\tconst lambda_ = Matrix._toDouble(lambda);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.poisscdf(lambda_);\n\t\t});\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of Poisson distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} lambda\n\t * @returns {Matrix}\n\t */\n\tpoissinv(lambda) {\n\t\tconst lambda_ = Matrix._toDouble(lambda);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.poissinv(lambda_);\n\t\t});\n\t}\n\n\t/**\n\t * Probability density function (PDF) of Student's t-distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} v - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\ttpdf(v) {\n\t\tconst v_ = Matrix._toDouble(v);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.tpdf(v_);\n\t\t});\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of Student's t-distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} v - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\ttcdf(v) {\n\t\tconst v_ = Matrix._toDouble(v);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.tcdf(v_);\n\t\t});\n\t}\n\n\t/**\n\t * Inverse of cumulative distribution function (CDF) of Student's t-distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} v - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\ttinv(v) {\n\t\tconst v_ = Matrix._toDouble(v);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.tinv(v_);\n\t\t});\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of Student's t-distribution that can specify tail.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} v - The degrees of freedom. (DF)\n\t * @param {KMatrixInputData} tails - Tail. (1 = the one-tailed distribution, 2 =  the two-tailed distribution.)\n\t * @returns {Matrix}\n\t */\n\ttdist(v, tails) {\n\t\tconst v_ = Matrix._toDouble(v);\n\t\tconst tails_ = Matrix._toDouble(tails);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.tdist(v_, tails_);\n\t\t});\n\t}\n\n\t/**\n\t * Inverse of cumulative distribution function (CDF) of Student's t-distribution in two-sided test.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} v - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\ttinv2(v) {\n\t\tconst v_ = Matrix._toDouble(v);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.tinv2(v_);\n\t\t});\n\t}\n\n\t/**\n\t * Probability density function (PDF) of chi-square distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} k - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\tchi2pdf(k) {\n\t\tconst k_ = Matrix._toDouble(k);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.chi2pdf(k_);\n\t\t});\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of chi-square distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} k - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\tchi2cdf(k) {\n\t\tconst k_ = Matrix._toDouble(k);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.chi2cdf(k_);\n\t\t});\n\t}\n\t\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of chi-square distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} k - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\tchi2inv(k) {\n\t\tconst k_ = Matrix._toDouble(k);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.chi2inv(k_);\n\t\t});\n\t}\n\n\t/**\n\t * Probability density function (PDF) of F-distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} d1 - The degree of freedom of the molecules.\n\t * @param {KMatrixInputData} d2 - The degree of freedom of the denominator\n\t * @returns {Matrix}\n\t */\n\tfpdf(d1, d2) {\n\t\tconst d1_ = Matrix._toDouble(d1);\n\t\tconst d2_ = Matrix._toDouble(d2);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.fpdf(d1_, d2_);\n\t\t});\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of F-distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} d1 - The degree of freedom of the molecules.\n\t * @param {KMatrixInputData} d2 - The degree of freedom of the denominator\n\t * @returns {Matrix}\n\t */\n\tfcdf(d1, d2) {\n\t\tconst d1_ = Matrix._toDouble(d1);\n\t\tconst d2_ = Matrix._toDouble(d2);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.fcdf(d1_, d2_);\n\t\t});\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of F-distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} d1 - The degree of freedom of the molecules.\n\t * @param {KMatrixInputData} d2 - The degree of freedom of the denominator\n\t * @returns {Matrix}\n\t */\n\tfinv(d1, d2) {\n\t\tconst d1_ = Matrix._toDouble(d1);\n\t\tconst d2_ = Matrix._toDouble(d2);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.finv(d1_, d2_);\n\t\t});\n\t}\n\n\t// ----------------------\n\t// ビット演算系\n\t// ----------------------\n\t\n\t/**\n\t * Logical AND.\n\t * - Calculated as an integer.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A & B\n\t */\n\tand(number) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.and(Matrix._toDouble(number));\n\t\t});\n\t}\n\n\t/**\n\t * Logical OR.\n\t * - Calculated as an integer.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A | B\n\t */\n\tor(number) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.or(Matrix._toDouble(number));\n\t\t});\n\t}\n\n\t/**\n\t * Logical Exclusive-OR.\n\t * - Calculated as an integer.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A ^ B\n\t */\n\txor(number) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.xor(Matrix._toDouble(number));\n\t\t});\n\t}\n\n\t/**\n\t * Logical Not. (mutable)\n\t * - Calculated as an integer.\n\t * @returns {Matrix} !A\n\t */\n\tnot() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.not();\n\t\t});\n\t}\n\t\n\t/**\n\t * this << n\n\t * - Calculated as an integer.\n\t * @param {KMatrixInputData} n\n\t * @returns {Matrix} A << n\n\t */\n\tshift(n) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.shift(Matrix._toDouble(n));\n\t\t});\n\t}\n\n\t// ----------------------\n\t// その他の演算\n\t// ----------------------\n\t\n\t/**\n\t * Multiply a multiple of ten.\n\t * @param {KMatrixInputData} n\n\t * @returns {Matrix} x * 10^n\n\t */\n\tscaleByPowerOfTen(n) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.scaleByPowerOfTen(Matrix._toComplex(n));\n\t\t});\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// statistics 統計計算用\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * Maximum number.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix} max([A, B])\n\t */\n\tmax(type) {\n\t\treturn Statistics.max(this, type);\n\t}\n\t\n\t/**\n\t * Minimum number.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix} min([A, B])\n\t */\n\tmin(type) {\n\t\treturn Statistics.min(this, type);\n\t}\n\t\n\t/**\n\t * Sum.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tsum(type) {\n\t\treturn Statistics.sum(this, type);\n\t}\n\n\t/**\n\t * Arithmetic average.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tmean(type) {\n\t\treturn Statistics.mean(this, type);\n\t}\n\n\t/**\n\t * Product of array elements.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tprod(type) {\n\t\treturn Statistics.prod(this, type);\n\t}\n\n\t/**\n\t * Geometric mean.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tgeomean(type) {\n\t\treturn Statistics.geomean(this, type);\n\t}\n\n\t/**\n\t * Median.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tmedian(type) {\n\t\treturn Statistics.median(this, type);\n\t}\n\n\t/**\n\t * Mode.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tmode(type) {\n\t\treturn Statistics.mode(this, type);\n\t}\n\n\t/**\n\t * Moment.\n\t * - Moment of order n. Equivalent to the definition of variance at 2.\n\t * @param {number} nth_order\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tmoment(nth_order, type) {\n\t\treturn Statistics.moment(this, nth_order, type);\n\t}\n\n\t/**\n\t * Variance.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tvariance(type) {\n\t\treturn Statistics.variance(this, type);\n\t}\n\n\t/**\n\t * Standard deviation.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstd(type) {\n\t\treturn Statistics.std(this, type);\n\t}\n\n\t/**\n\t * Mean absolute deviation.\n\t * - The \"algorithm\" can choose \"0/mean\"(default) and \"1/median\".\n\t * @param {?string|?number} [algorithm]\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tmad(algorithm, type) {\n\t\treturn Statistics.mad(this, algorithm, type);\n\t}\n\n\t/**\n\t * Skewness.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tskewness(type) {\n\t\treturn Statistics.skewness(this, type);\n\t}\n\n\t/**\n\t * Covariance matrix or Covariance value.\n\t * - Get a variance-covariance matrix from 1 matrix.\n\t * - Get a covariance from 2 vectors.\n\t * @param {KMatrixSettings|KMatrixInputData} [y_or_type]\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tcov(y_or_type, type) {\n\t\treturn Statistics.cov(this, y_or_type, type);\n\t}\n\n\t/**\n\t * The samples are standardize to a mean value of 0, standard deviation of 1.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstandardization(type) {\n\t\treturn Statistics.standardization(this, type);\n\t}\n\n\t/**\n\t * Correlation matrix or Correlation coefficient.\n\t * - Get a correlation matrix from 1 matrix.\n\t * - Get a correlation coefficient from 2 vectors.\n\t * @param {KMatrixSettings|KMatrixInputData} [y_or_type]\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tcorrcoef(y_or_type, type) {\n\t\treturn Statistics.corrcoef(this, y_or_type, type);\n\t}\n\n\t/**\n\t * Sort.\n\t * - The \"order\" can choose \"ascend\"(default) and \"descend\".\n\t * @param {string} [order]\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tsort(order, type) {\n\t\treturn Statistics.sort(this, order, type);\n\t}\n\n\t// ----------------------\n\t// 互換性\n\t// ----------------------\n\t\n\t/**\n\t * The positive or negative sign of this number.\n\t * - +1 if positive, -1 if negative, 0 if 0.\n\t * @returns {Matrix}\n\t */\n\tsignum() {\n\t\treturn this.sign();\n\t}\n\n\t/**\n\t * Subtract.\n\t * @param {KMatrixInputData} number\n\t * @returns {Matrix} A - B\n\t */\n\tsubtract(number) {\n\t\treturn this.sub(number);\n\t}\n\n\t/**\n\t * Multiply.\n\t * @param {KMatrixInputData} number\n\t * @returns {Matrix} A * B\n\t */\n\tmultiply(number) {\n\t\treturn this.mul(number);\n\t}\n\n\t/**\n\t * Divide.\n\t * @param {KMatrixInputData} number\n\t * @returns {Matrix} fix(A / B)\n\t */\n\tdivide(number) {\n\t\treturn this.div(number);\n\t}\n\n\t/**\n\t * Remainder of division.\n\t * - Result has same sign as the Dividend.\n\t * @param {KMatrixInputData} number\n\t * @returns {Matrix} A % B\n\t */\n\tremainder(number) {\n\t\treturn this.rem(number);\n\t}\n\t\n\t/**\n\t * To integer rounded down to the nearest.\n\t * @returns {Matrix} fix(A), trunc(A)\n\t */\n\ttrunc() {\n\t\treturn this.fix();\n\t}\n\n\t/**\n\t * @returns {boolean} true\n\t * @private\n\t */\n\tisMatrixData() {\n\t\treturn true;\n\t}\n\n}\n\n// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n// 定数\n// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n/**\n * 1\n * @type {Matrix}\n */\nMatrix.ONE = new Matrix(1);\n\n/**\n * 2\n * @type {Matrix}\n */\nMatrix.TWO = new Matrix(2);\n\n/**\n * 10\n * @type {Matrix}\n */\nMatrix.TEN = new Matrix(10);\n\n/**\n * 0\n * @type {Matrix}\n */\nMatrix.ZERO = new Matrix(0);\n\n/**\n * -1\n * @type {Matrix}\n */\nMatrix.MINUS_ONE = new Matrix(-1);\n\n/**\n * i, j\n * @type {Matrix}\n */\nMatrix.I = new Matrix(Complex.I);\n\n/**\n * PI.\n * @type {Matrix}\n */\nMatrix.PI = new Matrix(Math.PI);\n\n/**\n * 0.25 * PI.\n * @type {Matrix}\n */\nMatrix.QUARTER_PI = new Matrix(0.25 * Math.PI);\n\n/**\n * 0.5 * PI.\n * @type {Matrix}\n */\nMatrix.HALF_PI = new Matrix(0.5 * Math.PI);\n\n/**\n * 2 * PI.\n * @type {Matrix}\n */\nMatrix.TWO_PI = new Matrix(2.0 * Math.PI);\n\n/**\n * E, Napier's constant.\n * @type {Matrix}\n */\nMatrix.E = new Matrix(Math.E);\n\n/**\n * log_e(2)\n * @type {Matrix}\n */\nMatrix.LN2 = new Matrix(Math.LN2);\n\n/**\n * log_e(10)\n * @type {Matrix}\n */\nMatrix.LN10 = new Matrix(Math.LN10);\n\n/**\n * log_2(e)\n * @type {Matrix}\n */\nMatrix.LOG2E = new Matrix(Math.LOG2E);\n\n/**\n * log_10(e)\n * @type {Matrix}\n */\nMatrix.LOG10E = new Matrix(Math.LOG10E);\n\n/**\n * sqrt(2)\n * @type {Matrix}\n */\nMatrix.SQRT2 = new Matrix(Math.SQRT2);\n\n/**\n * sqrt(0.5)\n * @type {Matrix}\n */\nMatrix.SQRT1_2 = new Matrix(Math.SQRT1_2);\n\n/**\n * 0.5\n * @type {Matrix}\n */\nMatrix.HALF = new Matrix(0.5);\n\n/**\n * Positive infinity.\n * @type {Matrix}\n */\nMatrix.POSITIVE_INFINITY = new Matrix(Number.POSITIVE_INFINITY);\n\n/**\n * Negative Infinity.\n * @type {Matrix}\n */\nMatrix.NEGATIVE_INFINITY = new Matrix(Number.NEGATIVE_INFINITY);\n\n/**\n * Not a Number.\n * @type {Matrix}\n */\nMatrix.NaN = new Matrix(Number.NaN);\n",
    "static": true,
    "longname": "D:/JavaScript/konpeitoWSH/src/math/core/Matrix.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 219,
    "kind": "function",
    "name": "instanceofComplex",
    "memberof": "src/math/core/Matrix.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~instanceofComplex",
    "access": "private",
    "export": false,
    "importPath": "konpeito_wsh/src/math/core/Matrix.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 220,
    "kind": "function",
    "name": "instanceofMatrix",
    "memberof": "src/math/core/Matrix.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~instanceofMatrix",
    "access": "private",
    "export": false,
    "importPath": "konpeito_wsh/src/math/core/Matrix.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 221,
    "kind": "typedef",
    "name": "KMatrixInputData",
    "memberof": "src/math/core/Matrix.js",
    "static": true,
    "longname": "src/math/core/Matrix.js~KMatrixInputData",
    "access": "public",
    "description": "Matrix type argument.\n- Matrix\n- Complex\n- number\n- string\n- Array<string|number|Complex|Matrix>\n- Array<Array<string|number|Complex|Matrix>>\n- {doubleValue:number}\n- {toString:function}\n\nInitialization can be performed as follows.\n- 10, \"10\", \"3 + 4j\", \"[ 1 ]\", \"[1, 2, 3]\", \"[1 2 3]\", [1, 2, 3],\n- [[1, 2], [3, 4]], \"[1 2; 3 4]\", \"[1+2i 3+4i]\",\n- \"[1:10]\", \"[1:2:3]\" (MATLAB / Octave / Scilab compatible).",
    "type": {
      "types": [
        "Matrix|Complex|number|string|Array<string|number|Complex|Matrix>|Array<Array<string|number|Complex|Matrix>>|{doubleValue:number}|{toString:function}"
      ],
      "optional": false,
      "name": "KMatrixInputData"
    }
  },
  {
    "__docId__": 222,
    "kind": "typedef",
    "name": "KMatrixSettings",
    "memberof": "src/math/core/Matrix.js",
    "static": true,
    "longname": "src/math/core/Matrix.js~KMatrixSettings",
    "access": "public",
    "description": "Collection of calculation settings for matrix.\n- Available options vary depending on the method.",
    "properties": [
      {
        "nullable": true,
        "types": [
          "string",
          "?number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"auto\"",
        "defaultRaw": "auto",
        "name": "dimension",
        "description": "Calculation direction. 0/\"auto\", 1/\"row\", 2/\"column\", 3/\"both\"."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "correction",
        "description": "Correction value. For statistics. 0(unbiased), 1(sample)."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "KMatrixSettings"
    }
  },
  {
    "__docId__": 223,
    "kind": "class",
    "name": "MatrixTool",
    "memberof": "src/math/core/Matrix.js",
    "static": true,
    "longname": "src/math/core/Matrix.js~MatrixTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito_wsh/src/math/core/Matrix.js",
    "importStyle": null,
    "description": "Collection of functions used in Matrix.",
    "lineNumber": 64,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "toPositionArrayFromObject",
    "memberof": "src/math/core/Matrix.js~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~MatrixTool.toPositionArrayFromObject",
    "access": "public",
    "description": "Create actual values from data specifying matrix position.",
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "A value indicating the position in a matrix."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": "Length to initialize. (Used when \":\" is specified at matrix creation.)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "geta",
        "description": "Offset at initialization. (Used when \":\" is specified at matrix creation.)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "match2",
    "memberof": "src/math/core/Matrix.js~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~MatrixTool.match2",
    "access": "public",
    "description": "A match function that can also extract strings excluding matched strings.",
    "lineNumber": 128,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object<boolean, string>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Search target."
      },
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "regexp",
        "description": "Regular expression."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object<boolean, string>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "trimBracket",
    "memberof": "src/math/core/Matrix.js~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~MatrixTool.trimBracket",
    "access": "public",
    "description": "Removed front and back brackets when enclosed by brackets.\n- Return null if the string has no brackets.",
    "lineNumber": 162,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{text : string, is_transpose : boolean}|null} String after brackets removal or null."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "String to be processed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{text : string, is_transpose : boolean}|null"
      ],
      "spread": false,
      "description": "String after brackets removal or null."
    }
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "toMatrixArrayFromStringForArrayJSON",
    "memberof": "src/math/core/Matrix.js~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~MatrixTool.toMatrixArrayFromStringForArrayJSON",
    "access": "public",
    "description": "Create Matrix type data from string data defined in JSON.\n- For example, \"[xx,xx,xx], [xx,xx,xx]\"",
    "lineNumber": 189,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<Complex>>} Internal array used by Matrix type."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "String to be processed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<Complex>>"
      ],
      "spread": false,
      "description": "Internal array used by Matrix type."
    }
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "InterpolationCalculation",
    "memberof": "src/math/core/Matrix.js~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~MatrixTool.InterpolationCalculation",
    "access": "public",
    "description": "Create a numeric array from initial values, difference values, and final values.",
    "lineNumber": 219,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Complex>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": "Start value."
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "delta",
        "description": "Delta."
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": "End value."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "is_include_last_number",
        "description": "Whether to include the last value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Complex>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "toArrayFromMatch2String",
    "memberof": "src/math/core/Matrix.js~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~MatrixTool.toArrayFromMatch2String",
    "access": "public",
    "description": "Create an array of numbers from data separated by match2.",
    "lineNumber": 260,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Complex>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Object<boolean, string>>"
        ],
        "spread": false,
        "optional": false,
        "name": "match2_string",
        "description": "Data separated by \"toArrayFromString\"."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Complex>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "toArrayFromString",
    "memberof": "src/math/core/Matrix.js~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~MatrixTool.toArrayFromString",
    "access": "public",
    "description": "Convert string to row part of matrix type matrix data.\nEstimate the matrix by extracting parts like numbers.",
    "lineNumber": 303,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Complex>|string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "row_text",
        "description": "A string describing one row of the matrix."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Complex>",
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "toMatrixArrayFromStringForArraySPACE",
    "memberof": "src/math/core/Matrix.js~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~MatrixTool.toMatrixArrayFromStringForArraySPACE",
    "access": "public",
    "description": "Create Matrix type data from string data defined by character string with space separation etc.",
    "lineNumber": 324,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<Complex>>} Internal array used by Matrix type."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Strings to analyze."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<Complex>>"
      ],
      "spread": false,
      "description": "Internal array used by Matrix type."
    }
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "toMatrixArrayFromStringInBracket",
    "memberof": "src/math/core/Matrix.js~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~MatrixTool.toMatrixArrayFromStringInBracket",
    "access": "public",
    "description": "Create Matrix type data composed of string data for matrix.",
    "lineNumber": 340,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<Complex>>} Internal array used by Matrix type."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Strings to analyze."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<Complex>>"
      ],
      "spread": false,
      "description": "Internal array used by Matrix type."
    }
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "toMatrixArrayFromString",
    "memberof": "src/math/core/Matrix.js~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~MatrixTool.toMatrixArrayFromString",
    "access": "public",
    "description": "Create Matrix type data from string data.",
    "lineNumber": 356,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<Complex>>} Internal array used by Matrix type."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Strings to analyze."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<Complex>>"
      ],
      "spread": false,
      "description": "Internal array used by Matrix type."
    }
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "isCorrectMatrixArray",
    "memberof": "src/math/core/Matrix.js~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~MatrixTool.isCorrectMatrixArray",
    "access": "public",
    "description": "Returns true if Matrix type internal data is correct as matrix data.",
    "lineNumber": 385,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<Complex>>"
        ],
        "spread": false,
        "optional": false,
        "name": "m_array",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 235,
    "kind": "class",
    "name": "Matrix",
    "memberof": "src/math/core/Matrix.js",
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix",
    "access": "public",
    "export": true,
    "importPath": "konpeito_wsh/src/math/core/Matrix.js",
    "importStyle": "Matrix",
    "description": "Complex matrix class. (immutable)",
    "lineNumber": 405,
    "interface": false
  },
  {
    "__docId__": 236,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#constructor",
    "access": "public",
    "description": "Create a complex matrix.\nInitialization can be performed as follows.\n- 10, \"10\", \"3 + 4j\", \"[ 1 ]\", \"[1, 2, 3]\", \"[1 2 3]\", [1, 2, 3],\n- [[1, 2], [3, 4]], \"[1 2; 3 4]\", \"[1+2i 3+4i]\",\n- \"[1:10]\", \"[1:2:3]\" (MATLAB / Octave / Scilab compatible).",
    "lineNumber": 415,
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "Complex matrix. See how to use the function."
      }
    ]
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "matrix_array",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#matrix_array",
    "access": "public",
    "description": "An array of elements in the matrix.",
    "lineNumber": 525,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Array<Array<Complex>>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 238,
    "kind": "member",
    "name": "row_length",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#row_length",
    "access": "public",
    "description": "The number of rows in a matrix.",
    "lineNumber": 532,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 239,
    "kind": "member",
    "name": "column_length",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#column_length",
    "access": "public",
    "description": "The number of columns in a matrix.",
    "lineNumber": 539,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 240,
    "kind": "member",
    "name": "string_cash",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#string_cash",
    "access": "private",
    "description": "A cache that records data converted to a string.",
    "lineNumber": 547,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "create",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.create",
    "access": "public",
    "description": "Create an entity object of this class.",
    "lineNumber": 555,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.valueOf",
    "access": "public",
    "description": "Convert number to Matrix type.",
    "lineNumber": 569,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "_toMatrix",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix._toMatrix",
    "access": "private",
    "description": "Convert to Matrix.\nIf type conversion is unnecessary, return the value as it is.",
    "lineNumber": 580,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "_toComplex",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix._toComplex",
    "access": "private",
    "description": "Convert to Complex.\nIf type conversion is unnecessary, return the value as it is.",
    "lineNumber": 596,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "_toDouble",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix._toDouble",
    "access": "private",
    "description": "Convert to real number.",
    "lineNumber": 615,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "_toInteger",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix._toInteger",
    "access": "private",
    "description": "Convert to integer.",
    "lineNumber": 634,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "_clearCash",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#_clearCash",
    "access": "private",
    "description": "Delete cache.",
    "lineNumber": 641,
    "params": [],
    "return": null
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "clone",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#clone",
    "access": "public",
    "description": "Deep copy.",
    "lineNumber": 651,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#toString",
    "access": "public",
    "description": "Convert to string.",
    "lineNumber": 659,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "toOneLineString",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#toOneLineString",
    "access": "public",
    "description": "Convert to string in one line.",
    "lineNumber": 790,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#toJSON",
    "access": "public",
    "description": "Convert to JSON.",
    "lineNumber": 816,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "equals",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#equals",
    "access": "public",
    "description": "Equals.",
    "lineNumber": 844,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === B"
    }
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "getNumberMatrixArray",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#getNumberMatrixArray",
    "access": "public",
    "description": "Array of real parts of elements in matrix.",
    "lineNumber": 869,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<number>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<number>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "getComplexMatrixArray",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#getComplexMatrixArray",
    "access": "public",
    "description": "Complex array of complex numbers of each element of the matrix.",
    "lineNumber": 884,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<Complex>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<Complex>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "_each",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#_each",
    "access": "private",
    "description": "Perform the same process on all elements in the matrix. (mutable)",
    "lineNumber": 901,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Complex, number, number): any "
        ],
        "spread": false,
        "optional": false,
        "name": "eachfunc",
        "description": "Function(num, row, col)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "cloneMatrixDoEachCalculation",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#cloneMatrixDoEachCalculation",
    "access": "public",
    "description": "Perform the same process on all elements in the matrix.",
    "lineNumber": 933,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Complex, number, number): ?Object "
        ],
        "spread": false,
        "optional": false,
        "name": "eachfunc",
        "description": "Function(num, row, col)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "createMatrixDoEachCalculation",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.createMatrixDoEachCalculation",
    "access": "public",
    "description": "Create Matrix with specified initialization for each element in matrix.",
    "lineNumber": 944,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(number, number): ?Object "
        ],
        "spread": false,
        "optional": false,
        "name": "eachfunc",
        "description": "Function(row, col)"
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "Number of dimensions or rows."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "dimension",
        "defaultRaw": "dimension",
        "name": "column_length",
        "description": "Number of columns."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "eachVectorAuto",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#eachVectorAuto",
    "access": "public",
    "description": "Treat the columns of the matrix as vectors and execute the same process.\n- If the matrix is a row vector, it performs the same processing for the row vector.",
    "lineNumber": 972,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Array<Complex>): Array<Complex>"
        ],
        "spread": false,
        "optional": false,
        "name": "array_function",
        "description": "Function(array)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "eachVectorBoth",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#eachVectorBoth",
    "access": "public",
    "description": "Treat the rows and columns of the matrix as vectors and perform the same processing.\n1. First run the same process for the row.\n2. Finally perform the same processing for the column.",
    "lineNumber": 1007,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Array<Complex>): Array<Complex>"
        ],
        "spread": false,
        "optional": false,
        "name": "array_function",
        "description": "Function(array)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "eachVectorRow",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#eachVectorRow",
    "access": "public",
    "description": "Treat the rows of the matrix as vectors and execute the same process.",
    "lineNumber": 1044,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Array<Complex>): Array<Complex>"
        ],
        "spread": false,
        "optional": false,
        "name": "array_function",
        "description": "Function(array)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "eachVectorColumn",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#eachVectorColumn",
    "access": "public",
    "description": "Treat the columns of the matrix as vectors and execute the same process.",
    "lineNumber": 1067,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Array<Complex>): Array<Complex>"
        ],
        "spread": false,
        "optional": false,
        "name": "array_function",
        "description": "Function(array)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "eachVector",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#eachVector",
    "access": "public",
    "description": "Treat the rows and columns of the matrix as vectors and perform the same processing.\nThe arguments of the method can switch the direction of the matrix to be executed.",
    "lineNumber": 1092,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Array<Complex>): Array<Complex>"
        ],
        "spread": false,
        "optional": false,
        "name": "array_function",
        "description": "Function(array)"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"auto\"",
        "defaultRaw": "auto",
        "name": "dimension",
        "description": "0/\"auto\", 1/\"row\", 2/\"column\", 3/\"both\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "getMatrix",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#getMatrix",
    "access": "public",
    "description": "Extract the specified part of the matrix.",
    "lineNumber": 1124,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "A vector containing the row numbers to extract from this matrix. If you specify \":\" select all rows."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "col",
        "description": "A vector containing the column numbers to extract from this matrix. If you specify \":\" select all columns."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "isUpOffset",
        "description": "Set offset of matrix position to 1 with true."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "setMatrix",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#setMatrix",
    "access": "public",
    "description": "Change specified element in matrix.",
    "lineNumber": 1148,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "A vector containing the row numbers to replace in this matrix. If you specify \":\" select all rows."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "col",
        "description": "A vector containing the column numbers to replace in this matrix. If you specify \":\" select all columns."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "replace",
        "description": "Matrix to be replaced."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "isUpOffset",
        "description": "Set offset of matrix position to 1 with true."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "getComplex",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#getComplex",
    "access": "public",
    "description": "Returns the specified element in the matrix.\nEach element of the matrix is composed of complex numbers.",
    "lineNumber": 1171,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "row_or_pos",
        "description": "If this is a matrix, the row number. If this is a vector, the address."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "col",
        "description": "If this is a matrix, the column number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "booleanValue",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#booleanValue",
    "access": "public",
    "description": "Boolean value of the first element of the matrix.",
    "lineNumber": 1200,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "intValue",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#intValue",
    "access": "public",
    "description": "Integer value of the first element of the matrix.",
    "lineNumber": 1208,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "doubleValue",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#doubleValue",
    "access": "public",
    "description": "Real value of first element of the matrix.",
    "lineNumber": 1216,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "toComplex",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#toComplex",
    "access": "public",
    "description": "return Complex.",
    "lineNumber": 1228,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "toMatrix",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#toMatrix",
    "access": "public",
    "description": "return Matrix.",
    "lineNumber": 1236,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "scalar",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#scalar",
    "access": "public",
    "description": "First element of this matrix.",
    "lineNumber": 1248,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "length",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#length",
    "access": "public",
    "description": "Maximum size of rows or columns in the matrix.",
    "lineNumber": 1256,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "width",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#width",
    "access": "public",
    "description": "Number of columns in the matrix.",
    "lineNumber": 1264,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "height",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#height",
    "access": "public",
    "description": "Number of rows in matrix.",
    "lineNumber": 1272,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "norm1",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#norm1",
    "access": "public",
    "description": "1-norm.",
    "lineNumber": 1280,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "norm2",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#norm2",
    "access": "public",
    "description": "2-norm.",
    "lineNumber": 1288,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "norm",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#norm",
    "access": "public",
    "description": "p-norm.",
    "lineNumber": 1297,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "cond",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#cond",
    "access": "public",
    "description": "Condition number of the matrix",
    "lineNumber": 1306,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "rcond",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#rcond",
    "access": "public",
    "description": "Inverse condition number.",
    "lineNumber": 1314,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "rank",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#rank",
    "access": "public",
    "description": "Rank.",
    "lineNumber": 1323,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} rank(A)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "rank(A)"
    }
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "trace",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#trace",
    "access": "public",
    "description": "Trace of a matrix.\nSum of diagonal elements.",
    "lineNumber": 1332,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} trace(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "trace(A)"
    },
    "params": []
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "det",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#det",
    "access": "public",
    "description": "Determinant.",
    "lineNumber": 1340,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} |A|"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "|A|"
    },
    "params": []
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "memset",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.memset",
    "access": "public",
    "description": "Creates a matrix composed of the specified number.",
    "lineNumber": 1355,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "Value after initialization."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "Number of dimensions or rows."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "Number of columns."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "eye",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.eye",
    "access": "public",
    "description": "Return identity matrix.",
    "lineNumber": 1382,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "Number of dimensions or rows."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "Number of columns."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 286,
    "kind": "method",
    "name": "zeros",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.zeros",
    "access": "public",
    "description": "Create zero matrix.",
    "lineNumber": 1394,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "Number of dimensions or rows."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "Number of columns."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "ones",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.ones",
    "access": "public",
    "description": "Create a matrix of all ones.",
    "lineNumber": 1407,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "Number of dimensions or rows."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "Number of columns."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "diag",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#diag",
    "access": "public",
    "description": "If matrix, generate diagonal column vector.\nIf vector, generate a matrix with diagonal elements.",
    "lineNumber": 1419,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix or vector created. See how to use the function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix or vector created. See how to use the function."
    },
    "params": []
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "isScalar",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isScalar",
    "access": "public",
    "description": "Return true if the matrix is scalar.",
    "lineNumber": 1452,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "isRow",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isRow",
    "access": "public",
    "description": "Return true if the matrix is row vector.",
    "lineNumber": 1460,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "isColumn",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isColumn",
    "access": "public",
    "description": "Return true if the matrix is column vector.",
    "lineNumber": 1468,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "isVector",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isVector",
    "access": "public",
    "description": "Return true if the matrix is vector.",
    "lineNumber": 1476,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "isMatrix",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isMatrix",
    "access": "public",
    "description": "Return true if the value is not scalar.",
    "lineNumber": 1484,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "isSquare",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isSquare",
    "access": "public",
    "description": "Return true if the matrix is square matrix.",
    "lineNumber": 1492,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "isReal",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isReal",
    "access": "public",
    "description": "Return true if the matrix is real matrix.",
    "lineNumber": 1501,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "isComplex",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isComplex",
    "access": "public",
    "description": "Return true if the matrix is complex matrix.",
    "lineNumber": 1516,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "isZeros",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isZeros",
    "access": "public",
    "description": "Return true if the matrix is zero matrix.",
    "lineNumber": 1525,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "isIdentity",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isIdentity",
    "access": "public",
    "description": "Return true if the matrix is identity matrix.",
    "lineNumber": 1541,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "isDiagonal",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isDiagonal",
    "access": "public",
    "description": "Return true if the matrix is diagonal matrix.",
    "lineNumber": 1566,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "isTridiagonal",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isTridiagonal",
    "access": "public",
    "description": "Return true if the matrix is tridiagonal matrix.",
    "lineNumber": 1582,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "isRegular",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isRegular",
    "access": "public",
    "description": "Return true if the matrix is regular matrix.",
    "lineNumber": 1598,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "isOrthogonal",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isOrthogonal",
    "access": "public",
    "description": "Return true if the matrix is orthogonal matrix.",
    "lineNumber": 1614,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "isUnitary",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isUnitary",
    "access": "public",
    "description": "Return true if the matrix is unitary matrix.",
    "lineNumber": 1627,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "isSymmetric",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isSymmetric",
    "access": "public",
    "description": "Return true if the matrix is symmetric matrix.",
    "lineNumber": 1640,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "isHermitian",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isHermitian",
    "access": "public",
    "description": "Return true if the matrix is hermitian matrix.",
    "lineNumber": 1660,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "isTriangleUpper",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isTriangleUpper",
    "access": "public",
    "description": "Return true if the matrix is upper triangular matrix.",
    "lineNumber": 1685,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "isTriangleLower",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isTriangleLower",
    "access": "public",
    "description": "Return true if the matrix is  lower triangular matrix.",
    "lineNumber": 1701,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "isPermutation",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isPermutation",
    "access": "public",
    "description": "Return true if the matrix is permutation matrix.",
    "lineNumber": 1717,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "size",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#size",
    "access": "public",
    "description": "Number of rows and columns of matrix.",
    "lineNumber": 1754,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} [row_length, column_length]"
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "string",
          "?number"
        ],
        "spread": false,
        "optional": true,
        "name": "dimension",
        "description": "direction. 1/\"row\", 2/\"column\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "[row_length, column_length]"
    }
  },
  {
    "__docId__": 310,
    "kind": "method",
    "name": "compareTo",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#compareTo",
    "access": "public",
    "description": "Compare values.\n- Use `compareToMatrix` if you want to compare matrices.",
    "lineNumber": 1781,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} A > B ? 1 : (A === B ? 0 : -1)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A > B ? 1 : (A === B ? 0 : -1)"
    }
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "compareToMatrix",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#compareToMatrix",
    "access": "public",
    "description": "Compare values.\n- Use `compareTo` if you want to compare scalar values.",
    "lineNumber": 1798,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A > B ? 1 : (A === B ? 0 : -1)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A > B ? 1 : (A === B ? 0 : -1)"
    }
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "add",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#add",
    "access": "public",
    "description": "Add.",
    "lineNumber": 1819,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A + B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A + B"
    }
  },
  {
    "__docId__": 313,
    "kind": "method",
    "name": "sub",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#sub",
    "access": "public",
    "description": "Subtract.",
    "lineNumber": 1839,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A - B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A - B"
    }
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "mul",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#mul",
    "access": "public",
    "description": "Multiply.\n- Use `dotmul` if you want to use `mul` for each element.",
    "lineNumber": 1860,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A * B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A * B"
    }
  },
  {
    "__docId__": 315,
    "kind": "method",
    "name": "div",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#div",
    "access": "public",
    "description": "Divide.\n- Use `dotdiv` if you want to use `div` for each element.",
    "lineNumber": 1913,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A / B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A / B"
    }
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "inv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#inv",
    "access": "public",
    "description": "Inverse matrix of this matrix.\n- Use `dotinv` if you want to use `inv` for each element.",
    "lineNumber": 1953,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^-1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^-1"
    },
    "params": []
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "dotmul",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#dotmul",
    "access": "public",
    "description": "Multiplication for each element of matrix.",
    "lineNumber": 1962,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A .* B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A .* B"
    }
  },
  {
    "__docId__": 318,
    "kind": "method",
    "name": "dotdiv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#dotdiv",
    "access": "public",
    "description": "Division for each element of matrix.",
    "lineNumber": 1982,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A ./ B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A ./ B"
    }
  },
  {
    "__docId__": 319,
    "kind": "method",
    "name": "dotinv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#dotinv",
    "access": "public",
    "description": "Inverse of each element of matrix.",
    "lineNumber": 2001,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 1 ./ A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "1 ./ A"
    },
    "params": []
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "nmul",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#nmul",
    "access": "public",
    "description": "Multiplication for each element of matrix.",
    "lineNumber": 2015,
    "deprecated": "use the dotmul.",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A .* B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A .* B"
    }
  },
  {
    "__docId__": 321,
    "kind": "method",
    "name": "ndiv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#ndiv",
    "access": "public",
    "description": "Division for each element of matrix.",
    "lineNumber": 2025,
    "deprecated": "use the dotdiv.",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A ./ B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A ./ B"
    }
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "ninv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#ninv",
    "access": "public",
    "description": "Inverse of each element of matrix.",
    "lineNumber": 2034,
    "deprecated": "use the dotinv.",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 1 ./ A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "1 ./ A"
    },
    "params": []
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "npow",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#npow",
    "access": "public",
    "description": "Power function for each element of the matrix.",
    "lineNumber": 2044,
    "deprecated": "use the dotpow.",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A .^ B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A .^ B"
    }
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "rem",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#rem",
    "access": "public",
    "description": "Modulo, positive remainder of division for each element of matrix.\n- Result has same sign as the Dividend.",
    "lineNumber": 2058,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A .rem B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A .rem B"
    }
  },
  {
    "__docId__": 325,
    "kind": "method",
    "name": "mod",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#mod",
    "access": "public",
    "description": "Modulo, positive remainder of division for each element of matrix.\n- Result has same sign as the Divisor.",
    "lineNumber": 2079,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A .mod B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A .mod B"
    }
  },
  {
    "__docId__": 326,
    "kind": "method",
    "name": "real",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#real",
    "access": "public",
    "description": "Real part of each element.",
    "lineNumber": 2102,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} real(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "real(A)"
    },
    "params": []
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "imag",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#imag",
    "access": "public",
    "description": "Imaginary part of each element of the matrix.",
    "lineNumber": 2112,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} imag(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "imag(A)"
    },
    "params": []
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "arg",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#arg",
    "access": "public",
    "description": "The argument of each element of matrix.",
    "lineNumber": 2122,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} arg(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "arg(A)"
    },
    "params": []
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "sign",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#sign",
    "access": "public",
    "description": "The positive or negative signs of each element of the matrix.\n- +1 if positive, -1 if negative, 0 if 0, norm if complex number.",
    "lineNumber": 2133,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "floor",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#floor",
    "access": "public",
    "description": "Floor.",
    "lineNumber": 2143,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} floor(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "floor(A)"
    },
    "params": []
  },
  {
    "__docId__": 331,
    "kind": "method",
    "name": "ceil",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#ceil",
    "access": "public",
    "description": "Ceil.",
    "lineNumber": 2153,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} ceil(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "ceil(A)"
    },
    "params": []
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "round",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#round",
    "access": "public",
    "description": "Rounding to the nearest integer.",
    "lineNumber": 2163,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} round(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "round(A)"
    },
    "params": []
  },
  {
    "__docId__": 333,
    "kind": "method",
    "name": "fix",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#fix",
    "access": "public",
    "description": "To integer rounded down to the nearest.",
    "lineNumber": 2173,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} fix(A), trunc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "fix(A), trunc(A)"
    },
    "params": []
  },
  {
    "__docId__": 334,
    "kind": "method",
    "name": "fract",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#fract",
    "access": "public",
    "description": "Fraction.",
    "lineNumber": 2183,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} fract(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "fract(A)"
    },
    "params": []
  },
  {
    "__docId__": 335,
    "kind": "method",
    "name": "abs",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#abs",
    "access": "public",
    "description": "Absolute value.",
    "lineNumber": 2193,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} abs(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "abs(A)"
    },
    "params": []
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "conj",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#conj",
    "access": "public",
    "description": "Complex conjugate matrix.",
    "lineNumber": 2203,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} real(A) - imag(A)j"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "real(A) - imag(A)j"
    },
    "params": []
  },
  {
    "__docId__": 337,
    "kind": "method",
    "name": "negate",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#negate",
    "access": "public",
    "description": "this * -1",
    "lineNumber": 2213,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} -A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A"
    },
    "params": []
  },
  {
    "__docId__": 338,
    "kind": "method",
    "name": "pow",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#pow",
    "access": "public",
    "description": "Power function.\n- Unless the matrix is a scalar value, only integers are supported.\n- Use `dotpow` if you want to use `pow` for each element. A real number can be specified.",
    "lineNumber": 2230,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} pow(A, B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "pow(A, B)"
    }
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "dotpow",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#dotpow",
    "access": "public",
    "description": "Power function for each element of the matrix.",
    "lineNumber": 2261,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A .^ B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A .^ B"
    }
  },
  {
    "__docId__": 340,
    "kind": "method",
    "name": "square",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#square",
    "access": "public",
    "description": "Square.\n- Unless the matrix is a scalar value, only integers are supported.",
    "lineNumber": 2281,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} pow(A, 2)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "pow(A, 2)"
    },
    "params": []
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "sqrt",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#sqrt",
    "access": "public",
    "description": "Square root.",
    "lineNumber": 2289,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} sqrt(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "sqrt(A)"
    },
    "params": []
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "cbrt",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#cbrt",
    "access": "public",
    "description": "Cube root.",
    "lineNumber": 2299,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} sqrt(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "sqrt(A)"
    },
    "params": []
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "rsqrt",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#rsqrt",
    "access": "public",
    "description": "Reciprocal square root.",
    "lineNumber": 2309,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} rsqrt(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "rsqrt(A)"
    },
    "params": []
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "log",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#log",
    "access": "public",
    "description": "Logarithmic function.",
    "lineNumber": 2319,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} log(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "log(A)"
    },
    "params": []
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "exp",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#exp",
    "access": "public",
    "description": "Exponential function.",
    "lineNumber": 2329,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} exp(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "exp(A)"
    },
    "params": []
  },
  {
    "__docId__": 346,
    "kind": "method",
    "name": "expm1",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#expm1",
    "access": "public",
    "description": "e^x - 1",
    "lineNumber": 2339,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} expm1(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "expm1(A)"
    },
    "params": []
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "log1p",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#log1p",
    "access": "public",
    "description": "ln(1 + x)",
    "lineNumber": 2349,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} log1p(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "log1p(A)"
    },
    "params": []
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "log2",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#log2",
    "access": "public",
    "description": "log_2(x)",
    "lineNumber": 2359,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} log2(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "log2(A)"
    },
    "params": []
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "log10",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#log10",
    "access": "public",
    "description": "log_10(x)",
    "lineNumber": 2369,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} log10(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "log10(A)"
    },
    "params": []
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "sin",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#sin",
    "access": "public",
    "description": "Sine function.",
    "lineNumber": 2383,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} sin(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "sin(A)"
    },
    "params": []
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "cos",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#cos",
    "access": "public",
    "description": "Cosine function.",
    "lineNumber": 2393,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} cos(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "cos(A)"
    },
    "params": []
  },
  {
    "__docId__": 352,
    "kind": "method",
    "name": "tan",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#tan",
    "access": "public",
    "description": "Tangent function.",
    "lineNumber": 2403,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} tan(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "tan(A)"
    },
    "params": []
  },
  {
    "__docId__": 353,
    "kind": "method",
    "name": "atan",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#atan",
    "access": "public",
    "description": "Atan (arc tangent) function.\n- Return the values of [-PI/2, PI/2].",
    "lineNumber": 2414,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} atan(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "atan(A)"
    },
    "params": []
  },
  {
    "__docId__": 354,
    "kind": "method",
    "name": "atan2",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#atan2",
    "access": "public",
    "description": "Atan (arc tangent) function.\n- Return the values of [-PI, PI].\n- Supports only real numbers.",
    "lineNumber": 2427,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} atan2(Y, X)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "X"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "atan2(Y, X)"
    }
  },
  {
    "__docId__": 355,
    "kind": "method",
    "name": "asin",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#asin",
    "access": "public",
    "description": "Arc sine function.",
    "lineNumber": 2442,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} asin(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "asin(A)"
    },
    "params": []
  },
  {
    "__docId__": 356,
    "kind": "method",
    "name": "acos",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#acos",
    "access": "public",
    "description": "Arc cosine function.",
    "lineNumber": 2452,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} acos(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "acos(A)"
    },
    "params": []
  },
  {
    "__docId__": 357,
    "kind": "method",
    "name": "sinh",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#sinh",
    "access": "public",
    "description": "Hyperbolic sine function.",
    "lineNumber": 2462,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} sinh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "sinh(A)"
    },
    "params": []
  },
  {
    "__docId__": 358,
    "kind": "method",
    "name": "asinh",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#asinh",
    "access": "public",
    "description": "Inverse hyperbolic sine function.",
    "lineNumber": 2472,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} asinh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "asinh(A)"
    },
    "params": []
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "cosh",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#cosh",
    "access": "public",
    "description": "Hyperbolic cosine function.",
    "lineNumber": 2482,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} cosh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "cosh(A)"
    },
    "params": []
  },
  {
    "__docId__": 360,
    "kind": "method",
    "name": "acosh",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#acosh",
    "access": "public",
    "description": "Inverse hyperbolic cosine function.",
    "lineNumber": 2492,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} acosh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "acosh(A)"
    },
    "params": []
  },
  {
    "__docId__": 361,
    "kind": "method",
    "name": "tanh",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#tanh",
    "access": "public",
    "description": "Hyperbolic tangent function.",
    "lineNumber": 2502,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} tanh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "tanh(A)"
    },
    "params": []
  },
  {
    "__docId__": 362,
    "kind": "method",
    "name": "atanh",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#atanh",
    "access": "public",
    "description": "Inverse hyperbolic tangent function.",
    "lineNumber": 2512,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} atanh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "atanh(A)"
    },
    "params": []
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "sec",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#sec",
    "access": "public",
    "description": "Secant function.",
    "lineNumber": 2522,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} sec(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "sec(A)"
    },
    "params": []
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "asec",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#asec",
    "access": "public",
    "description": "Reverse secant function.",
    "lineNumber": 2532,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} asec(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "asec(A)"
    },
    "params": []
  },
  {
    "__docId__": 365,
    "kind": "method",
    "name": "sech",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#sech",
    "access": "public",
    "description": "Hyperbolic secant function.",
    "lineNumber": 2542,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} sech(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "sech(A)"
    },
    "params": []
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "asech",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#asech",
    "access": "public",
    "description": "Inverse hyperbolic secant function.",
    "lineNumber": 2552,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} asech(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "asech(A)"
    },
    "params": []
  },
  {
    "__docId__": 367,
    "kind": "method",
    "name": "cot",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#cot",
    "access": "public",
    "description": "Cotangent function.",
    "lineNumber": 2562,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} cot(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "cot(A)"
    },
    "params": []
  },
  {
    "__docId__": 368,
    "kind": "method",
    "name": "acot",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#acot",
    "access": "public",
    "description": "Inverse cotangent function.",
    "lineNumber": 2572,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} acot(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "acot(A)"
    },
    "params": []
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "coth",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#coth",
    "access": "public",
    "description": "Hyperbolic cotangent function.",
    "lineNumber": 2582,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} coth(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "coth(A)"
    },
    "params": []
  },
  {
    "__docId__": 370,
    "kind": "method",
    "name": "acoth",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#acoth",
    "access": "public",
    "description": "Inverse hyperbolic cotangent function.",
    "lineNumber": 2592,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} acoth(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "acoth(A)"
    },
    "params": []
  },
  {
    "__docId__": 371,
    "kind": "method",
    "name": "csc",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#csc",
    "access": "public",
    "description": "Cosecant function.",
    "lineNumber": 2602,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} csc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "csc(A)"
    },
    "params": []
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "acsc",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#acsc",
    "access": "public",
    "description": "Inverse cosecant function.",
    "lineNumber": 2612,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} acsc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "acsc(A)"
    },
    "params": []
  },
  {
    "__docId__": 373,
    "kind": "method",
    "name": "csch",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#csch",
    "access": "public",
    "description": "Hyperbolic cosecant function.",
    "lineNumber": 2622,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} csch(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "csch(A)"
    },
    "params": []
  },
  {
    "__docId__": 374,
    "kind": "method",
    "name": "acsch",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#acsch",
    "access": "public",
    "description": "Inverse hyperbolic cosecant function.",
    "lineNumber": 2632,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} acsch(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "acsch(A)"
    },
    "params": []
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "logit",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#logit",
    "access": "public",
    "description": "Logit function.",
    "lineNumber": 2646,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} logit(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "logit(A)"
    },
    "params": []
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "sinc",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#sinc",
    "access": "public",
    "description": "Normalized sinc function.",
    "lineNumber": 2660,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} sinc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "sinc(A)"
    },
    "params": []
  },
  {
    "__docId__": 377,
    "kind": "method",
    "name": "rand",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.rand",
    "access": "public",
    "description": "Generate a matrix composed of random values [0, 1) with uniform random numbers.",
    "lineNumber": 2677,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "Number of dimensions or rows."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "Number of columns."
      },
      {
        "nullable": null,
        "types": [
          "Random"
        ],
        "spread": false,
        "optional": true,
        "name": "random",
        "description": "Class for creating random numbers."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "randn",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.randn",
    "access": "public",
    "description": "Generate a matrix composed of random values with normal distribution.",
    "lineNumber": 2690,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "Number of dimensions or rows."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "Number of columns."
      },
      {
        "nullable": null,
        "types": [
          "Random"
        ],
        "spread": false,
        "optional": true,
        "name": "random",
        "description": "Class for creating random numbers."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 379,
    "kind": "method",
    "name": "testInteger",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testInteger",
    "access": "public",
    "description": "Test if each element of the matrix is integer.\n- 1 if true, 0 if false.\n- Use `isInteger` if you want to test first element.",
    "lineNumber": 2707,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    }
  },
  {
    "__docId__": 380,
    "kind": "method",
    "name": "testComplexInteger",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testComplexInteger",
    "access": "public",
    "description": "Test if each element of the matrix is complex integer.\n- 1 if true, 0 if false.\n- Use `isComplexInteger` if you want to test first element.",
    "lineNumber": 2720,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    }
  },
  {
    "__docId__": 381,
    "kind": "method",
    "name": "testZero",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testZero",
    "access": "public",
    "description": "real(this) === 0\n- 1 if true, 0 if false.\n- Use `isZero` if you want to test first element.\n- Use `isZeros` to check for a zero matrix.",
    "lineNumber": 2734,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    }
  },
  {
    "__docId__": 382,
    "kind": "method",
    "name": "testOne",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testOne",
    "access": "public",
    "description": "real(this) === 1\n- 1 if true, 0 if false.\n- Use `isOne` if you want to test first element.",
    "lineNumber": 2747,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    }
  },
  {
    "__docId__": 383,
    "kind": "method",
    "name": "testComplex",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testComplex",
    "access": "public",
    "description": "Test if each element of the matrix is complex.\n- 1 if true, 0 if false.\n- Use `isComplex` to test whether a matrix contains complex numbers.",
    "lineNumber": 2760,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    }
  },
  {
    "__docId__": 384,
    "kind": "method",
    "name": "testReal",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testReal",
    "access": "public",
    "description": "Test if each element of the matrix is real.\n- 1 if true, 0 if false.\n- Use `isReal` to test for complex numbers in matrices.",
    "lineNumber": 2773,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    }
  },
  {
    "__docId__": 385,
    "kind": "method",
    "name": "testNaN",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testNaN",
    "access": "public",
    "description": "Test if each element of the matrix is NaN.\n- 1 if true, 0 if false.\n- Use `isNaN` if you want to test first element.",
    "lineNumber": 2785,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    },
    "params": []
  },
  {
    "__docId__": 386,
    "kind": "method",
    "name": "testPositive",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testPositive",
    "access": "public",
    "description": "real(this) > 0\n- 1 if true, 0 if false.\n- Use `isPositive` if you want to test first element.",
    "lineNumber": 2797,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    },
    "params": []
  },
  {
    "__docId__": 387,
    "kind": "method",
    "name": "testNegative",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testNegative",
    "access": "public",
    "description": "real(this) < 0\n- 1 if true, 0 if false.\n- Use `isNegative` if you want to test first element.",
    "lineNumber": 2809,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    },
    "params": []
  },
  {
    "__docId__": 388,
    "kind": "method",
    "name": "testNotNegative",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testNotNegative",
    "access": "public",
    "description": "real(this) >= 0\n- 1 if true, 0 if false.\n- Use `isNotNegative` if you want to test first element.",
    "lineNumber": 2821,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    },
    "params": []
  },
  {
    "__docId__": 389,
    "kind": "method",
    "name": "testPositiveInfinity",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testPositiveInfinity",
    "access": "public",
    "description": "Test if each element of the matrix is positive infinite.\n- 1 if true, 0 if false.\n- Use `isPositiveInfinity` if you want to test first element.",
    "lineNumber": 2833,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    },
    "params": []
  },
  {
    "__docId__": 390,
    "kind": "method",
    "name": "testNegativeInfinity",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testNegativeInfinity",
    "access": "public",
    "description": "Test if each element of the matrix is negative infinite.\n- 1 if true, 0 if false.\n- Use `isNegativeInfinity` if you want to test first element.",
    "lineNumber": 2845,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    },
    "params": []
  },
  {
    "__docId__": 391,
    "kind": "method",
    "name": "testInfinite",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testInfinite",
    "access": "public",
    "description": "Test if each element of the matrix is infinite.\n- 1 if true, 0 if false.\n- Use `isInfinite` if you want to test first element.",
    "lineNumber": 2857,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    },
    "params": []
  },
  {
    "__docId__": 392,
    "kind": "method",
    "name": "testFinite",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testFinite",
    "access": "public",
    "description": "Test if each element of the matrix is finite.\n- 1 if true, 0 if false.\n- Use `isFinite` if you want to test first element.",
    "lineNumber": 2869,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    },
    "params": []
  },
  {
    "__docId__": 393,
    "kind": "method",
    "name": "isZero",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isZero",
    "access": "public",
    "description": "this === 0\n- Use only the first element.\n- Use `testZero` if you want to test the elements of a matrix.\n- Use `isZeros` to check for a zero matrix.",
    "lineNumber": 2888,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 394,
    "kind": "method",
    "name": "isOne",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isOne",
    "access": "public",
    "description": "this === 1\n- Use only the first element.\n- Use `testOne` if you want to test the elements of a matrix.",
    "lineNumber": 2899,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 395,
    "kind": "method",
    "name": "isPositive",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isPositive",
    "access": "public",
    "description": "this > 0\n- Use only the first element.\n- Use `testPositive` if you want to test the elements of a matrix.",
    "lineNumber": 2909,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 396,
    "kind": "method",
    "name": "isNegative",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isNegative",
    "access": "public",
    "description": "this < 0\n- Use only the first element.\n- Use `testNegative` if you want to test the elements of a matrix.",
    "lineNumber": 2919,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 397,
    "kind": "method",
    "name": "isNotNegative",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isNotNegative",
    "access": "public",
    "description": "this >= 0\n- Use only the first element.\n- Use `testNotNegative` if you want to test the elements of a matrix.",
    "lineNumber": 2929,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 398,
    "kind": "method",
    "name": "isNaN",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isNaN",
    "access": "public",
    "description": "this === NaN\n- Use only the first element.\n- Use `testNaN` if you want to test the elements of a matrix.",
    "lineNumber": 2939,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isNaN(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isNaN(A)"
    },
    "params": []
  },
  {
    "__docId__": 399,
    "kind": "method",
    "name": "isPositiveInfinity",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isPositiveInfinity",
    "access": "public",
    "description": "this === Infinity\n- Use only the first element.\n- Use `testPositiveInfinity` if you want to test the elements of a matrix.",
    "lineNumber": 2949,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isPositiveInfinity(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isPositiveInfinity(A)"
    },
    "params": []
  },
  {
    "__docId__": 400,
    "kind": "method",
    "name": "isNegativeInfinity",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isNegativeInfinity",
    "access": "public",
    "description": "this === -Infinity\n- Use only the first element.\n- Use `testNegativeInfinity` if you want to test the elements of a matrix.",
    "lineNumber": 2959,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isNegativeInfinity(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isNegativeInfinity(A)"
    },
    "params": []
  },
  {
    "__docId__": 401,
    "kind": "method",
    "name": "isInfinite",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isInfinite",
    "access": "public",
    "description": "this === Infinity or -Infinity\n- Use only the first element.\n- Use `testInfinite` if you want to test the elements of a matrix.",
    "lineNumber": 2969,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isPositiveInfinity(A) || isNegativeInfinity(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isPositiveInfinity(A) || isNegativeInfinity(A)"
    },
    "params": []
  },
  {
    "__docId__": 402,
    "kind": "method",
    "name": "isFinite",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isFinite",
    "access": "public",
    "description": "Return true if the value is finite number.\n- Use only the first element.\n- Use `testFinite` if you want to test the elements of a matrix.",
    "lineNumber": 2979,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} !isNaN(A) && !isInfinite(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "!isNaN(A) && !isInfinite(A)"
    },
    "params": []
  },
  {
    "__docId__": 403,
    "kind": "method",
    "name": "isInteger",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isInteger",
    "access": "public",
    "description": "Return true if the value is integer.\n- Use only the first element.\n- Use `testFinite` if you want to test the elements of a matrix.",
    "lineNumber": 2990,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 404,
    "kind": "method",
    "name": "isComplexInteger",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isComplexInteger",
    "access": "public",
    "description": "Returns true if the vallue is complex integer (including normal integer).\n- Use only the first element.\n- Use `testFinite` if you want to test the elements of a matrix.",
    "lineNumber": 3001,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} real(A) === integer && imag(A) === integer"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "real(A) === integer && imag(A) === integer"
    }
  },
  {
    "__docId__": 405,
    "kind": "method",
    "name": "_rot90",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#_rot90",
    "access": "private",
    "description": "Rotate matrix 90 degrees clockwise. (mutable)",
    "lineNumber": 3018,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "rot_90_count",
        "description": "Number of times rotated by 90 degrees."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 408,
    "kind": "method",
    "name": "rot90",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#rot90",
    "access": "public",
    "description": "Rotate matrix 90 degrees clockwise.",
    "lineNumber": 3085,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "rot_90_count",
        "description": "Number of times rotated by 90 degrees."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "_resize",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#_resize",
    "access": "private",
    "description": "Change the size of the matrix. (mutable)\nInitialized with 0 when expanding.",
    "lineNumber": 3097,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "new_row_length",
        "description": "Number of rows of matrix to resize."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "new_column_length",
        "description": "Number of columns of matrix to resize."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 412,
    "kind": "method",
    "name": "resize",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#resize",
    "access": "public",
    "description": "Change the size of the matrix.\nInitialized with 0 when expanding.",
    "lineNumber": 3142,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "row_length",
        "description": "Number of rows of matrix to resize."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "column_length",
        "description": "Number of columns of matrix to resize."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 413,
    "kind": "method",
    "name": "_deleteRow",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#_deleteRow",
    "access": "private",
    "description": "Remove the row in this matrix. (mutable)",
    "lineNumber": 3152,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "delete_row_index",
        "description": "Number of row of matrix to delete."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 414,
    "kind": "method",
    "name": "_deleteColumn",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#_deleteColumn",
    "access": "private",
    "description": "Remove the column in this matrix. (mutable)",
    "lineNumber": 3169,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "delete_column_index",
        "description": "Number of column of matrix to delete."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 415,
    "kind": "method",
    "name": "deleteRow",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#deleteRow",
    "access": "public",
    "description": "Remove the row in this matrix.",
    "lineNumber": 3187,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "delete_row_index",
        "description": "Number of row of matrix to delete."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 416,
    "kind": "method",
    "name": "deleteColumn",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#deleteColumn",
    "access": "public",
    "description": "Remove the column in this matrix.",
    "lineNumber": 3196,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "delete_column_index",
        "description": "Number of column of matrix to delete."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 417,
    "kind": "method",
    "name": "_exchangeRow",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#_exchangeRow",
    "access": "private",
    "description": "Swap rows in the matrix. (mutable)",
    "lineNumber": 3207,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_row_index1",
        "description": "Number 1 of row of matrix to exchange."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_row_index2",
        "description": "Number 2 of row of matrix to exchange."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "_exchangeColumn",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#_exchangeColumn",
    "access": "private",
    "description": "Swap columns in the matrix. (mutable)",
    "lineNumber": 3230,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_column_index1",
        "description": "Number 1 of column of matrix to exchange."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_column_index2",
        "description": "Number 2 of column of matrix to exchange."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 419,
    "kind": "method",
    "name": "exchangeRow",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#exchangeRow",
    "access": "public",
    "description": "Swap rows in the matrix.",
    "lineNumber": 3254,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_row_index1",
        "description": "Number 1 of row of matrix to exchange."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_row_index2",
        "description": "Number 2 of row of matrix to exchange."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 420,
    "kind": "method",
    "name": "exchangeColumn",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#exchangeColumn",
    "access": "public",
    "description": "Swap columns in the matrix.",
    "lineNumber": 3264,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_column_index1",
        "description": "Number 1 of column of matrix to exchange."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_column_index2",
        "description": "Number 2 of column of matrix to exchange."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 421,
    "kind": "method",
    "name": "_concatRight",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#_concatRight",
    "access": "private",
    "description": "Combine matrix to the right of this matrix. (mutable)",
    "lineNumber": 3274,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "left_matrix",
        "description": "Matrix to combine."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 423,
    "kind": "method",
    "name": "_concatBottom",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#_concatBottom",
    "access": "private",
    "description": "Combine matrix to the bottom of this matrix. (mutable)",
    "lineNumber": 3295,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "bottom_matrix",
        "description": "Matrix to combine."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 425,
    "kind": "method",
    "name": "concatRight",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#concatRight",
    "access": "public",
    "description": "Combine matrix to the right of this matrix.",
    "lineNumber": 3313,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "left_matrix",
        "description": "Matrix to combine."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 426,
    "kind": "method",
    "name": "concatBottom",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#concatBottom",
    "access": "public",
    "description": "Combine matrix to the bottom of this matrix.",
    "lineNumber": 3322,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "bottom_matrix",
        "description": "Matrix to combine."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 427,
    "kind": "method",
    "name": "clip",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#clip",
    "access": "public",
    "description": "Clip each element of matrix to specified range.",
    "lineNumber": 3332,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} min(max(x, min), max)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "min(max(x, min), max)"
    }
  },
  {
    "__docId__": 428,
    "kind": "method",
    "name": "arange",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.arange",
    "access": "public",
    "description": "Create row vector with specified initial value, step value, end condition.",
    "lineNumber": 3353,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "start_or_stop",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "stop",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "step",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 429,
    "kind": "method",
    "name": "circshift",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#circshift",
    "access": "public",
    "description": "Circular shift.",
    "lineNumber": 3366,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "shift_size",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "roll",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#roll",
    "access": "public",
    "description": "Circular shift.",
    "lineNumber": 3393,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "shift_size",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 431,
    "kind": "method",
    "name": "reshape",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#reshape",
    "access": "public",
    "description": "Change the shape of the matrix.\nThe number of elements in the matrix doesn't increase or decrease.",
    "lineNumber": 3404,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "row_length",
        "description": "Number of rows of matrix to reshape."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "column_length",
        "description": "Number of columns of matrix to reshape."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 432,
    "kind": "method",
    "name": "fliplr",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#fliplr",
    "access": "public",
    "description": "Flip this matrix left and right.",
    "lineNumber": 3434,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    },
    "params": []
  },
  {
    "__docId__": 433,
    "kind": "method",
    "name": "flipud",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#flipud",
    "access": "public",
    "description": "Flip this matrix up and down.",
    "lineNumber": 3442,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    },
    "params": []
  },
  {
    "__docId__": 434,
    "kind": "method",
    "name": "flip",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#flip",
    "access": "public",
    "description": "Flip this matrix.",
    "lineNumber": 3451,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 435,
    "kind": "method",
    "name": "indexsort",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#indexsort",
    "access": "public",
    "description": "Index sort.\n- Sorts by row when setting index by row vector to the argument.\n- Sorts by column when setting index by column vector to the argument.",
    "lineNumber": 3474,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "Vector with index. (See the description of this function)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 436,
    "kind": "method",
    "name": "transpose",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#transpose",
    "access": "public",
    "description": "Transpose a matrix.",
    "lineNumber": 3578,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^T"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^T"
    },
    "params": []
  },
  {
    "__docId__": 437,
    "kind": "method",
    "name": "ctranspose",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#ctranspose",
    "access": "public",
    "description": "Hermitian transpose.",
    "lineNumber": 3593,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^T"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^T"
    },
    "params": []
  },
  {
    "__docId__": 438,
    "kind": "method",
    "name": "T",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#T",
    "access": "public",
    "description": "Hermitian transpose.",
    "lineNumber": 3601,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^T"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^T"
    },
    "params": []
  },
  {
    "__docId__": 439,
    "kind": "method",
    "name": "inner",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#inner",
    "access": "public",
    "description": "Inner product/Dot product.",
    "lineNumber": 3611,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A・B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "dimension",
        "description": "Dimension of matrix used for calculation. (1 or 2)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A・B"
    }
  },
  {
    "__docId__": 440,
    "kind": "method",
    "name": "lup",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#lup",
    "access": "public",
    "description": "LUP decomposition.\n- P'*L*U=A\n- P is permutation matrix.\n- L is lower triangular matrix.\n- U is upper triangular matrix.",
    "lineNumber": 3623,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{P: Matrix, L: Matrix, U: Matrix}} {L, U, P}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{P: Matrix, L: Matrix, U: Matrix}"
      ],
      "spread": false,
      "description": "{L, U, P}"
    },
    "params": []
  },
  {
    "__docId__": 441,
    "kind": "method",
    "name": "lu",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#lu",
    "access": "public",
    "description": "LU decomposition.\n- L*U=A\n- L is lower triangular matrix.\n- U is upper triangular matrix.",
    "lineNumber": 3634,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{L: Matrix, U: Matrix}} {L, U}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{L: Matrix, U: Matrix}"
      ],
      "spread": false,
      "description": "{L, U}"
    },
    "params": []
  },
  {
    "__docId__": 442,
    "kind": "method",
    "name": "linsolve",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#linsolve",
    "access": "public",
    "description": "Solving a system of linear equations to be Ax = B",
    "lineNumber": 3643,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} x"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "B"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "x"
    }
  },
  {
    "__docId__": 443,
    "kind": "method",
    "name": "qr",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#qr",
    "access": "public",
    "description": "QR decomposition.\n- Q*R=A\n- Q is orthonormal matrix.\n- R is upper triangular matrix.",
    "lineNumber": 3654,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{Q: Matrix, R: Matrix}} {Q, R}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{Q: Matrix, R: Matrix}"
      ],
      "spread": false,
      "description": "{Q, R}"
    },
    "params": []
  },
  {
    "__docId__": 444,
    "kind": "method",
    "name": "tridiagonalize",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#tridiagonalize",
    "access": "public",
    "description": "Tridiagonalization of symmetric matrix.\n- Don't support complex numbers.\n- P*H*P'=A\n- P is orthonormal matrix.\n- H is tridiagonal matrix.\n- The eigenvalues of H match the eigenvalues of A.",
    "lineNumber": 3667,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{P: Matrix, H: Matrix}} {P, H}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{P: Matrix, H: Matrix}"
      ],
      "spread": false,
      "description": "{P, H}"
    },
    "params": []
  },
  {
    "__docId__": 445,
    "kind": "method",
    "name": "eig",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#eig",
    "access": "public",
    "description": "Eigendecomposition of symmetric matrix.\n- Don't support complex numbers.\n- V*D*V'=A.\n- V is orthonormal matrix. and columns of V are the right eigenvectors.\n- D is a matrix containing the eigenvalues on the diagonal component.",
    "lineNumber": 3679,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{V: Matrix, D: Matrix}} {D, V}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{V: Matrix, D: Matrix}"
      ],
      "spread": false,
      "description": "{D, V}"
    },
    "params": []
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "svd",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#svd",
    "access": "public",
    "description": "Singular Value Decomposition (SVD).\n- U*S*V'=A\n- U and V are orthonormal matrices.\n- S is a matrix with singular values in the diagonal.",
    "lineNumber": 3690,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{U: Matrix, S: Matrix, V: Matrix}} U*S*V'=A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{U: Matrix, S: Matrix, V: Matrix}"
      ],
      "spread": false,
      "description": "U*S*V'=A"
    },
    "params": []
  },
  {
    "__docId__": 447,
    "kind": "method",
    "name": "pinv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#pinv",
    "access": "public",
    "description": "Pseudo-inverse matrix.",
    "lineNumber": 3698,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^+"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^+"
    },
    "params": []
  },
  {
    "__docId__": 448,
    "kind": "method",
    "name": "gammaln",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#gammaln",
    "access": "public",
    "description": "Log-gamma function.\n- Calculate from real values.",
    "lineNumber": 3711,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 449,
    "kind": "method",
    "name": "gamma",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#gamma",
    "access": "public",
    "description": "Gamma function.\n- Calculate from real values.",
    "lineNumber": 3722,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 450,
    "kind": "method",
    "name": "gammainc",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#gammainc",
    "access": "public",
    "description": "Incomplete gamma function.\n- Calculate from real values.",
    "lineNumber": 3735,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower (default) , \"upper\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 451,
    "kind": "method",
    "name": "gampdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#gampdf",
    "access": "public",
    "description": "Probability density function (PDF) of the gamma distribution.\n- Calculate from real values.",
    "lineNumber": 3749,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 452,
    "kind": "method",
    "name": "gamcdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#gamcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of gamma distribution.\n- Calculate from real values.",
    "lineNumber": 3764,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 453,
    "kind": "method",
    "name": "gaminv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#gaminv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of gamma distribution.\n- Calculate from real values.",
    "lineNumber": 3779,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 454,
    "kind": "method",
    "name": "beta",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#beta",
    "access": "public",
    "description": "Beta function.\n- Calculate from real values.",
    "lineNumber": 3793,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "betainc",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#betainc",
    "access": "public",
    "description": "Incomplete beta function.\n- Calculate from real values.",
    "lineNumber": 3808,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower (default) , \"upper\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 456,
    "kind": "method",
    "name": "betacdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#betacdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of beta distribution.\n- Calculate from real values.",
    "lineNumber": 3823,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 457,
    "kind": "method",
    "name": "betapdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#betapdf",
    "access": "public",
    "description": "Probability density function (PDF) of beta distribution.\n- Calculate from real values.",
    "lineNumber": 3838,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 458,
    "kind": "method",
    "name": "betainv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#betainv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of beta distribution.\n- Calculate from real values.",
    "lineNumber": 3853,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 459,
    "kind": "method",
    "name": "factorial",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#factorial",
    "access": "public",
    "description": "Factorial function, x!.\n- Calculate from real values.",
    "lineNumber": 3866,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 460,
    "kind": "method",
    "name": "nchoosek",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#nchoosek",
    "access": "public",
    "description": "Binomial coefficient, number of all combinations, nCk.\n- Calculate from real values.",
    "lineNumber": 3878,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 461,
    "kind": "method",
    "name": "erf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#erf",
    "access": "public",
    "description": "Error function.\n- Calculate from real values.",
    "lineNumber": 3890,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 462,
    "kind": "method",
    "name": "erfc",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#erfc",
    "access": "public",
    "description": "Complementary error function.\n- Calculate from real values.",
    "lineNumber": 3901,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 463,
    "kind": "method",
    "name": "erfinv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#erfinv",
    "access": "public",
    "description": "Inverse function of Error function.\n- Calculate from real values.",
    "lineNumber": 3912,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 464,
    "kind": "method",
    "name": "erfcinv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#erfcinv",
    "access": "public",
    "description": "Inverse function of Complementary error function.\n- Calculate from real values.",
    "lineNumber": 3923,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 465,
    "kind": "method",
    "name": "normpdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#normpdf",
    "access": "public",
    "description": "Probability density function (PDF) of normal distribution.\n- Calculate from real values.",
    "lineNumber": 3936,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 466,
    "kind": "method",
    "name": "normcdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#normcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of normal distribution.\n- Calculate from real values.",
    "lineNumber": 3951,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 467,
    "kind": "method",
    "name": "norminv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#norminv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of normal distribution.\n- Calculate from real values.",
    "lineNumber": 3966,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 468,
    "kind": "method",
    "name": "binopdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#binopdf",
    "access": "public",
    "description": "Probability density function (PDF) of binomial distribution.\n- Calculate from real values.",
    "lineNumber": 3981,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 469,
    "kind": "method",
    "name": "binocdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#binocdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of binomial distribution.\n- Calculate from real values.",
    "lineNumber": 3997,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower (default) , \"upper\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 470,
    "kind": "method",
    "name": "binoinv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#binoinv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of binomial distribution.\n- Calculate from real values.",
    "lineNumber": 4012,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 471,
    "kind": "method",
    "name": "poisspdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#poisspdf",
    "access": "public",
    "description": "Probability density function (PDF) of Poisson distribution.\n- Calculate from real values.",
    "lineNumber": 4026,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "lambda",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 472,
    "kind": "method",
    "name": "poisscdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#poisscdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of Poisson distribution.\n- Calculate from real values.",
    "lineNumber": 4039,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "lambda",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 473,
    "kind": "method",
    "name": "poissinv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#poissinv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of Poisson distribution.\n- Calculate from real values.",
    "lineNumber": 4052,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "lambda",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 474,
    "kind": "method",
    "name": "tpdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#tpdf",
    "access": "public",
    "description": "Probability density function (PDF) of Student's t-distribution.\n- Calculate from real values.",
    "lineNumber": 4065,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 475,
    "kind": "method",
    "name": "tcdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#tcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of Student's t-distribution.\n- Calculate from real values.",
    "lineNumber": 4078,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 476,
    "kind": "method",
    "name": "tinv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#tinv",
    "access": "public",
    "description": "Inverse of cumulative distribution function (CDF) of Student's t-distribution.\n- Calculate from real values.",
    "lineNumber": 4091,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 477,
    "kind": "method",
    "name": "tdist",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#tdist",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of Student's t-distribution that can specify tail.\n- Calculate from real values.",
    "lineNumber": 4105,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "tails",
        "description": "Tail. (1 = the one-tailed distribution, 2 =  the two-tailed distribution.)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 478,
    "kind": "method",
    "name": "tinv2",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#tinv2",
    "access": "public",
    "description": "Inverse of cumulative distribution function (CDF) of Student's t-distribution in two-sided test.\n- Calculate from real values.",
    "lineNumber": 4119,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 479,
    "kind": "method",
    "name": "chi2pdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#chi2pdf",
    "access": "public",
    "description": "Probability density function (PDF) of chi-square distribution.\n- Calculate from real values.",
    "lineNumber": 4132,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 480,
    "kind": "method",
    "name": "chi2cdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#chi2cdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of chi-square distribution.\n- Calculate from real values.",
    "lineNumber": 4145,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 481,
    "kind": "method",
    "name": "chi2inv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#chi2inv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of chi-square distribution.\n- Calculate from real values.",
    "lineNumber": 4158,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 482,
    "kind": "method",
    "name": "fpdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#fpdf",
    "access": "public",
    "description": "Probability density function (PDF) of F-distribution.\n- Calculate from real values.",
    "lineNumber": 4172,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 483,
    "kind": "method",
    "name": "fcdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#fcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of F-distribution.\n- Calculate from real values.",
    "lineNumber": 4187,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 484,
    "kind": "method",
    "name": "finv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#finv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of F-distribution.\n- Calculate from real values.",
    "lineNumber": 4202,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 485,
    "kind": "method",
    "name": "and",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#and",
    "access": "public",
    "description": "Logical AND.\n- Calculated as an integer.",
    "lineNumber": 4220,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A & B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A & B"
    }
  },
  {
    "__docId__": 486,
    "kind": "method",
    "name": "or",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#or",
    "access": "public",
    "description": "Logical OR.\n- Calculated as an integer.",
    "lineNumber": 4232,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A | B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A | B"
    }
  },
  {
    "__docId__": 487,
    "kind": "method",
    "name": "xor",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#xor",
    "access": "public",
    "description": "Logical Exclusive-OR.\n- Calculated as an integer.",
    "lineNumber": 4244,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A ^ B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A ^ B"
    }
  },
  {
    "__docId__": 488,
    "kind": "method",
    "name": "not",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#not",
    "access": "public",
    "description": "Logical Not. (mutable)\n- Calculated as an integer.",
    "lineNumber": 4255,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} !A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "!A"
    },
    "params": []
  },
  {
    "__docId__": 489,
    "kind": "method",
    "name": "shift",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#shift",
    "access": "public",
    "description": "this << n\n- Calculated as an integer.",
    "lineNumber": 4267,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A << n"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A << n"
    }
  },
  {
    "__docId__": 490,
    "kind": "method",
    "name": "scaleByPowerOfTen",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#scaleByPowerOfTen",
    "access": "public",
    "description": "Multiply a multiple of ten.",
    "lineNumber": 4282,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} x * 10^n"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "x * 10^n"
    }
  },
  {
    "__docId__": 491,
    "kind": "method",
    "name": "max",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#max",
    "access": "public",
    "description": "Maximum number.",
    "lineNumber": 4297,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} max([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "max([A, B])"
    }
  },
  {
    "__docId__": 492,
    "kind": "method",
    "name": "min",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#min",
    "access": "public",
    "description": "Minimum number.",
    "lineNumber": 4306,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} min([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "min([A, B])"
    }
  },
  {
    "__docId__": 493,
    "kind": "method",
    "name": "sum",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#sum",
    "access": "public",
    "description": "Sum.",
    "lineNumber": 4315,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 494,
    "kind": "method",
    "name": "mean",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#mean",
    "access": "public",
    "description": "Arithmetic average.",
    "lineNumber": 4324,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 495,
    "kind": "method",
    "name": "prod",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#prod",
    "access": "public",
    "description": "Product of array elements.",
    "lineNumber": 4333,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 496,
    "kind": "method",
    "name": "geomean",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#geomean",
    "access": "public",
    "description": "Geometric mean.",
    "lineNumber": 4342,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 497,
    "kind": "method",
    "name": "median",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#median",
    "access": "public",
    "description": "Median.",
    "lineNumber": 4351,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 498,
    "kind": "method",
    "name": "mode",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#mode",
    "access": "public",
    "description": "Mode.",
    "lineNumber": 4360,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 499,
    "kind": "method",
    "name": "moment",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#moment",
    "access": "public",
    "description": "Moment.\n- Moment of order n. Equivalent to the definition of variance at 2.",
    "lineNumber": 4371,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "nth_order",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 500,
    "kind": "method",
    "name": "variance",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#variance",
    "access": "public",
    "description": "Variance.",
    "lineNumber": 4380,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 501,
    "kind": "method",
    "name": "std",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#std",
    "access": "public",
    "description": "Standard deviation.",
    "lineNumber": 4389,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 502,
    "kind": "method",
    "name": "mad",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#mad",
    "access": "public",
    "description": "Mean absolute deviation.\n- The \"algorithm\" can choose \"0/mean\"(default) and \"1/median\".",
    "lineNumber": 4400,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "string",
          "?number"
        ],
        "spread": false,
        "optional": true,
        "name": "algorithm",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 503,
    "kind": "method",
    "name": "skewness",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#skewness",
    "access": "public",
    "description": "Skewness.",
    "lineNumber": 4409,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 504,
    "kind": "method",
    "name": "cov",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#cov",
    "access": "public",
    "description": "Covariance matrix or Covariance value.\n- Get a variance-covariance matrix from 1 matrix.\n- Get a covariance from 2 vectors.",
    "lineNumber": 4421,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings",
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "y_or_type",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 505,
    "kind": "method",
    "name": "standardization",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#standardization",
    "access": "public",
    "description": "The samples are standardize to a mean value of 0, standard deviation of 1.",
    "lineNumber": 4430,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 506,
    "kind": "method",
    "name": "corrcoef",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#corrcoef",
    "access": "public",
    "description": "Correlation matrix or Correlation coefficient.\n- Get a correlation matrix from 1 matrix.\n- Get a correlation coefficient from 2 vectors.",
    "lineNumber": 4442,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings",
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "y_or_type",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 507,
    "kind": "method",
    "name": "sort",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#sort",
    "access": "public",
    "description": "Sort.\n- The \"order\" can choose \"ascend\"(default) and \"descend\".",
    "lineNumber": 4453,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "order",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 508,
    "kind": "method",
    "name": "signum",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#signum",
    "access": "public",
    "description": "The positive or negative sign of this number.\n- +1 if positive, -1 if negative, 0 if 0.",
    "lineNumber": 4466,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 509,
    "kind": "method",
    "name": "subtract",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#subtract",
    "access": "public",
    "description": "Subtract.",
    "lineNumber": 4475,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A - B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A - B"
    }
  },
  {
    "__docId__": 510,
    "kind": "method",
    "name": "multiply",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#multiply",
    "access": "public",
    "description": "Multiply.",
    "lineNumber": 4484,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A * B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A * B"
    }
  },
  {
    "__docId__": 511,
    "kind": "method",
    "name": "divide",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#divide",
    "access": "public",
    "description": "Divide.",
    "lineNumber": 4493,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} fix(A / B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "fix(A / B)"
    }
  },
  {
    "__docId__": 512,
    "kind": "method",
    "name": "remainder",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#remainder",
    "access": "public",
    "description": "Remainder of division.\n- Result has same sign as the Dividend.",
    "lineNumber": 4503,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A % B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A % B"
    }
  },
  {
    "__docId__": 513,
    "kind": "method",
    "name": "trunc",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#trunc",
    "access": "public",
    "description": "To integer rounded down to the nearest.",
    "lineNumber": 4511,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} fix(A), trunc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "fix(A), trunc(A)"
    },
    "params": []
  },
  {
    "__docId__": 514,
    "kind": "method",
    "name": "isMatrixData",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isMatrixData",
    "access": "private",
    "description": "",
    "lineNumber": 4519,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true"
    },
    "params": []
  },
  {
    "__docId__": 515,
    "kind": "file",
    "name": "src/math/core/tools/LinearAlgebra.js",
    "content": "﻿/**\n * The script is part of konpeitoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport Random from \"./Random.js\";\nimport Complex from \"../Complex.js\";\nimport Matrix from \"../Matrix.js\";\n\n/**\n * Collection of functions for linear algebra.\n * @ignore\n */\nclass LinearAlgebraTool {\n\n\t/**\n\t * Tridiagonalization of symmetric matrix.\n\t * - Don't support complex numbers.\n\t * - P*H*P'=A\n\t * - P is orthonormal matrix.\n\t * - H is tridiagonal matrix.\n\t * - The eigenvalues of H match the eigenvalues of A.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat\n\t * @returns {{P: Matrix, H: Matrix}}\n\t */\n\tstatic tridiagonalize(mat) {\n\n\t\tconst A = Matrix._toMatrix(mat);\n\t\tconst a = A.getNumberMatrixArray();\n\t\tconst tolerance_ = 1.0e-10;\n\n\t\t// 参考：奥村晴彦 (1991). C言語による最新アルゴリズム事典.\n\t\t// 3重対角化の成分を取得する\n\t\t\n\t\t/**\n\t\t * Inner product of vector x1 and vector x2.\n\t\t * @param {Array<number>} x1\n\t\t * @param {Array<number>} x2\n\t\t * @param {number} [index_offset=0] - Offset of the position of the vector to be calculated.\n\t\t * @param {number} [index_max=x1.length] - Maximum value of position of vector to be calculated (do not include this value).\n\t\t * @returns {number} \n\t\t */\n\t\tconst innerproduct = function(x1, x2, index_offset, index_max) {\n\t\t\tlet y = 0;\n\t\t\tconst ioffset = index_offset ? index_offset : 0;\n\t\t\tconst imax = index_max ? index_max : x1.length;\n\t\t\tfor(let i = ioffset; i < imax; i++) {\n\t\t\t\ty += x1[i] * x2[i];\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\n\t\t/**\n\t\t * Householder transformation.\n\t\t * @param {Array<number>} x\n\t\t * @param {number} [index_offset=0] - Offset of the position of the vector to be calculated.\n\t\t * @param {number} [index_max=x.length] - Maximum value of position of vector to be calculated (do not include this value).\n\t\t * @returns {{y1: number, v: Array<number>}} \n\t\t */\n\t\tconst house = function(x, index_offset, index_max) {\n\t\t\tconst ioffset = index_offset ? index_offset : 0;\n\t\t\tconst imax = index_max ? index_max : x.length;\n\t\t\t// xの内積の平方根（ノルム）を計算\n\t\t\tlet y1 = Math.sqrt(innerproduct(x, x, ioffset, imax));\n\t\t\tconst v = [];\n\t\t\tif(Math.abs(y1) >= tolerance_) {\n\t\t\t\tif(x[ioffset] < 0) {\n\t\t\t\t\ty1 = - y1;\n\t\t\t\t}\n\t\t\t\tlet t;\n\t\t\t\tfor(let i = ioffset, j = 0; i < imax; i++, j++) {\n\t\t\t\t\tif(i === ioffset) {\n\t\t\t\t\t\tv[j] = x[i] + y1;\n\t\t\t\t\t\tt = 1.0 / Math.sqrt(v[j] * y1);\n\t\t\t\t\t\tv[j] = v[j] * t;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tv[j] = x[i] * t;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\ty1: - y1,\t// 鏡像の1番目の要素(y2,y3,...は0)\n\t\t\t\tv : v\t\t// 直行する単位ベクトル vT*v = 2\n\t\t\t};\n\t\t};\n\n\t\tconst n = a.length;\n\n\t\t/**\n\t\t * @type {Array<number>}\n\t\t */\n\t\tconst d = []; // 対角成分\n\t\t\n\t\t/**\n\t\t * @type {Array<number>}\n\t\t */\n\t\tconst e = []; // 隣の成分\n\t\t{\n\t\t\tfor(let k = 0; k < n - 2; k++) {\n\t\t\t\tconst v = a[k];\n\t\t\t\td[k] = v[k];\n\t\t\t\t{\n\t\t\t\t\tconst H = house(v, k + 1, n);\n\t\t\t\t\te[k] = H.y1;\n\t\t\t\t\tfor(let i = 0; i < H.v.length; i++) {\n\t\t\t\t\t\tv[k + 1 + i] = H.v[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(Math.abs(e[k]) < tolerance_) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor(let i = k + 1; i < n; i++) {\n\t\t\t\t\tlet s = 0;\n\t\t\t\t\tfor(let j = k + 1; j < i; j++) {\n\t\t\t\t\t\ts += a[j][i] * v[j];\n\t\t\t\t\t}\n\t\t\t\t\tfor(let j = i; j < n; j++) {\n\t\t\t\t\t\ts += a[i][j] * v[j];\n\t\t\t\t\t}\n\t\t\t\t\td[i] = s;\n\t\t\t\t}\n\t\t\t\tconst t = innerproduct(v, d, k + 1, n) / 2.0;\n\t\t\t\tfor(let i = n - 1; i > k; i--) {\n\t\t\t\t\tconst p = v[i];\n\t\t\t\t\tconst q = d[i] - (t * p);\n\t\t\t\t\td[i] = q;\n\t\t\t\t\tfor(let j = i; j < n; j++) {\n\t\t\t\t\t\tconst r = p * d[j] + q * v[j];\n\t\t\t\t\t\ta[i][j] = a[i][j] - r;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(n >= 2) {\n\t\t\t\td[n - 2] = a[n - 2][n - 2];\n\t\t\t\te[n - 2] = a[n - 2][n - 1];\n\t\t\t}\n\t\t\tif(n >= 1) {\n\t\t\t\td[n - 1] = a[n - 1][n - 1];\n\t\t\t}\n\t\t}\n\n\t\t//変換P行列を求める\n\t\tfor(let k = n - 1; k >= 0; k--) {\n\t\t\tconst v = a[k];\n\t\t\tif(k < n - 2) {\n\t\t\t\tfor(let i = k + 1; i < n; i++) {\n\t\t\t\t\tconst w = a[i];\n\t\t\t\t\tconst t = innerproduct(v, w, k + 1, n);\n\t\t\t\t\tfor(let j = k + 1; j < n; j++) {\n\t\t\t\t\t\tw[j] -= t * v[j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(let i = 0; i < n; i++) {\n\t\t\t\tv[i] = 0.0;\n\t\t\t}\n\t\t\tv[k] = 1.0;\n\t\t}\n\n\t\t// d と e の配列を使って、三重対角行列を作成する\n\t\tconst H = Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\tif(row === col) {\n\t\t\t\treturn new Complex(d[row]);\n\t\t\t}\n\t\t\telse if(Math.abs(row - col) === 1) {\n\t\t\t\treturn new Complex(e[Math.trunc((row + col) * 0.5)]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Complex.ZERO;\n\t\t\t}\n\t\t}, n, n);\n\n\t\treturn {\n\t\t\tP : (new Matrix(a)).T(),\n\t\t\tH : H\n\t\t};\n\t}\n\n\t/**\n\t * Eigendecomposition of symmetric matrix.\n\t * - Don't support complex numbers.\n\t * - V*D*V'=A.\n\t * - V is orthonormal matrix. and columns of V are the right eigenvectors.\n\t * - D is a matrix containing the eigenvalues on the diagonal component.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat - Symmetric matrix.\n\t * @returns {{V: Matrix, D: Matrix}}\n\t */\n\tstatic eig(mat) {\n\t\tconst A = Matrix._toMatrix(mat);\n\t\t\n\t\t// QR法により固有値を求める\n\t\tlet is_error = false;\n\t\tconst tolerance_ = 1.0e-10;\n\t\tconst PH = LinearAlgebraTool.tridiagonalize(A);\n\t\tconst a = PH.P.getNumberMatrixArray();\n\t\tconst h = PH.H.getNumberMatrixArray();\n\t\tconst n = A.row_length;\n\n\t\t// 成分の抽出\n\t\tconst d = []; // 対角成分\n\t\tconst e = []; // 隣の成分\n\t\tfor(let i = 0; i < n; i++) {\n\t\t\td[i] = h[i][i];\n\t\t\te[i] = (i === 0) ? 0.0 : h[i][i - 1];\n\t\t}\n\n\t\t// 参考：奥村晴彦 (1991). C言語による最新アルゴリズム事典.\n\t\tconst MAX_ITER = 100;\n\t\tfor(let h = n - 1; h > 0; h--) {\n\t\t\tlet j = h;\n\t\t\tfor(j = h;j >= 1; j--) {\n\t\t\t\tif(Math.abs(e[j]) <= (tolerance_ * (Math.abs(d[j - 1]) + Math.abs(d[j])))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(j == h) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet iter = 0;\n\t\t\twhile(true) {\n\t\t\t\titer++;\n\t\t\t\tif(iter > MAX_ITER) {\n\t\t\t\t\tis_error = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tlet w = (d[h - 1] - d[h]) / 2.0;\n\n\t\t\t\t/**\n\t\t\t\t * @type {number}\n\t\t\t\t */\n\t\t\t\tlet t = e[h] * e[h];\n\t\t\t\tlet s = Math.sqrt(w * w + t);\n\t\t\t\tif(w < 0) {\n\t\t\t\t\ts = - s;\n\t\t\t\t}\n\t\t\t\tlet x = d[j] - d[h] + (t / (w + s));\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * @type {number}\n\t\t\t\t */\n\t\t\t\tlet y = e[j + 1];\n\t\t\t\tfor(let k = j; k < h; k++) {\n\t\t\t\t\tlet c, s;\n\t\t\t\t\tif(Math.abs(x) >= Math.abs(y)) {\n\t\t\t\t\t\tt = - y / x;\n\t\t\t\t\t\tc = 1.0 / Math.sqrt(t * t + 1);\n\t\t\t\t\t\ts = t * c;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tt = - x / y;\n\t\t\t\t\t\ts = 1.0 / Math.sqrt(t * t + 1);\n\t\t\t\t\t\tc = t * s;\n\t\t\t\t\t}\n\t\t\t\t\tw = d[k] - d[k + 1];\n\t\t\t\t\tt = (w * s + 2.0 * c * e[k + 1]) * s;\n\t\t\t\t\td[k] -= t;\n\t\t\t\t\td[k + 1] += t;\n\t\t\t\t\tif(k > j) {\n\t\t\t\t\t\te[k] = c * e[k] - s * y;\n\t\t\t\t\t}\n\t\t\t\t\te[k + 1] += s * (c * w - 2.0 * s * e[k + 1]);\n\t\t\t\t\tfor(let i = 0; i < n; i++) {\n\t\t\t\t\t\tx = a[i][k];\n\t\t\t\t\t\ty = a[i][k + 1];\n\t\t\t\t\t\ta[i][k    ] = c * x - s * y;\n\t\t\t\t\t\ta[i][k + 1] = s * x + c * y;\n\t\t\t\t\t}\n\t\t\t\t\tif(k < h - 1) {\n\t\t\t\t\t\tx = e[k + 1];\n\t\t\t\t\t\ty = -s * e[k + 2];\n\t\t\t\t\t\te[k + 2] *= c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(Math.abs(e[h]) <= tolerance_ * (Math.abs(d[h - 1]) + Math.abs(d[h]))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(is_error) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// 固有値が大きいものから並べるソート\n\t\t/**\n\t\t * @param {Matrix} V \n\t\t * @param {Array<number>} d \n\t\t */\n\t\tconst vd_sort = function(V, d) {\n\t\t\tconst len = d.length;\n\t\t\tconst sortdata = [];\n\t\t\tfor(let i = 0; i < len; i++) {\n\t\t\t\tsortdata[i] = {\n\t\t\t\t\tsigma : d[i],\n\t\t\t\t\tindex : i\n\t\t\t\t};\n\t\t\t}\n\t\t\t/**\n\t\t\t * @param {{sigma : number}} a \n\t\t\t * @param {{sigma : number}} b \n\t\t\t */\n\t\t\tconst compare = function(a, b){\n\t\t\t\tif(a.sigma === b.sigma) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\treturn (a.sigma < b.sigma ? 1 : -1);\n\t\t\t};\n\t\t\tsortdata.sort(compare);\n\t\t\tconst MOVE = Matrix.zeros(len);\n\t\t\tconst ND = Matrix.zeros(len);\n\t\t\t\n\t\t\tfor(let i = 0; i < len; i++) {\n\t\t\t\tND.matrix_array[i][i] = new Complex(sortdata[i].sigma);\n\t\t\t\tMOVE.matrix_array[i][sortdata[i].index] = Complex.ONE;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tV : V.mul(MOVE),\n\t\t\t\tD : ND\n\t\t\t};\n\t\t};\n\n\t\tconst VD = vd_sort(new Matrix(a), d);\n\n\t\treturn VD;\n\t}\n\n\t/**\n\t * Treat matrices as vectors, make them orthonormal, and make matrices of Q and R.\n\t * The method of Gram-Schmidt orthonormalization is used.\n\t * @param {Matrix} mat - Square matrix.\n\t * @returns {{Q: Matrix, R: Matrix, non_orthogonalized : Array<number>}}\n\t */\n\tstatic doGramSchmidtOrthonormalization(mat) {\n\t\t// グラム・シュミットの正規直交化法を使用する\n\t\t// 参考：Gilbert Strang (2007). Computational Science and Engineering.\n\n\t\tconst M = Matrix._toMatrix(mat);\n\t\tconst len = M.column_length;\n\t\tconst A = M.matrix_array;\n\t\tconst Q_Matrix = Matrix.zeros(len);\n\t\tconst R_Matrix = Matrix.zeros(len);\n\t\tconst Q = Q_Matrix.matrix_array;\n\t\tconst R = R_Matrix.matrix_array;\n\t\tconst non_orthogonalized = [];\n\t\tconst a = new Array(len);\n\t\t\n\t\tfor(let col = 0; col < len; col++) {\n\t\t\t// i列目を抽出\n\t\t\tfor(let row = 0; row < len; row++) {\n\t\t\t\ta[row] = A[row][col];\n\t\t\t}\n\t\t\t// 直行ベクトルを作成\n\t\t\tif(col > 0) {\n\t\t\t\t// Rのi列目を内積で計算する\n\t\t\t\tfor(let j = 0; j < col; j++) {\n\t\t\t\t\tfor(let k = 0; k < len; k++) {\n\t\t\t\t\t\tR[j][col] = R[j][col].add(A[k][col].dot(Q[k][j]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(let j = 0; j < col; j++) {\n\t\t\t\t\tfor(let k = 0; k < len; k++) {\n\t\t\t\t\t\ta[k] = a[k].sub(R[j][col].mul(Q[k][j]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t{\n\t\t\t\t// 正規化と距離を1にする\n\t\t\t\tfor(let j = 0; j < len; j++) {\n\t\t\t\t\tR[col][col] = R[col][col].add(a[j].square());\n\t\t\t\t}\n\t\t\t\tR[col][col] = R[col][col].sqrt();\n\t\t\t\tif(R[col][col].isZero(1e-10)) {\n\t\t\t\t\t// 直行化が不可能だった列の番号をメモして、その列はゼロで埋める\n\t\t\t\t\tnon_orthogonalized.push(col);\n\t\t\t\t\tfor(let j = 0;j < len;j++) {\n\t\t\t\t\t\tQ[j][col] = Complex.ZERO;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// ここで R[i][i] === 0 の場合、直行させたベクトルaは0であり、\n\t\t\t\t\t// ランク落ちしており、計算不可能である。\n\t\t\t\t\t// 0割りした値を、j列目のQに記録していくがInfとなる。\n\t\t\t\t\tfor(let j = 0;j < len;j++) {\n\t\t\t\t\t\tQ[j][col] = a[j].div(R[col][col]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tQ : Q_Matrix,\n\t\t\tR : R_Matrix,\n\t\t\tnon_orthogonalized : non_orthogonalized\n\t\t};\n\t}\n\t\n\t/**\n\t * Create orthogonal vectors for all row vectors of the matrix.\n\t * - If the vector can not be found, it returns NULL.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat\n\t * @param {number} [tolerance=1.0e-10] - Calculation tolerance of calculation.\n\t * @returns {Matrix|null} An orthogonal vector.\n\t */\n\tstatic createOrthogonalVector(mat, tolerance) {\n\t\tconst M = new Matrix(mat);\n\t\tconst column_length = M.column_length;\n\t\tconst m = M.matrix_array;\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\t// 正則行列をなす場合に問題となる行番号を取得\n\t\tconst not_regular_rows = LinearAlgebraTool.getLinearDependenceVector(M, tolerance_);\n\t\t// 不要な行を削除する\n\t\t{\n\t\t\t// not_regular_rowsは昇順リストなので、後ろから消していく\n\t\t\tfor(let i = not_regular_rows.length - 1; i >= 0; i--) {\n\t\t\t\tm.splice(not_regular_rows[i], 1);\n\t\t\t\tM.row_length--;\n\t\t\t}\n\t\t}\n\t\t// 追加できるベクトルの数\n\t\tconst add_vectors = column_length - m.length;\n\t\tif(add_vectors <= 0) {\n\t\t\treturn null;\n\t\t}\n\t\t// ランダムベクトル（seed値は毎回同一とする）\n\t\tconst noise = new Random(0);\n\t\tlet orthogonal_matrix = null;\n\t\tfor(let i = 0; i < 100; i++) {\n\t\t\t// 直行ベクトルを作るために、いったん行と列を交換する\n\t\t\t// これは、グラム・シュミットの正規直交化法が列ごとに行う手法のため。\n\t\t\tconst M2 = M.T();\n\t\t\t// ランダム行列を作成する\n\t\t\tconst R = Matrix.createMatrixDoEachCalculation(function() {\n\t\t\t\treturn new Complex(noise.nextGaussian());\n\t\t\t}, M2.row_length, add_vectors);\n\t\t\t// 列に追加する\n\t\t\tM2._concatRight(R);\n\t\t\t// 正規直行行列を作成する\n\t\t\torthogonal_matrix = LinearAlgebraTool.doGramSchmidtOrthonormalization(M2);\n\t\t\t// 正しく作成できていたら完了\n\t\t\tif(orthogonal_matrix.non_orthogonalized.length === 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(orthogonal_matrix.non_orthogonalized.length !== 0) {\n\t\t\t// 普通は作成できないことはないが・・・\n\t\t\tconsole.log(\"miss\");\n\t\t\treturn null;\n\t\t}\n\t\t// 作成した列を切り出す\n\t\tconst y = new Array(add_vectors);\n\t\tconst q = orthogonal_matrix.Q.matrix_array;\n\t\tfor(let row = 0; row < add_vectors; row++) {\n\t\t\ty[row] = new Array(column_length);\n\t\t\tfor(let col = 0; col < column_length; col++) {\n\t\t\t\ty[row][col] = q[col][column_length - add_vectors + row];\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * Row number with the largest norm value in the specified column of the matrix.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat\n\t * @param {number} column_index - Number of column of matrix.\n\t * @param {number} [row_index_offset=0] - Offset of the position of the vector to be calculated.\n\t * @param {number} [row_index_max] - Maximum value of position of vector to be calculated (do not include this value).\n\t * @returns {{index: number, max: number}} Matrix row number.\n\t */\n\tstatic getMaxRowNumber(mat, column_index, row_index_offset, row_index_max) {\n\t\tconst M = Matrix._toMatrix(mat);\n\t\tlet row_index = 0;\n\t\tlet row_max = 0;\n\t\tlet row = row_index_offset ? row_index_offset : 0;\n\t\tconst row_imax = row_index_max ? row_index_max : M.row_length;\n\t\t// n列目で最も大きな行を取得\n\t\tfor(; row < row_imax; row++) {\n\t\t\tconst norm = M.matrix_array[row][column_index].norm();\n\t\t\tif(norm > row_max) {\n\t\t\t\trow_max = norm;\n\t\t\t\trow_index = row;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tindex : row_index,\n\t\t\tmax : row_max\n\t\t};\n\t}\n\n\t/**\n\t * Extract linearly dependent rows when each row of matrix is a vector.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat\n\t * @param {number} [tolerance=1.0e-10] - Calculation tolerance of calculation.\n\t * @returns {Array<number>} Array of matrix row numbers in ascending order.\n\t */\n\tstatic getLinearDependenceVector(mat, tolerance) {\n\t\tconst M = new Matrix(mat);\n\t\tconst m = M.matrix_array;\n\t\tconst tolerance_ = tolerance ? Matrix._toDouble(tolerance) : 1.0e-10;\n\t\t// 確認する行番号（ここから終わった行は削除していく）\n\t\tconst row_index_array = new Array(M.row_length);\n\t\tfor(let i = 0; i < M.row_length; i++) {\n\t\t\trow_index_array[i] = i;\n\t\t}\n\t\t// ガウスの消去法を使用して、行ベクトルを抽出していく\n\t\tfor(let col_target = 0; col_target < M.column_length; col_target++) {\n\t\t\tlet row_max_index = 0;\n\t\t\t{\n\t\t\t\tlet row_max = 0;\n\t\t\t\tlet row_max_key = 0;\n\t\t\t\t// n列目で絶対値が最も大きな行を取得\n\t\t\t\tfor(const row_key in row_index_array) {\n\t\t\t\t\tconst row = row_index_array[row_key];\n\t\t\t\t\tconst norm = m[row][col_target].norm();\n\t\t\t\t\tif(norm > row_max) {\n\t\t\t\t\t\trow_max = norm;\n\t\t\t\t\t\trow_max_key = parseInt(row_key, 10);\n\t\t\t\t\t\trow_max_index = row;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// 大きいのが0である＝その列は全て0である\n\t\t\t\tif(row_max <= tolerance_) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// 大きな値があった行は、リストから除去する\n\t\t\t\trow_index_array.splice(row_max_key, 1);\n\t\t\t\tif(col_target === M.column_length - 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 次の列から、大きな値があった行の成分を削除\n\t\t\tfor(const row_key in row_index_array) {\n\t\t\t\tconst row = row_index_array[row_key];\n\t\t\t\tconst inv = m[row][col_target].div(m[row_max_index][col_target]);\n\t\t\t\tfor(let col = col_target; col < M.column_length; col++) {\n\t\t\t\t\tm[row][col] = m[row][col].sub(m[row_max_index][col].mul(inv));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn row_index_array;\n\t}\n\n}\n\n/**\n * Class for linear algebra for `Matrix` class.\n * - These methods can be used in the `Matrix` method chain.\n * - This class cannot be called directly.\n */\nexport default class LinearAlgebra {\n\n\t/**\n\t * Inner product/Dot product.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} A\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} B\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} [dimension=1] - Dimension of matrix used for calculation. (1 or 2)\n\t * @returns {Matrix} A・B\n\t */\n\tstatic inner(A, B, dimension) {\n\t\tconst M1 = Matrix._toMatrix(A);\n\t\tconst M2 = Matrix._toMatrix(B);\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst dim = dimension ? Matrix._toInteger(dimension) : 1;\n\t\tif(M1.isScalar() && M2.isScalar()) {\n\t\t\treturn new Matrix(M1.scalar().dot(M2.scalar()));\n\t\t}\n\t\tif(M1.isVector() && M2.isVector()) {\n\t\t\tlet sum = Complex.ZERO;\n\t\t\tfor(let i = 0; i < M1.length(); i++) {\n\t\t\t\tsum = sum.add(M1.getComplex(i).dot(M2.getComplex(i)));\n\t\t\t}\n\t\t\treturn new Matrix(sum);\n\t\t}\n\t\tif((M1.row_length !== M2.row_length) || (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tif(dim === 1) {\n\t\t\tconst y = new Array(1);\n\t\t\ty[0] = new Array(M1.column_length);\n\t\t\tfor(let col = 0; col < M1.column_length; col++) {\n\t\t\t\tlet sum = Complex.ZERO;\n\t\t\t\tfor(let row = 0; row < M1.row_length; row++) {\n\t\t\t\t\tsum = sum.add(x1[row][col].dot(x2[row][col]));\n\t\t\t\t}\n\t\t\t\ty[0][col] = sum;\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\telse if(dim === 2) {\n\t\t\tconst y = new Array(M1.row_length);\n\t\t\tfor(let row = 0; row < M1.row_length; row++) {\n\t\t\t\tlet sum = Complex.ZERO;\n\t\t\t\tfor(let col = 0; col < M1.column_length; col++) {\n\t\t\t\t\tsum = sum.add(x1[row][col].dot(x2[row][col]));\n\t\t\t\t}\n\t\t\t\ty[row] = [sum];\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\telse {\n\t\t\tthrow \"dim\";\n\t\t}\n\t}\n\n\t/**\n\t * p-norm.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} [p=2]\n\t * @returns {number}\n\t */\n\tstatic norm(mat, p) {\n\t\tconst M = Matrix._toMatrix(mat);\n\t\tconst p_number = (p === undefined) ? 2 : Matrix._toDouble(p);\n\t\tif(p_number === 1) {\n\t\t\t// 行列の1ノルム\n\t\t\tconst y = M.matrix_array;\n\t\t\t// 行ノルムを計算する\n\t\t\tif(M.isRow()) {\n\t\t\t\tlet sum = 0.0;\n\t\t\t\tfor(let col = 0; col < M.column_length; col++) {\n\t\t\t\t\tsum += y[0][col].norm();\n\t\t\t\t}\n\t\t\t\treturn sum;\n\t\t\t}\n\t\t\t// 列ノルムを計算する\n\t\t\telse if(M.isColumn()) {\n\t\t\t\tlet sum = 0.0;\n\t\t\t\tfor(let row = 0; row < M.row_length; row++) {\n\t\t\t\t\tsum += y[row][0].norm();\n\t\t\t\t}\n\t\t\t\treturn sum;\n\t\t\t}\n\t\t\t// 列の和の最大値\n\t\t\tlet max = 0;\n\t\t\t// 列を固定して行の和を計算\n\t\t\tfor(let col = 0; col < M.column_length; col++) {\n\t\t\t\tlet sum = 0;\n\t\t\t\tfor(let row = 0; row < M.row_length; row++) {\n\t\t\t\t\tsum += y[row][col].norm();\n\t\t\t\t}\n\t\t\t\tif(max < sum) {\n\t\t\t\t\tmax = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn max;\n\t\t}\n\t\telse if(p_number === 2) {\n\t\t\t// 行列の2ノルム\n\t\t\tconst y = M.matrix_array;\n\t\t\t// 行ノルムを計算する\n\t\t\tif(M.isRow()) {\n\t\t\t\tlet sum = 0.0;\n\t\t\t\tfor(let col = 0; col < M.column_length; col++) {\n\t\t\t\t\tsum += y[0][col].square().real();\n\t\t\t\t}\n\t\t\t\treturn Math.sqrt(sum);\n\t\t\t}\n\t\t\t// 列ノルムを計算する\n\t\t\telse if(M.isColumn()) {\n\t\t\t\tlet sum = 0.0;\n\t\t\t\tfor(let row = 0; row < M.row_length; row++) {\n\t\t\t\t\tsum += y[row][0].square().real();\n\t\t\t\t}\n\t\t\t\treturn Math.sqrt(sum);\n\t\t\t}\n\t\t\treturn M.svd().S.diag().max().scalar().real();\n\t\t}\n\t\telse if((p_number === Number.POSITIVE_INFINITY) || (p_number === Number.NEGATIVE_INFINITY)) {\n\t\t\tconst y = M.matrix_array;\n\t\t\tlet compare_number = p_number === Number.POSITIVE_INFINITY ? 0 : Number.POSITIVE_INFINITY;\n\t\t\tconst compare_func = p_number === Number.POSITIVE_INFINITY ? Math.max : Math.min;\n\t\t\t// 行ノルムを計算する\n\t\t\tif(M.isRow()) {\n\t\t\t\tfor(let col = 0; col < M.column_length; col++) {\n\t\t\t\t\tcompare_number = compare_func(compare_number, y[0][col].norm());\n\t\t\t\t}\n\t\t\t\treturn compare_number;\n\t\t\t}\n\t\t\t// 列ノルムを計算する\n\t\t\tif(M.isColumn()) {\n\t\t\t\tfor(let row = 0; row < M.row_length; row++) {\n\t\t\t\t\tcompare_number = compare_func(compare_number, y[row][0].norm());\n\t\t\t\t}\n\t\t\t\treturn compare_number;\n\t\t\t}\n\t\t\t// 行列の場合は、列の和の最大値\n\t\t\tcompare_number = 0;\n\t\t\tfor(let row = 0; row < M.row_length; row++) {\n\t\t\t\tlet sum = 0.0;\n\t\t\t\tfor(let col = 0; col < M.column_length; col++) {\n\t\t\t\t\tsum += y[row][col].norm();\n\t\t\t\t}\n\t\t\t\tcompare_number = Math.max(compare_number, sum);\n\t\t\t}\n\t\t\treturn compare_number;\n\t\t}\n\t\telse if(M.isVector()) {\n\t\t\t// 一般化ベクトルpノルム\n\t\t\tlet sum = 0.0;\n\t\t\tfor(let i = 0; i < M.length(); i++) {\n\t\t\t\tsum += Math.pow(M.getComplex(i).norm(), p_number);\n\t\t\t}\n\t\t\treturn Math.pow(sum, 1.0 / p_number);\n\t\t}\n\t\t// 未実装\n\t\tthrow \"norm\";\n\t}\n\t\n\t/**\n\t * Condition number of the matrix\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} [p=2]\n\t * @returns {number}\n\t */\n\tstatic cond(mat, p) {\n\t\tconst M = Matrix._toMatrix(mat);\n\t\tconst p_number = (p === undefined) ? 2 : Matrix._toInteger(p);\n\t\tif(p_number === 2) {\n\t\t\t// 零行列は Inf\n\t\t\tif(M.isZeros()) {\n\t\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t\t}\n\t\t\t// ベクトルは1\n\t\t\tif(M.isVector()) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\t// ユニタリは1\n\t\t\tif(M.isUnitary()) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tconst s = M.svd().S.diag();\n\t\t\treturn s.max().scalar().real() / s.min().scalar().real();\n\t\t}\n\t\treturn M.norm(p) * M.pinv().norm(p);\n\t}\n\n\t/**\n\t * Inverse condition number.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat\n\t * @returns {number}\n\t */\n\tstatic rcond(mat) {\n\t\treturn 1.0 / LinearAlgebra.cond(Matrix._toMatrix(mat), 1);\n\t}\n\n\t/**\n\t * Rank.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {number} rank(A)\n\t */\n\tstatic rank(mat, tolerance) {\n\t\tconst M = Matrix._toMatrix(mat);\n\t\tconst t = tolerance !== undefined ? Matrix._toDouble(tolerance) : undefined;\n\t\t// 横が長い行列の場合\n\t\tif(M.row_length <= M.column_length) {\n\t\t\treturn Math.min(M.row_length, M.column_length) - (LinearAlgebraTool.getLinearDependenceVector(M, t)).length;\n\t\t}\n\t\telse {\n\t\t\treturn M.row_length - (LinearAlgebraTool.getLinearDependenceVector(M, t)).length;\n\t\t}\n\t}\n\n\t/**\n\t * Trace of a matrix.\n\t * Sum of diagonal elements.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat\n\t * @returns {Complex}\n\t */\n\tstatic trace(mat) {\n\t\tconst M = Matrix._toMatrix(mat);\n\t\tconst len = Math.min(M.row_length, M.column_length);\n\t\tlet sum = Complex.ZERO;\n\t\tfor(let i = 0; i < len; i++) {\n\t\t\tsum = sum.add(M.matrix_array[i][i]);\n\t\t}\n\t\treturn sum;\n\t}\n\n\t/**\n\t * Determinant.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat\n\t * @returns {Matrix} |A|\n\t */\n\tstatic det(mat) {\n\t\tconst M = Matrix._toMatrix(mat);\n\t\tif(!M.isSquare()) {\n\t\t\tthrow \"not square\";\n\t\t}\n\t\tconst len = M.length();\n\t\tif(len < 5) {\n\t\t\t/**\n\t\t\t * @param {Array<Array<Complex>>} x \n\t\t\t */\n\t\t\tconst calcDet = function(x) {\n\t\t\t\tif(x.length === 2) {\n\t\t\t\t\t// 2次元の行列式になったら、たすき掛け計算する\n\t\t\t\t\treturn x[0][0].mul(x[1][1]).sub(x[0][1].mul(x[1][0]));\n\t\t\t\t}\n\t\t\t\tlet y = Complex.ZERO;\n\t\t\t\tfor(let i = 0; i < x.length; i++) {\n\t\t\t\t\t// N次元の行列式を、N-1次元の行列式に分解していく\n\n\t\t\t\t\t/**\n\t\t\t\t\t * @type {Array<Array<Complex>>}\n\t\t\t\t\t */\n\t\t\t\t\tconst D = [];\n\t\t\t\t\tconst a = x[i][0];\n\t\t\t\t\tfor(let row = 0, D_low = 0; row < x.length; row++) {\n\t\t\t\t\t\tif(i === row) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tD[D_low] = [];\n\t\t\t\t\t\tfor(let col = 1, D_col = 0; col < x.length; col++, D_col++) {\n\t\t\t\t\t\t\tD[D_low][D_col] = x[row][col];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tD_low++;\n\t\t\t\t\t}\n\t\t\t\t\tif((i % 2) === 0) {\n\t\t\t\t\t\ty = y.add(a.mul(calcDet(D)));\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ty = y.sub(a.mul(calcDet(D)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn y;\n\t\t\t};\n\t\t\treturn new Matrix(calcDet(M.matrix_array));\n\t\t}\n\t\telse {\n\t\t\t// サイズが大きい場合は、lu分解を利用する\n\t\t\tconst lup = LinearAlgebra.lup(M);\n\t\t\tconst exchange_count = (len - lup.P.diag().sum().scalar().real()) / 2;\n\t\t\t// 上行列の対角線上の値を掛け算する\n\t\t\tlet y = lup.U.diag().prod();\n\t\t\tif((exchange_count % 2) === 1) {\n\t\t\t\ty = y.negate();\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t}\n\n\t/**\n\t * LUP decomposition.\n\t * - P'*L*U=A\n\t * - P is permutation matrix.\n\t * - L is lower triangular matrix.\n\t * - U is upper triangular matrix.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat - A\n\t * @returns {{P: Matrix, L: Matrix, U: Matrix}} {L, U, P}\n\t */\n\tstatic lup(mat) {\n\t\tconst A = new Matrix(mat);\n\t\tconst L = Matrix.zeros(A.row_length);\n\t\tconst U = A;\n\t\tconst P = Matrix.eye(A.row_length);\n\t\tconst l = L.matrix_array;\n\t\tconst u = U.matrix_array;\n\t\t// ガウスの消去法で連立1次方程式の未知数を求める\n\t\t//前進消去\n\t\tfor(let k = 0; k < A.column_length; k++) {\n\t\t\t// ピポットの選択\n\t\t\tlet pivot;\n\t\t\t{\n\t\t\t\t// k列目で最も大きな行を取得(k列目から調べる)\n\t\t\t\tconst max_row_number = LinearAlgebraTool.getMaxRowNumber(U, k, k);\n\t\t\t\tpivot = max_row_number.index;\n\t\t\t\tif(max_row_number.max === 0.0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t//交換を行う\n\t\t\t\tif(k !== pivot) {\n\t\t\t\t\tL._exchangeRow(k, pivot);\n\t\t\t\t\tU._exchangeRow(k, pivot);\n\t\t\t\t\tP._exchangeRow(k, pivot);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 消去\n\t\t\tfor(let row = k + 1;row < A.row_length; row++) {\n\t\t\t\tconst temp = u[row][k].div(u[k][k]);\n\t\t\t\tl[row][k] = temp;\n\t\t\t\t//lの値だけ行交換が必要？\n\t\t\t\tfor(let col = k; col < A.column_length; col++) {\n\t\t\t\t\tu[row][col] = u[row][col].sub(u[k][col].mul(temp));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tL._resize(A.row_length, Math.min(A.row_length, A.column_length));\n\t\tU._resize(Math.min(A.row_length, A.column_length), A.column_length);\n\t\t// L の対角線に1を代入\n\t\tL._each(function(num, row, col) {\n\t\t\treturn row === col ? Complex.ONE : num;\n\t\t});\n\t\treturn {\n\t\t\tL : L,\n\t\t\tU : U,\n\t\t\tP : P\n\t\t};\n\t}\n\n\t/**\n\t * LU decomposition.\n\t * - L*U=A\n\t * - L is lower triangular matrix.\n\t * - U is upper triangular matrix.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat - A\n\t * @returns {{L: Matrix, U: Matrix}} {L, U}\n\t */\n\tstatic lu(mat) {\n\t\tconst lup = LinearAlgebra.lup(mat);\n\t\tconst L = lup.P.T().mul(lup.L);\n\t\treturn {\n\t\t\tL : L,\n\t\t\tU : lup.U\n\t\t};\n\t}\n\n\t/**\n\t * Solving a system of linear equations to be Ax = B\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat - A\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} number - B\n\t * @returns {Matrix} x\n\t * @todo 安定化のためQR分解を用いた手法に切り替える。あるいはlup分解を使用した関数に作り替える。\n\t */\n\tstatic linsolve(mat, number) {\n\t\tconst A = Matrix._toMatrix(mat);\n\t\tconst B = Matrix._toMatrix(number);\n\t\tif(!A.isSquare()) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\t// 連立一次方程式を解く\n\t\tconst arg = B;\n\t\tif((B.row_length !== A.row_length) || (B.column_length > 1)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\t// 行列を準備する\n\t\tconst M = new Matrix(A);\n\t\tM._concatRight(arg);\n\t\tconst long_matrix_array = M.matrix_array;\n\t\tconst long_length = M.column_length;\n\t\tconst len = A.column_length;\n\t\t// ガウスの消去法で連立1次方程式の未知数を求める\n\t\t//前進消去\n\t\tfor(let k = 0; k < (len - 1); k++) {\n\t\t\t//ピポットの選択\n\t\t\t{\n\t\t\t\t// k列目で最も大きな行を取得(k列目から調べる)\n\t\t\t\tconst row_num = LinearAlgebraTool.getMaxRowNumber(M, k, k).index;\n\t\t\t\t//交換を行う\n\t\t\t\tM._exchangeRow(k, row_num);\n\t\t\t}\n\t\t\t//ピポットの正規化\n\t\t\t{\n\t\t\t\tconst normalize_value = long_matrix_array[k][k].inv();\n\t\t\t\tfor(let row = k, col = k; col < long_length; col++) {\n\t\t\t\t\tlong_matrix_array[row][col] = long_matrix_array[row][col].mul(normalize_value);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//消去\n\t\t\tfor(let row = k + 1;row < len; row++) {\n\t\t\t\tconst temp = long_matrix_array[row][k];\n\t\t\t\tfor(let col = k; col < long_length; col++) {\n\t\t\t\t\tlong_matrix_array[row][col] = long_matrix_array[row][col].sub(long_matrix_array[k][col].mul(temp));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//後退代入\n\t\tconst y = new Array(len);\n\t\ty[len - 1] = long_matrix_array[len - 1][len].div(long_matrix_array[len - 1][len - 1]);\n\t\tfor(let row = len - 2; row >= 0; row--) {\n\t\t\ty[row] = long_matrix_array[row][long_length - 1];\n\t\t\tfor(let j = row + 1; j < len; j++) {\n\t\t\t\ty[row] = y[row].sub(long_matrix_array[row][j].mul(y[j]));\n\t\t\t}\n\t\t\ty[row] = y[row].div(long_matrix_array[row][row]);\n\t\t}\n\t\tconst y2 = new Array(A.row_length);\n\t\tfor(let row = 0; row < A.row_length; row++) {\n\t\t\ty2[row] = [y[row]];\n\t\t}\n\n\t\treturn new Matrix(y2);\n\t}\n\n\t/**\n\t * QR decomposition.\n\t * - Q*R=A\n\t * - Q is orthonormal matrix.\n\t * - R is upper triangular matrix.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat - A\n\t * @returns {{Q: Matrix, R: Matrix}} {Q, R}\n\t */\n\tstatic qr(mat) {\n\t\t// 行列を準備する\n\t\tconst M = new Matrix(mat);\n\t\t// 作成後のQとRのサイズ\n\t\tconst Q_row_length = M.row_length;\n\t\tconst Q_column_length = M.row_length;\n\t\tconst R_row_length = M.row_length;\n\t\tconst R_column_length = M.column_length;\n\t\t// 計算時の行と列のサイズ\n\t\tconst dummy_size = Math.max(M.row_length, M.column_length);\n\t\t// 正方行列にする\n\t\tM._resize(dummy_size, dummy_size);\n\t\t// 正規直行化\n\t\tconst orthogonal_matrix = LinearAlgebraTool.doGramSchmidtOrthonormalization(M);\n\t\t// 計算したデータを取得\n\t\tlet Q_Matrix = orthogonal_matrix.Q;\n\t\tconst R_Matrix = orthogonal_matrix.R;\n\t\tconst non_orthogonalized = orthogonal_matrix.non_orthogonalized;\n\n\t\t// Qのサイズを成型する\n\t\tif(non_orthogonalized.length === M.row_length) {\n\t\t\t// 零行列の場合の特別処理\n\t\t\tQ_Matrix = Matrix.eye(M.row_length);\n\t\t}\n\t\telse if(non_orthogonalized.length !== 0) {\n\t\t\t// 一部、直行化できていない列があるため直行化できてない列以外を抽出\n\t\t\t/**\n\t\t\t * @type {any}\n\t\t\t */\n\t\t\tconst map = {};\n\t\t\tfor(let i = 0; i < non_orthogonalized.length; i++) {\n\t\t\t\tmap[non_orthogonalized[i]] = 1;\n\t\t\t}\n\t\t\tconst orthogonalized = [];\n\t\t\tfor(let i = 0; i < dummy_size; i++) {\n\t\t\t\tif(map[i]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst array = [];\n\t\t\t\tfor(let j = 0; j < dummy_size; j++) {\n\t\t\t\t\tarray[j] = Q_Matrix.matrix_array[j][i];\n\t\t\t\t}\n\t\t\t\torthogonalized.push(array);\n\t\t\t}\n\t\t\t// 直行ベクトルを作成する\n\t\t\tconst orthogonal_vector = LinearAlgebraTool.createOrthogonalVector(orthogonalized);\n\t\t\t// 直行化できていない列を差し替える\n\t\t\tfor(let i = 0; i < non_orthogonalized.length; i++) {\n\t\t\t\tconst q_col = non_orthogonalized[i];\n\t\t\t\tfor(let j = 0; j < dummy_size; j++) {\n\t\t\t\t\tQ_Matrix.matrix_array[j][q_col] = orthogonal_vector.matrix_array[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tQ_Matrix._resize(Q_row_length, Q_column_length);\n\t\t// Rのサイズを成形する\n\t\tR_Matrix._resize(R_row_length, R_column_length);\n\t\treturn {\n\t\t\tQ : Q_Matrix,\n\t\t\tR : R_Matrix\n\t\t};\n\t}\n\n\t/**\n\t * Tridiagonalization of symmetric matrix.\n\t * - Don't support complex numbers.\n\t * - P*H*P'=A\n\t * - P is orthonormal matrix.\n\t * - H is tridiagonal matrix.\n\t * - The eigenvalues of H match the eigenvalues of A.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat - A\n\t * @returns {{P: Matrix, H: Matrix}} {P, H}\n\t */\n\tstatic tridiagonalize(mat) {\n\t\tconst M = new Matrix(mat);\n\t\tif(!M.isSquare()) {\n\t\t\tthrow \"not square matrix\";\n\t\t}\n\t\tif(!M.isSymmetric()) {\n\t\t\tthrow \"not Symmetric\";\n\t\t}\n\t\tif(M.isComplex()) {\n\t\t\tthrow \"not Real Matrix\";\n\t\t}\n\t\treturn LinearAlgebraTool.tridiagonalize(M);\n\t}\n\n\t/**\n\t * Eigendecomposition of symmetric matrix.\n\t * - Don't support complex numbers.\n\t * - V*D*V'=A.\n\t * - V is orthonormal matrix. and columns of V are the right eigenvectors.\n\t * - D is a matrix containing the eigenvalues on the diagonal component.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat - A\n\t * @returns {{V: Matrix, D: Matrix}} {D, V}\n\t * @todo 対称行列しか対応できていないので、対称行列ではないものはQR分解を用いた手法に切り替える予定。\n\t */\n\tstatic eig(mat) {\n\t\tconst M = new Matrix(mat);\n\t\tif(!M.isSquare()) {\n\t\t\tthrow \"not square matrix\";\n\t\t}\n\t\tif(!M.isSymmetric()) {\n\t\t\tthrow \"not Symmetric\";\n\t\t}\n\t\tif(M.isComplex()) {\n\t\t\tthrow \"not Real Matrix\";\n\t\t}\n\t\treturn LinearAlgebraTool.eig(M);\n\t}\n\n\t/**\n\t * Singular Value Decomposition (SVD).\n\t * - U*S*V'=A\n\t * - U and V are orthonormal matrices.\n\t * - S is a matrix with singular values in the diagonal.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat - A\n\t * @returns {{U: Matrix, S: Matrix, V: Matrix}} U*S*V'=A\n\t */\n\tstatic svd(mat) {\n\t\tconst M = new Matrix(mat);\n\t\tif(M.isComplex()) {\n\t\t\t// 複素数が入っている場合は、eig関数が使用できないので非対応\n\t\t\tthrow \"Unimplemented\";\n\t\t}\n\t\tconst rank = LinearAlgebra.rank(M);\n\t\t// SVD分解\n\t\t// 参考：Gilbert Strang (2007). Computational Science and Engineering.\n\t\tconst VD = LinearAlgebra.eig(M.T().mul(M));\n\t\tconst sigma = Matrix.zeros(M.row_length, M.column_length);\n\t\tsigma._each(function(num, row, col) {\n\t\t\tif((row === col) && (row < rank)) {\n\t\t\t\treturn VD.D.getComplex(row, row).sqrt();\n\t\t\t}\n\t\t});\n\t\tconst s_size = Math.min(M.row_length, M.column_length);\n\t\tconst sing = Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\tif(row === col) {\n\t\t\t\tconst x = sigma.matrix_array[row][row];\n\t\t\t\tif(x.isZero()) {\n\t\t\t\t\treturn Complex.ZERO;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn x.inv();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Complex.ZERO;\n\t\t\t}\n\t\t}, s_size);\n\t\tconst V_rank = VD.V.resize(VD.V.row_length, s_size);\n\t\tconst u = M.mul(V_rank).mul(sing);\n\t\tconst QR = LinearAlgebra.qr(u);\n\t\treturn {\n\t\t\tU : QR.Q,\n\t\t\tS : sigma,\n\t\t\tV : VD.V\n\t\t};\n\t}\n\n\t/**\n\t * Inverse matrix of this matrix.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat - A\n\t * @returns {Matrix} A^-1\n\t */\n\tstatic inv(mat) {\n\t\tconst X = new Matrix(mat);\n\t\tif(X.isScalar()) {\n\t\t\treturn new Matrix(Complex.ONE.div(X.scalar()));\n\t\t}\n\t\tif(!X.isSquare()) {\n\t\t\tthrow \"not square\";\n\t\t}\n\t\tif(X.isDiagonal()) {\n\t\t\t// 対角行列の場合は、対角成分のみ逆数をとる\n\t\t\tconst y = X.T();\n\t\t\tconst size = Math.min(y.row_length, y.column_length);\n\t\t\tfor(let i = 0; i < size; i++) {\n\t\t\t\ty.matrix_array[i][i] = y.matrix_array[i][i].inv();\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\t// (ここで正規直交行列の場合なら、転置させるなど入れてもいい？判定はできないけども)\n\t\tconst len = X.column_length;\n\t\t// ガウス・ジョルダン法\n\t\t// 初期値の設定\n\t\tconst M = new Matrix(X);\n\t\tM._concatRight(Matrix.eye(len));\n\t\tconst long_matrix_array = M.matrix_array;\n\t\tconst long_length = M.column_length;\n\n\t\t//前進消去\n\t\tfor(let k = 0; k < len; k++) {\n\t\t\t//ピポットの選択\n\t\t\t{\n\t\t\t\t// k列目で最も大きな行を取得(k列目から調べる)\n\t\t\t\tconst row_num = LinearAlgebraTool.getMaxRowNumber(M, k, k).index;\n\t\t\t\t//交換を行う\n\t\t\t\tM._exchangeRow(k, row_num);\n\t\t\t}\n\t\t\t//ピポットの正規化\n\t\t\t{\n\t\t\t\tconst normalize_value = long_matrix_array[k][k].inv();\n\t\t\t\tfor(let row = k, col = k; col < long_length; col++) {\n\t\t\t\t\tlong_matrix_array[row][col] = long_matrix_array[row][col].mul(normalize_value);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//消去\n\t\t\tfor(let row = 0;row < len; row++) {\n\t\t\t\tif(row === k) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst temp = long_matrix_array[row][k];\n\t\t\t\tfor(let col = k; col < long_length; col++)\n\t\t\t\t{\n\t\t\t\t\tlong_matrix_array[row][col] = long_matrix_array[row][col].sub(long_matrix_array[k][col].mul(temp));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst y = new Array(len);\n\t\t//右の列を抜き取る\n\t\tfor(let row = 0; row < len; row++) {\n\t\t\ty[row] = new Array(len);\n\t\t\tfor(let col = 0; col < len; col++) {\n\t\t\t\ty[row][col] = long_matrix_array[row][len + col];\n\t\t\t}\n\t\t}\n\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * Pseudo-inverse matrix.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat - A\n\t * @returns {Matrix} A^+\n\t */\n\tstatic pinv(mat) {\n\t\tconst M = new Matrix(mat);\n\t\tconst USV = LinearAlgebra.svd(M);\n\t\tconst U = USV.U;\n\t\tconst S = USV.S;\n\t\tconst V = USV.V;\n\t\tconst sing = Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\tif(row === col) {\n\t\t\t\tconst x = S.matrix_array[row][row];\n\t\t\t\tif(x.isZero()) {\n\t\t\t\t\treturn Complex.ZERO;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn x.inv();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Complex.ZERO;\n\t\t\t}\n\t\t}, M.column_length, M.row_length);\n\t\treturn V.mul(sing).mul(U.T());\n\t}\n\n\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/konpeitoWSH/src/math/core/tools/LinearAlgebra.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 516,
    "kind": "class",
    "name": "LinearAlgebraTool",
    "memberof": "src/math/core/tools/LinearAlgebra.js",
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebraTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito_wsh/src/math/core/tools/LinearAlgebra.js",
    "importStyle": null,
    "description": "Collection of functions for linear algebra.",
    "lineNumber": 19,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 517,
    "kind": "method",
    "name": "tridiagonalize",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebraTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebraTool.tridiagonalize",
    "access": "public",
    "description": "Tridiagonalization of symmetric matrix.\n- Don't support complex numbers.\n- P*H*P'=A\n- P is orthonormal matrix.\n- H is tridiagonal matrix.\n- The eigenvalues of H match the eigenvalues of A.",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{P: Matrix, H: Matrix}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{P: Matrix, H: Matrix}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 518,
    "kind": "method",
    "name": "eig",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebraTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebraTool.eig",
    "access": "public",
    "description": "Eigendecomposition of symmetric matrix.\n- Don't support complex numbers.\n- V*D*V'=A.\n- V is orthonormal matrix. and columns of V are the right eigenvectors.\n- D is a matrix containing the eigenvalues on the diagonal component.",
    "lineNumber": 194,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{V: Matrix, D: Matrix}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "Symmetric matrix."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{V: Matrix, D: Matrix}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 519,
    "kind": "method",
    "name": "doGramSchmidtOrthonormalization",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebraTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebraTool.doGramSchmidtOrthonormalization",
    "access": "public",
    "description": "Treat matrices as vectors, make them orthonormal, and make matrices of Q and R.\nThe method of Gram-Schmidt orthonormalization is used.",
    "lineNumber": 339,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{Q: Matrix, R: Matrix, non_orthogonalized : Array<number>}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "Square matrix."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{Q: Matrix, R: Matrix, non_orthogonalized : Array<number>}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 520,
    "kind": "method",
    "name": "createOrthogonalVector",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebraTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebraTool.createOrthogonalVector",
    "access": "public",
    "description": "Create orthogonal vectors for all row vectors of the matrix.\n- If the vector can not be found, it returns NULL.",
    "lineNumber": 409,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix|null} An orthogonal vector."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0e-10",
        "defaultRaw": 1e-10,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix",
        "null"
      ],
      "spread": false,
      "description": "An orthogonal vector."
    }
  },
  {
    "__docId__": 521,
    "kind": "method",
    "name": "getMaxRowNumber",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebraTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebraTool.getMaxRowNumber",
    "access": "public",
    "description": "Row number with the largest norm value in the specified column of the matrix.",
    "lineNumber": 474,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{index: number, max: number}} Matrix row number."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "column_index",
        "description": "Number of column of matrix."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "row_index_offset",
        "description": "Offset of the position of the vector to be calculated."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "row_index_max",
        "description": "Maximum value of position of vector to be calculated (do not include this value)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{index: number, max: number}"
      ],
      "spread": false,
      "description": "Matrix row number."
    }
  },
  {
    "__docId__": 522,
    "kind": "method",
    "name": "getLinearDependenceVector",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebraTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebraTool.getLinearDependenceVector",
    "access": "public",
    "description": "Extract linearly dependent rows when each row of matrix is a vector.",
    "lineNumber": 500,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} Array of matrix row numbers in ascending order."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0e-10",
        "defaultRaw": 1e-10,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "Array of matrix row numbers in ascending order."
    }
  },
  {
    "__docId__": 523,
    "kind": "class",
    "name": "LinearAlgebra",
    "memberof": "src/math/core/tools/LinearAlgebra.js",
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "access": "public",
    "export": true,
    "importPath": "konpeito_wsh/src/math/core/tools/LinearAlgebra.js",
    "importStyle": "LinearAlgebra",
    "description": "Class for linear algebra for `Matrix` class.\n- These methods can be used in the `Matrix` method chain.\n- This class cannot be called directly.",
    "lineNumber": 554,
    "interface": false
  },
  {
    "__docId__": 524,
    "kind": "method",
    "name": "inner",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.inner",
    "access": "public",
    "description": "Inner product/Dot product.",
    "lineNumber": 563,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A・B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "A",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "B",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "dimension",
        "description": "Dimension of matrix used for calculation. (1 or 2)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A・B"
    }
  },
  {
    "__docId__": 525,
    "kind": "method",
    "name": "norm",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.norm",
    "access": "public",
    "description": "p-norm.",
    "lineNumber": 616,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 526,
    "kind": "method",
    "name": "cond",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.cond",
    "access": "public",
    "description": "Condition number of the matrix",
    "lineNumber": 720,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 527,
    "kind": "method",
    "name": "rcond",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.rcond",
    "access": "public",
    "description": "Inverse condition number.",
    "lineNumber": 747,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 528,
    "kind": "method",
    "name": "rank",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.rank",
    "access": "public",
    "description": "Rank.",
    "lineNumber": 757,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} rank(A)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "rank(A)"
    }
  },
  {
    "__docId__": 529,
    "kind": "method",
    "name": "trace",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.trace",
    "access": "public",
    "description": "Trace of a matrix.\nSum of diagonal elements.",
    "lineNumber": 775,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 530,
    "kind": "method",
    "name": "det",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.det",
    "access": "public",
    "description": "Determinant.",
    "lineNumber": 790,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} |A|"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "|A|"
    }
  },
  {
    "__docId__": 531,
    "kind": "method",
    "name": "lup",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.lup",
    "access": "public",
    "description": "LUP decomposition.\n- P'*L*U=A\n- P is permutation matrix.\n- L is lower triangular matrix.\n- U is upper triangular matrix.",
    "lineNumber": 857,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{P: Matrix, L: Matrix, U: Matrix}} {L, U, P}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{P: Matrix, L: Matrix, U: Matrix}"
      ],
      "spread": false,
      "description": "{L, U, P}"
    }
  },
  {
    "__docId__": 532,
    "kind": "method",
    "name": "lu",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.lu",
    "access": "public",
    "description": "LU decomposition.\n- L*U=A\n- L is lower triangular matrix.\n- U is upper triangular matrix.",
    "lineNumber": 914,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{L: Matrix, U: Matrix}} {L, U}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{L: Matrix, U: Matrix}"
      ],
      "spread": false,
      "description": "{L, U}"
    }
  },
  {
    "__docId__": 533,
    "kind": "method",
    "name": "linsolve",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.linsolve",
    "access": "public",
    "description": "Solving a system of linear equations to be Ax = B",
    "lineNumber": 930,
    "todo": [
      "安定化のためQR分解を用いた手法に切り替える。あるいはlup分解を使用した関数に作り替える。"
    ],
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} x"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      },
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "B"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "x"
    }
  },
  {
    "__docId__": 534,
    "kind": "method",
    "name": "qr",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.qr",
    "access": "public",
    "description": "QR decomposition.\n- Q*R=A\n- Q is orthonormal matrix.\n- R is upper triangular matrix.",
    "lineNumber": 998,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{Q: Matrix, R: Matrix}} {Q, R}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{Q: Matrix, R: Matrix}"
      ],
      "spread": false,
      "description": "{Q, R}"
    }
  },
  {
    "__docId__": 535,
    "kind": "method",
    "name": "tridiagonalize",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.tridiagonalize",
    "access": "public",
    "description": "Tridiagonalization of symmetric matrix.\n- Don't support complex numbers.\n- P*H*P'=A\n- P is orthonormal matrix.\n- H is tridiagonal matrix.\n- The eigenvalues of H match the eigenvalues of A.",
    "lineNumber": 1071,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{P: Matrix, H: Matrix}} {P, H}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{P: Matrix, H: Matrix}"
      ],
      "spread": false,
      "description": "{P, H}"
    }
  },
  {
    "__docId__": 536,
    "kind": "method",
    "name": "eig",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.eig",
    "access": "public",
    "description": "Eigendecomposition of symmetric matrix.\n- Don't support complex numbers.\n- V*D*V'=A.\n- V is orthonormal matrix. and columns of V are the right eigenvectors.\n- D is a matrix containing the eigenvalues on the diagonal component.",
    "lineNumber": 1095,
    "todo": [
      "対称行列しか対応できていないので、対称行列ではないものはQR分解を用いた手法に切り替える予定。"
    ],
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{V: Matrix, D: Matrix}} {D, V}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{V: Matrix, D: Matrix}"
      ],
      "spread": false,
      "description": "{D, V}"
    }
  },
  {
    "__docId__": 537,
    "kind": "method",
    "name": "svd",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.svd",
    "access": "public",
    "description": "Singular Value Decomposition (SVD).\n- U*S*V'=A\n- U and V are orthonormal matrices.\n- S is a matrix with singular values in the diagonal.",
    "lineNumber": 1117,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{U: Matrix, S: Matrix, V: Matrix}} U*S*V'=A"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{U: Matrix, S: Matrix, V: Matrix}"
      ],
      "spread": false,
      "description": "U*S*V'=A"
    }
  },
  {
    "__docId__": 538,
    "kind": "method",
    "name": "inv",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.inv",
    "access": "public",
    "description": "Inverse matrix of this matrix.",
    "lineNumber": 1163,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^-1"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^-1"
    }
  },
  {
    "__docId__": 539,
    "kind": "method",
    "name": "pinv",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.pinv",
    "access": "public",
    "description": "Pseudo-inverse matrix.",
    "lineNumber": 1235,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^+"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^+"
    }
  },
  {
    "__docId__": 540,
    "kind": "file",
    "name": "src/math/core/tools/Probability.js",
    "content": "﻿/**\n * The script is part of konpeitoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\n/**\n * Return true if the value is integer.\n * @param {number} x\n * @returns {boolean}\n * @ignore\n */\nconst isInteger = function(x) {\n\treturn (x - Math.trunc(x) !== 0.0);\n};\n\n/**\n * Collection for calculating probability using real numbers.\n * - These methods can be used in the `Matrix`, `Complex` method chain.\n * - This class cannot be called directly.\n */\nexport default class Probability {\n\n\t/**\n\t * Log-gamma function.\n\t * @param {number} x\n\t * @returns {number}\n\t */\n\tstatic gammaln(x) {\n\t\tif(!isFinite(x)) {\n\t\t\tif(isNaN(x)) {\n\t\t\t\treturn NaN;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Infinity;\n\t\t\t}\n\t\t}\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p30,技術評論社,1991\n\t\tconst LOG_2PI = Math.log(2.0 * Math.PI);\n\t\t//ベルヌーイ数\n\t\t//http://fr.wikipedia.org/wiki/Nombre_de_Bernoulli\n\t\tconst K2 = ( 1.0 / 6.0)\t\t\t\t\t/ (2 * 1);\n\t\tconst K4 = (-1.0 / 30.0)\t\t\t\t/ (4 * 3);\n\t\tconst K6 = ( 1.0 / 42.0)\t\t\t\t/ (6 * 5);\n\t\tconst K8 = (-1.0 / 30.0)\t\t\t\t/ (8 * 7);\n\t\tconst K10 = ( 5.0 / 66.0)\t\t\t\t/ (10 * 9);\n\t\tconst K12 = (-691.0 / 2730.0)\t\t\t/ (12 * 11);\n\t\tconst K14 = ( 7.0 / 6.0)\t\t\t\t/ (14 * 13);\n\t\tconst K16 = (-3617.0 / 510.0)\t\t\t/ (16 * 15);\n\t\tconst K18 = (43867.0 / 798.0)\t\t\t/ (18 * 17);\n\t\tconst K20 = (-174611.0 / 330.0)\t\t\t/ (20 * 19);\n\t\tconst K22 = (854513.0 / 138.0)\t\t\t/ (22 * 21);\n\t\tconst K24 = (-236364091.0 / 2730.0)\t\t/ (24 * 23);\n\t\tconst K26 = (8553103.0 / 6.0)\t\t\t/ (26 * 25);\n\t\tconst K28 = (-23749461029.0 / 870.0)\t/ (28 * 27);\n\t\tconst K30 = (8615841276005.0 / 14322.0)\t/ (30 * 29);\n\t\tconst K32 = (-7709321041217.0 / 510.0)\t/ (32 * 31);\n\t\tconst LIST = [\n\t\t\tK32, K30, K28, K26, K24, K22, K20, K18,\n\t\t\tK16, K14, K12, K10, K8, K6, K4, K2\n\t\t];\n\t\tlet v = 1;\n\t\tlet lx = x;\n\t\twhile(lx < LIST.length) {\n\t\t\tv *= lx;\n\t\t\tlx++;\n\t\t}\n\t\tconst w = 1 / (lx * lx);\n\t\tlet y = LIST[0];\n\t\tfor(let i = 1; i < LIST.length; i++) {\n\t\t\ty *= w;\n\t\t\ty += LIST[i];\n\t\t}\n\t\ty /= lx;\n\t\ty += 0.5 * LOG_2PI;\n\t\ty += - Math.log(v) - lx + (lx - 0.5) * Math.log(lx);\n\t\treturn(y);\n\t}\n\n\t/**\n\t * Incomplete gamma function upper side.\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} gammaln_a\n\t * @returns {number}\n\t */\n\tstatic q_gamma(x, a, gammaln_a) {\n\t\tif(!isFinite(x)) {\n\t\t\tif(x === Infinity) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn NaN;\n\t\t\t}\n\t\t}\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p227,技術評論社,1991\n\t\tlet k;\n\t\tlet result, w, temp, previous;\n\t\t// Laguerreの多項式\n\t\tlet la = 1.0, lb = 1.0 + x - a;\n\t\tif(x < 1.0 + a) {\n\t\t\treturn (1 - Probability.p_gamma(x, a, gammaln_a));\n\t\t}\n\t\tw = Math.exp(a * Math.log(x) - x - gammaln_a);\n\t\tresult = w / lb;\n\t\tfor(k = 2; k < 1000; k++) {\n\t\t\ttemp = ((k - 1.0 - a) * (lb - la) + (k + x) * lb) / k;\n\t\t\tla = lb;\n\t\t\tlb = temp;\n\t\t\tw *= (k - 1.0 - a) / k;\n\t\t\ttemp = w / (la * lb);\n\t\t\tprevious = result;\n\t\t\tresult += temp;\n\t\t\tif(result == previous) {\n\t\t\t\treturn(result);\n\t\t\t}\n\t\t}\n\t\treturn Number.NaN;\n\t}\n\n\t/**\n\t * Incomplete gamma function lower side.\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} gammaln_a\n\t * @returns {number}\n\t */\n\tstatic p_gamma(x, a, gammaln_a) {\n\t\tif(!isFinite(x)) {\n\t\t\tif(x === Infinity) {\n\t\t\t\treturn 1.0;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn NaN;\n\t\t\t}\n\t\t}\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p227,技術評論社,1991\n\t\tlet k;\n\t\tlet result, term, previous;\n\t\tif(x >= 1.0 + a) {\n\t\t\treturn (1.0 - Probability.q_gamma(x, a, gammaln_a));\n\t\t}\n\t\tif(x === 0.0) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tresult = term = Math.exp(a * Math.log(x) - x - gammaln_a) / a;\n\t\tfor(k = 1; k < 1000; k++) {\n\t\t\tterm *= x / (a + k);\n\t\t\tprevious = result;\n\t\t\tresult += term;\n\t\t\tif(result == previous) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn Number.NaN;\n\t}\n\n\t/**\n\t * Gamma function.\n\t * @param {number} z\n\t * @returns {number}\n\t */\n\tstatic gamma(z) {\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p30,技術評論社,1991\n\t\tif(z < 0) {\n\t\t\treturn (Math.PI / (Math.sin(Math.PI * z) * Math.exp(Probability.gammaln(1.0 - z))));\n\t\t}\n\t\treturn Math.exp(Probability.gammaln(z));\n\t}\n\n\t/**\n\t * Incomplete gamma function.\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {string} [tail=\"lower\"] - lower (default) , \"upper\"\n\t * @returns {number}\n\t */\n\tstatic gammainc(x, a, tail) {\n\t\tif(tail === \"lower\") {\n\t\t\treturn Probability.p_gamma(x, a, Probability.gammaln(a));\n\t\t}\n\t\telse if(tail === \"upper\") {\n\t\t\treturn Probability.q_gamma(x, a, Probability.gammaln(a));\n\t\t}\n\t\telse if(tail === undefined) {\n\t\t\t// 引数を省略した場合\n\t\t\treturn Probability.gammainc(x, a, \"lower\");\n\t\t}\n\t\telse {\n\t\t\tthrow \"gammainc unsupported argument [\" + tail + \"]\";\n\t\t}\n\t}\n\t\n\t/**\n\t * Probability density function (PDF) of the gamma distribution.\n\t * @param {number} x\n\t * @param {number} k - Shape parameter.\n\t * @param {number} s - Scale parameter.\n\t * @returns {number}\n\t */\n\tstatic gampdf(x, k, s) {\n\t\tif(x === -Infinity) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tlet y = 1.0 / (Probability.gamma(k) * Math.pow(s, k));\n\t\ty *= Math.pow( x, k - 1);\n\t\ty *= Math.exp( - x / s );\n\t\treturn y;\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of gamma distribution.\n\t * @param {number} x\n\t * @param {number} k - Shape parameter.\n\t * @param {number} s - Scale parameter.\n\t * @returns {number}\n\t */\n\tstatic gamcdf(x, k, s) {\n\t\tif(x < 0) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn Probability.gammainc(x / s, k);\n\t}\n\t\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of gamma distribution.\n\t * @param {number} p\n\t * @param {number} k - Shape parameter.\n\t * @param {number} s - Scale parameter.\n\t * @returns {number}\n\t */\n\tstatic gaminv(p, k, s) {\n\t\tif((p < 0.0) || (p > 1.0)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\telse if(p == 0.0) {\n\t\t\treturn 0.0;\n\t\t}\n\t\telse if(p == 1.0) {\n\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t}\n\t\tconst eps = 1.0e-12;\n\t\t// 初期値を決める\n\t\tlet y = k * s;\n\t\t// 単調増加関数なのでニュートン・ラフソン法で解く\n\t\t// x_n+1 = x_n - f(x) / f'(x)\n\t\t// ここで f(x) は累積分布関数、f'(x) は確率密度関数\n\t\t// a = 累積分関数 → f(x)  = 累積分関数 - a と置く。\n\t\t// aの微分は0なので無関係\n\t\tlet delta, y2;\n\t\tfor(let i = 0; i < 100; i++) {\n\t\t\ty2 = y - ((Probability.gamcdf(y, k, s) - p) / Probability.gampdf(y, k, s));\n\t\t\tdelta = y2 - y;\n\t\t\tif(Math.abs(delta) <= eps) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ty = y2;\n\t\t\tif(y < 0.0) {\n\t\t\t\ty = eps;\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * Beta function.\n\t * @param {number} x\n\t * @param {number} y\n\t * @returns {number}\n\t */\n\tstatic beta(x, y) {\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p30,技術評論社,1991\n\t\treturn (Math.exp(Probability.gammaln(x) + Probability.gammaln(y) - Probability.gammaln(x + y)));\n\t}\n\t\n\t/**\n\t * Incomplete beta function lower side.\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number}\n\t */\n\tstatic p_beta(x, a, b) {\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p231,技術評論社,1991\n\t\tlet k;\n\t\tlet result, term, previous;\n\t\tif(a <= 0.0) {\n\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t}\n\t\tif(b <= 0.0) {\n\t\t\tif(x < 1.0) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\telse if(x === 1.0) {\n\t\t\t\treturn 1.0;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t\t}\n\t\t}\n\t\tif(x > (a + 1.0) / (a + b + 2.0)) {\n\t\t\treturn (1.0 - Probability.p_beta(1.0 - x, b, a));\n\t\t}\n\t\tif(x <= 0.0) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tterm = a * Math.log(x);\n\t\tterm += b * Math.log(1.0 - x);\n\t\tterm += Probability.gammaln(a + b);\n\t\tterm -= Probability.gammaln(a) + Probability.gammaln(b);\n\t\tterm = Math.exp(term);\n\t\tterm /= a;\n\t\tresult = term;\n\t\tfor(k = 1; k < 1000; k++) {\n\t\t\tterm *= a + b + k - 1.0;\n\t\t\tterm *= x;\n\t\t\tterm /= a + k;\n\t\t\tprevious = result;\n\t\t\tresult += term;\n\t\t\tif(result === previous) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn Number.NaN;\n\t}\n\n\t/**\n\t * Incomplete beta function upper side.\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number}\n\t */\n\tstatic q_beta(x, a, b) {\n\t\treturn (1.0 - Probability.p_beta(x, a, b));\n\t}\n\n\t/**\n\t * Incomplete beta function.\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} b\n\t * @param {string} [tail=\"lower\"] - lower (default) , \"upper\"\n\t * @returns {number}\n\t */\n\tstatic betainc(x, a, b, tail) {\n\t\tif(tail === \"lower\") {\n\t\t\treturn Probability.p_beta(x, a, b);\n\t\t}\n\t\telse if(tail === \"upper\") {\n\t\t\treturn Probability.q_beta(x, a, b);\n\t\t}\n\t\telse if(tail === undefined) {\n\t\t\t// 引数を省略した場合\n\t\t\treturn Probability.betainc(x, a, b, \"lower\");\n\t\t}\n\t\telse {\n\t\t\tthrow \"betainc unsupported argument [\" + tail + \"]\";\n\t\t}\n\t}\n\t\n\t/**\n\t * Probability density function (PDF) of beta distribution.\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number}\n\t */\n\tstatic betapdf(x, a, b) {\n\t\t// powの計算結果が複素数になる場合は計算を行わない\n\t\tif\t(\n\t\t\t((x < 0) && isInteger(b - 1)) ||\n\t\t\t((1 - x < 0) && isInteger(b - 1))\n\t\t) {\n\t\t\treturn 0.0;\n\t\t}\n\t\t// 以下の式でも求められるが betapdf(0, 1, 1)で、Log(0)の計算が発生しNaNを返してしまう。実際は1を返すべき。\n\t\t//return(Math.exp((a - 1) * Math.log(x) + (b - 1) * Math.log(1 - x)) / Probability.beta(a,  b));\n\t\treturn (Math.pow(x, a - 1) * Math.pow(1 - x, b - 1) / Probability.beta(a,  b));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of beta distribution.\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number}\n\t */\n\tstatic betacdf(x, a, b) {\n\t\treturn Probability.betainc(x, a, b);\n\t}\n\t\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of beta distribution.\n\t * @param {number} p\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number}\n\t */\n\tstatic betainv(p, a, b) {\n\t\tif((p < 0.0) || (p > 1.0)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\telse if((p == 0.0) && (a > 0.0) && (b > 0.0)) {\n\t\t\treturn 0.0;\n\t\t}\n\t\telse if((p == 1.0) && (a > 0.0) && (b > 0.0)) {\n\t\t\treturn 1.0;\n\t\t}\n\t\tconst eps = 1.0e-14;\n\t\t// 初期値を決める\n\t\tlet y;\n\t\tif(b == 0) {\n\t\t\ty = 1.0 - eps;\n\t\t}\n\t\telse if(a == 0) {\n\t\t\ty = eps;\n\t\t}\n\t\telse {\n\t\t\ty = a / (a + b);\n\t\t}\n\t\t// 単調増加関数なのでニュートン・ラフソン法で解く\n\t\t// x_n+1 = x_n - f(x) / f'(x)\n\t\t// ここで f(x) は累積分布関数、f'(x) は確率密度関数\n\t\t// a = 累積分関数 → f(x)  = 累積分関数 - a と置く。\n\t\t// aの微分は0なので無関係\n\t\tlet delta, y2;\n\t\tfor(let i = 0; i < 100; i++) {\n\t\t\ty2 = y - ((Probability.betacdf(y, a, b) - p) / Probability.betapdf(y, a, b));\n\t\t\tdelta = y2 - y;\n\t\t\tif(Math.abs(delta) <= eps) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ty = y2;\n\t\t\tif(y > 1.0) {\n\t\t\t\ty = 1.0 - eps;\n\t\t\t}\n\t\t\telse if(y < 0.0) {\n\t\t\t\ty = eps;\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * Factorial function, x!.\n\t * @param {number} n\n\t * @returns {number}\n\t */\n\tstatic factorial(n) {\n\t\tconst y = Probability.gamma(n + 1.0);\n\t\tif(Math.trunc(n) === n) {\n\t\t\treturn Math.round(y);\n\t\t}\n\t\telse {\n\t\t\treturn y;\n\t\t}\n\t}\n\n\t/**\n\t * Binomial coefficient, number of all combinations, nCk.\n\t * @param {number} n\n\t * @param {number} k\n\t * @returns {number} nCk\n\t */\n\tstatic nchoosek(n, k) {\n\t\t// 少ない数字なら以下の計算でよい\n\t\t// return Math.round(Probability.factorial(n) / (Probability.factorial(n - k) * Probability.factorial(k)));\n\t\tlet x = 1;\n\t\tconst new_k = Math.min(k, n - k);\n\t\tfor(let i = 1; i <= new_k; i++) {\n\t\t\tx *= (n + 1 - i) / i;\n\t\t\tif(x >= Number.MAX_SAFE_INTEGER) {\n\t\t\t\treturn Infinity;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * Error function.\n\t * @param {number} x\n\t * @returns {number}\n\t */\n\tstatic erf(x) {\n\t\treturn (Probability.p_gamma(x * x, 0.5, Math.log(Math.PI) * 0.5) * (x >= 0 ? 1.0 : -1.0));\n\t}\n\n\t/**\n\t * Complementary error function.\n\t * @param {number} x\n\t * @returns {number}\n\t */\n\tstatic erfc(x) {\n\t\treturn 1.0 - Probability.erf(x);\n\t}\n\n\t/**\n\t * Inverse function of error function.\n\t * @param {number} p\n\t * @returns {number}\n\t */\n\tstatic erfinv(p) {\n\t\treturn Probability.erfcinv(1.0 - p);\n\t}\n\n\t/**\n\t * Inverse function of complementary error function.\n\t * @param {number} p\n\t * @returns {number}\n\t */\n\tstatic erfcinv(p) {\n\t\treturn - Probability.norminv(p * 0.5) / Math.sqrt(2);\n\t}\n\n\t/**\n\t * Probability density function (PDF) of normal distribution.\n\t * @param {number} x\n\t * @param {number} [u=0.0] - Average value.\n\t * @param {number} [s=1.0] - Variance value.\n\t * @returns {number}\n\t */\n\tstatic normpdf(x, u, s) {\n\t\tconst u_ = typeof u === \"number\" ? u : 0.0;\n\t\tconst s_ = typeof s === \"number\" ? s : 1.0;\n\t\tlet y = 1.0 / Math.sqrt( 2.0 * Math.PI * s_ * s_ );\n\t\ty *= Math.exp( - (x - u_) * (x - u_) / (2.0 * s_ * s_));\n\t\treturn y;\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of normal distribution.\n\t * @param {number} x\n\t * @param {number} [u=0.0] - Average value.\n\t * @param {number} [s=1.0] - Variance value.\n\t * @returns {number}\n\t */\n\tstatic normcdf(x, u, s) {\n\t\tconst u_ = typeof u === \"number\" ? u : 0.0;\n\t\tconst s_ = typeof s === \"number\" ? s : 1.0;\n\t\treturn (1.0 + Probability.erf( (x - u_) / (s_ * Math.sqrt(2.0)) )) / 2.0;\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of normal distribution.\n\t * @param {number} p - Probability.\n\t * @param {number} [u=0.0] - Average value.\n\t * @param {number} [s=1.0] - Variance value.\n\t * @returns {number}\n\t */\n\tstatic norminv(p, u, s) {\n\t\tif((p < 0.0) || (p > 1.0)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\telse if(p == 0.0) {\n\t\t\treturn Number.NEGATIVE_INFINITY;\n\t\t}\n\t\telse if(p == 1.0) {\n\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t}\n\t\tconst u_ = typeof u === \"number\" ? u : 0.0;\n\t\tconst s_ = typeof s === \"number\" ? s : 1.0;\n\t\tconst eps = 1.0e-12;\n\t\t// 初期値を決める\n\t\tlet y = u_;\n\t\t// 単調増加関数なのでニュートン・ラフソン法で解く\n\t\t// x_n+1 = x_n - f(x) / f'(x)\n\t\t// ここで f(x) は累積分布関数、f'(x) は確率密度関数\n\t\t// a = 累積分関数 → f(x)  = 累積分関数 - a と置く。\n\t\t// aの微分は0なので無関係\n\t\tlet delta, y2;\n\t\tfor(let i = 0; i < 200; i++) {\n\t\t\ty2 = y - ((Probability.normcdf(y, u_, s_) - p) / Probability.normpdf(y, u_, s_));\n\t\t\tdelta = y2 - y;\n\t\t\tif(Math.abs(delta) <= eps) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ty = y2;\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * Probability density function (PDF) of binomial distribution.\n\t * @param {number} x\n\t * @param {number} n\n\t * @param {number} p\n\t * @returns {number}\n\t */\n\tstatic binopdf(x, n, p) {\n\t\tif(!isFinite(p)) {\n\t\t\tif(isNaN(p)) {\n\t\t\t\treturn NaN;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t}\n\t\treturn Probability.nchoosek(n, x) * Math.pow(p, x) * Math.pow(1.0 - p, n - x);\n\t}\n\t\n\t/**\n\t * Cumulative distribution function (CDF) of binomial distribution.\n\t * @param {number} x\n\t * @param {number} n\n\t * @param {number} p\n\t * @param {string} [tail=\"lower\"] - lower (default) , \"upper\"\n\t * @returns {number}\n\t */\n\tstatic binocdf(x, n, p, tail) {\n\t\treturn Probability.betainc(1.0 - p, n - Math.floor(x), 1 + Math.floor(x), tail);\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of binomial distribution.\n\t * @param {number} y\n\t * @param {number} n\n\t * @param {number} p\n\t * @returns {number}\n\t */\n\tstatic binoinv(y, n, p) {\n\t\tif((y < 0.0) || (1.0 < y) || (p < 0.0) || (1.0 < p)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\telse if((y == 0.0) || (p == 0.0)) {\n\t\t\treturn 0.0;\n\t\t}\n\t\telse if(p == 1.0) {\n\t\t\treturn n;\n\t\t}\n\t\t// 初期値を決める\n\t\tlet min = 1;\n\t\tlet max = n;\n\t\tlet middle = 0, old_middle = 0; \n\t\t// ニュートンラフソン法だと安定しないので\n\t\t// 挟み込み法（二分法）で求める\n\t\tfor(let i = 0; i < 200; i++) {\n\t\t\tmiddle = Math.round((min + max) / 2);\n\t\t\tconst Y = Probability.binocdf(middle, n, p);\n\t\t\tif(middle === old_middle) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(Y > y) {\n\t\t\t\tmax = middle;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmin = middle;\n\t\t\t}\n\t\t\told_middle = middle;\n\t\t}\n\t\treturn middle;\n\t}\n\n\t/**\n\t * Probability density function (PDF) of Poisson distribution.\n\t * @param {number} k\n\t * @param {number} lambda\n\t * @returns {number}\n\t */\n\tstatic poisspdf(k, lambda) {\n\t\tif(!isFinite(k)) {\n\t\t\tif(isNaN(k)) {\n\t\t\t\treturn Number.NaN;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t}\n\t\t// k が大きいとInfになってしまうので以下の処理はだめ\n\t\t// Math.pow(lambda, k) * Math.exp( - lambda ) / Probability.factorial(k);\n\t\t// あふれないように調整しながら、地道に計算する。\n\t\tconst inv_e = 1.0 / Math.E;\n\t\tlet x = 1.0;\n\t\tlet lambda_i = 0;\n\t\tfor(let i = 1; i <= k; i++) {\n\t\t\tx = x * lambda / i;\n\t\t\tif(lambda_i < lambda) {\n\t\t\t\tx *= inv_e;\n\t\t\t\tlambda_i++;\n\t\t\t}\n\t\t}\n\t\tfor(; lambda_i < lambda; lambda_i++) {\n\t\t\tx *= inv_e;\n\t\t}\n\t\treturn x;\n\t}\n\t\n\t/**\n\t * Cumulative distribution function (CDF) of Poisson distribution.\n\t * @param {number} k\n\t * @param {number} lambda\n\t * @returns {number}\n\t */\n\tstatic poisscdf(k, lambda) {\n\t\tif(k < 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn 1.0 - Probability.gammainc(lambda, Math.floor(k + 1));\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of Poisson distribution.\n\t * @param {number} p\n\t * @param {number} lambda\n\t * @returns {number}\n\t */\n\tstatic poissinv(p, lambda) {\n\t\tif((p < 0.0) || (1.0 < p)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\telse if(p == 0.0) {\n\t\t\treturn 0.0;\n\t\t}\n\t\telse if(p == 1.0) {\n\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t}\n\t\t// 初期値を決める\n\t\tlet min = 1;\n\t\tlet max = lambda * 20;\n\t\tlet middle = 0, old_middle = 0; \n\t\t// ニュートンラフソン法だと安定しないので\n\t\t// 挟み込み法（二分法）で求める\n\t\tfor(let i = 0; i < 200; i++) {\n\t\t\tmiddle = Math.round((min + max) / 2);\n\t\t\tconst P = Probability.poisscdf(middle, lambda);\n\t\t\tif(middle === old_middle) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(P > p) {\n\t\t\t\tmax = middle;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmin = middle;\n\t\t\t}\n\t\t\told_middle = middle;\n\t\t\t// console.log(i + \" \" + min + \" \" + P + \" \" + max);\n\t\t}\n\t\treturn middle;\n\t}\n\n\t/**\n\t * Probability density function (PDF) of Student's t-distribution.\n\t * @param {number} t - T-value.\n\t * @param {number} v - The degrees of freedom. (DF)\n\t * @returns {number}\n\t */\n\tstatic tpdf(t, v) {\n\t\tlet y = 1.0 / (Math.sqrt(v) * Probability.beta(0.5, v * 0.5));\n\t\ty *= Math.pow( 1 + t * t / v, - (v + 1) * 0.5);\n\t\treturn y;\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of Student's t-distribution.\n\t * @param {number} t - T-value.\n\t * @param {number} v - The degrees of freedom. (DF)\n\t * @returns {number}\n\t */\n\tstatic tcdf(t, v) {\n\t\tconst y = (t * t) / (v + t * t) ;\n\t\tconst p = Probability.betainc( y, 0.5, v * 0.5 ) * (t < 0 ? -1 : 1);\n\t\treturn 0.5 * (1 + p);\n\t}\n\n\t/**\n\t * Inverse of cumulative distribution function (CDF) of Student's t-distribution.\n\t * @param {number} p - Probability.\n\t * @param {number} v - The degrees of freedom. (DF)\n\t * @returns {number}\n\t */\n\tstatic tinv(p, v) {\n\t\tif((p < 0) || (p > 1)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\tif(p == 0) {\n\t\t\treturn Number.NEGATIVE_INFINITY;\n\t\t}\n\t\telse if(p == 1) {\n\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t}\n\t\telse if(p < 0.5) {\n\t\t\tconst y = Probability.betainv(2.0 * p, 0.5 * v, 0.5);\n\t\t\treturn - Math.sqrt(v / y - v);\n\t\t}\n\t\telse {\n\t\t\tconst y = Probability.betainv(2.0 * (1.0 - p), 0.5 * v, 0.5);\n\t\t\treturn Math.sqrt(v / y - v);\n\t\t}\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of Student's t-distribution that can specify tail.\n\t * @param {number} t - T-value.\n\t * @param {number} v - The degrees of freedom. (DF)\n\t * @param {number} tails - Tail. (1 = the one-tailed distribution, 2 =  the two-tailed distribution.)\n\t * @returns {number}\n\t */\n\tstatic tdist(t, v, tails) {\n\t\treturn (1.0 - Probability.tcdf(Math.abs(t), v)) * tails;\n\t}\n\n\t/**\n\t * Inverse of cumulative distribution function (CDF) of Student's t-distribution in two-sided test.\n\t * @param {number} p - Probability.\n\t * @param {number} v - The degrees of freedom. (DF)\n\t * @returns {number}\n\t */\n\tstatic tinv2(p, v) {\n\t\treturn - Probability.tinv( p * 0.5, v);\n\t}\n\n\t/**\n\t * Probability density function (PDF) of chi-square distribution.\n\t * @param {number} x \n\t * @param {number} k - The degrees of freedom. (DF)\n\t * @returns {number}\n\t */\n\tstatic chi2pdf(x, k) {\n\t\tif(x < 0.0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if(x === 0.0) {\n\t\t\treturn 0.5;\n\t\t}\n\t\tlet y = Math.pow(x, k / 2.0 - 1.0) * Math.exp( - x / 2.0 );\n\t\ty /= Math.pow(2, k / 2.0) * Probability.gamma( k / 2.0);\n\t\treturn y;\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of chi-square distribution.\n\t * @param {number} x \n\t * @param {number} k - The degrees of freedom. (DF)\n\t * @returns {number}\n\t */\n\tstatic chi2cdf(x, k) {\n\t\treturn Probability.gammainc(x / 2.0, k / 2.0);\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of chi-square distribution.\n\t * @param {number} p - Probability.\n\t * @param {number} k - The degrees of freedom. (DF)\n\t * @returns {number}\n\t */\n\tstatic chi2inv(p, k) {\n\t\treturn Probability.gaminv(p, k / 2.0, 2);\n\t}\n\n\t/**\n\t * Probability density function (PDF) of F-distribution.\n\t * @param {number} x\n\t * @param {number} d1 - The degree of freedom of the molecules.\n\t * @param {number} d2 - The degree of freedom of the denominator\n\t * @returns {number}\n\t */\n\tstatic fpdf(x, d1, d2) {\n\t\tif((d1 < 0) || (d2 < 0)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\telse if(x <= 0) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tlet y = 1.0;\n\t\ty *= Math.pow( (d1 * x) / (d1 * x + d2) , d1 / 2.0);\n\t\ty *= Math.pow( 1.0 - ((d1 * x) / (d1 * x + d2)), d2 / 2.0);\n\t\ty /= x * Probability.beta(d1 / 2.0, d2 / 2.0);\n\t\treturn y;\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of F-distribution.\n\t * @param {number} x\n\t * @param {number} d1 - The degree of freedom of the molecules.\n\t * @param {number} d2 - The degree of freedom of the denominator\n\t * @returns {number}\n\t */\n\tstatic fcdf(x, d1, d2) {\n\t\treturn Probability.betacdf( d1 * x / (d1 * x + d2), d1 / 2.0, d2 / 2.0 );\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of F-distribution.\n\t * @param {number} p - Probability.\n\t * @param {number} d1 - The degree of freedom of the molecules.\n\t * @param {number} d2 - The degree of freedom of the denominator\n\t * @returns {number}\n\t */\n\tstatic finv(p, d1, d2) {\n\t\treturn (1.0 / Probability.betainv( 1.0 - p, d2 / 2.0, d1 / 2.0 ) - 1.0) * d2 / d1;\n\t}\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/konpeitoWSH/src/math/core/tools/Probability.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 541,
    "kind": "function",
    "name": "isInteger",
    "memberof": "src/math/core/tools/Probability.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~isInteger",
    "access": "public",
    "export": false,
    "importPath": "konpeito_wsh/src/math/core/tools/Probability.js",
    "importStyle": null,
    "description": "Return true if the value is integer.",
    "lineNumber": 17,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 542,
    "kind": "class",
    "name": "Probability",
    "memberof": "src/math/core/tools/Probability.js",
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability",
    "access": "public",
    "export": true,
    "importPath": "konpeito_wsh/src/math/core/tools/Probability.js",
    "importStyle": "Probability",
    "description": "Collection for calculating probability using real numbers.\n- These methods can be used in the `Matrix`, `Complex` method chain.\n- This class cannot be called directly.",
    "lineNumber": 26,
    "interface": false
  },
  {
    "__docId__": 543,
    "kind": "method",
    "name": "gammaln",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.gammaln",
    "access": "public",
    "description": "Log-gamma function.",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 544,
    "kind": "method",
    "name": "q_gamma",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.q_gamma",
    "access": "public",
    "description": "Incomplete gamma function upper side.",
    "lineNumber": 91,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "gammaln_a",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 545,
    "kind": "method",
    "name": "p_gamma",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.p_gamma",
    "access": "public",
    "description": "Incomplete gamma function lower side.",
    "lineNumber": 132,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "gammaln_a",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 546,
    "kind": "method",
    "name": "gamma",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.gamma",
    "access": "public",
    "description": "Gamma function.",
    "lineNumber": 167,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 547,
    "kind": "method",
    "name": "gammainc",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.gammainc",
    "access": "public",
    "description": "Incomplete gamma function.",
    "lineNumber": 182,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower (default) , \"upper\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 548,
    "kind": "method",
    "name": "gampdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.gampdf",
    "access": "public",
    "description": "Probability density function (PDF) of the gamma distribution.",
    "lineNumber": 205,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 549,
    "kind": "method",
    "name": "gamcdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.gamcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of gamma distribution.",
    "lineNumber": 222,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 550,
    "kind": "method",
    "name": "gaminv",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.gaminv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of gamma distribution.",
    "lineNumber": 236,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 551,
    "kind": "method",
    "name": "beta",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.beta",
    "access": "public",
    "description": "Beta function.",
    "lineNumber": 275,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 552,
    "kind": "method",
    "name": "p_beta",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.p_beta",
    "access": "public",
    "description": "Incomplete beta function lower side.",
    "lineNumber": 287,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 553,
    "kind": "method",
    "name": "q_beta",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.q_beta",
    "access": "public",
    "description": "Incomplete beta function upper side.",
    "lineNumber": 338,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 554,
    "kind": "method",
    "name": "betainc",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.betainc",
    "access": "public",
    "description": "Incomplete beta function.",
    "lineNumber": 350,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower (default) , \"upper\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 555,
    "kind": "method",
    "name": "betapdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.betapdf",
    "access": "public",
    "description": "Probability density function (PDF) of beta distribution.",
    "lineNumber": 373,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 556,
    "kind": "method",
    "name": "betacdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.betacdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of beta distribution.",
    "lineNumber": 393,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 557,
    "kind": "method",
    "name": "betainv",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.betainv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of beta distribution.",
    "lineNumber": 404,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 558,
    "kind": "method",
    "name": "factorial",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.factorial",
    "access": "public",
    "description": "Factorial function, x!.",
    "lineNumber": 454,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 559,
    "kind": "method",
    "name": "nchoosek",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.nchoosek",
    "access": "public",
    "description": "Binomial coefficient, number of all combinations, nCk.",
    "lineNumber": 470,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} nCk"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "nCk"
    }
  },
  {
    "__docId__": 560,
    "kind": "method",
    "name": "erf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.erf",
    "access": "public",
    "description": "Error function.",
    "lineNumber": 489,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 561,
    "kind": "method",
    "name": "erfc",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.erfc",
    "access": "public",
    "description": "Complementary error function.",
    "lineNumber": 498,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 562,
    "kind": "method",
    "name": "erfinv",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.erfinv",
    "access": "public",
    "description": "Inverse function of error function.",
    "lineNumber": 507,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 563,
    "kind": "method",
    "name": "erfcinv",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.erfcinv",
    "access": "public",
    "description": "Inverse function of complementary error function.",
    "lineNumber": 516,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 564,
    "kind": "method",
    "name": "normpdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.normpdf",
    "access": "public",
    "description": "Probability density function (PDF) of normal distribution.",
    "lineNumber": 527,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 565,
    "kind": "method",
    "name": "normcdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.normcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of normal distribution.",
    "lineNumber": 542,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 566,
    "kind": "method",
    "name": "norminv",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.norminv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of normal distribution.",
    "lineNumber": 555,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "Probability."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 567,
    "kind": "method",
    "name": "binopdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.binopdf",
    "access": "public",
    "description": "Probability density function (PDF) of binomial distribution.",
    "lineNumber": 594,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 568,
    "kind": "method",
    "name": "binocdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.binocdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of binomial distribution.",
    "lineNumber": 614,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower (default) , \"upper\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 569,
    "kind": "method",
    "name": "binoinv",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.binoinv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of binomial distribution.",
    "lineNumber": 625,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 570,
    "kind": "method",
    "name": "poisspdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.poisspdf",
    "access": "public",
    "description": "Probability density function (PDF) of Poisson distribution.",
    "lineNumber": 664,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lambda",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 571,
    "kind": "method",
    "name": "poisscdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.poisscdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of Poisson distribution.",
    "lineNumber": 698,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lambda",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 572,
    "kind": "method",
    "name": "poissinv",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.poissinv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of Poisson distribution.",
    "lineNumber": 711,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lambda",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 573,
    "kind": "method",
    "name": "tpdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.tpdf",
    "access": "public",
    "description": "Probability density function (PDF) of Student's t-distribution.",
    "lineNumber": 751,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "T-value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 574,
    "kind": "method",
    "name": "tcdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.tcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of Student's t-distribution.",
    "lineNumber": 763,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "T-value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 575,
    "kind": "method",
    "name": "tinv",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.tinv",
    "access": "public",
    "description": "Inverse of cumulative distribution function (CDF) of Student's t-distribution.",
    "lineNumber": 775,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "Probability."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 576,
    "kind": "method",
    "name": "tdist",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.tdist",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of Student's t-distribution that can specify tail.",
    "lineNumber": 802,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "T-value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "tails",
        "description": "Tail. (1 = the one-tailed distribution, 2 =  the two-tailed distribution.)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 577,
    "kind": "method",
    "name": "tinv2",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.tinv2",
    "access": "public",
    "description": "Inverse of cumulative distribution function (CDF) of Student's t-distribution in two-sided test.",
    "lineNumber": 812,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "Probability."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 578,
    "kind": "method",
    "name": "chi2pdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.chi2pdf",
    "access": "public",
    "description": "Probability density function (PDF) of chi-square distribution.",
    "lineNumber": 822,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 579,
    "kind": "method",
    "name": "chi2cdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.chi2cdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of chi-square distribution.",
    "lineNumber": 840,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 580,
    "kind": "method",
    "name": "chi2inv",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.chi2inv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of chi-square distribution.",
    "lineNumber": 850,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "Probability."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 581,
    "kind": "method",
    "name": "fpdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.fpdf",
    "access": "public",
    "description": "Probability density function (PDF) of F-distribution.",
    "lineNumber": 861,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 582,
    "kind": "method",
    "name": "fcdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.fcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of F-distribution.",
    "lineNumber": 882,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 583,
    "kind": "method",
    "name": "finv",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.finv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of F-distribution.",
    "lineNumber": 893,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "Probability."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 584,
    "kind": "file",
    "name": "src/math/core/tools/Random.js",
    "content": "/**\n * The script is part of konpeitoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\n/**\n * Multiply two 32-bit integers and output a 32-bit integer.\n * @param {number} x1 \n * @param {number} x2 \n * @returns {number}\n * @private\n * @ignore\n */\nconst multiplication32 = function(x1, x2) {\n\tlet y = ((x1 & 0xFFFF) * (x2 & 0xFFFF)) >>> 0;\n\tlet b = (x1 & 0xFFFF) * (x2 >>> 16);\n\ty = (y + ((b & 0xFFFF) << 16)) >>> 0;\n\tb = (x1 >>> 16) * (x2 & 0xFFFF);\n\ty = (y + ((b & 0xFFFF) << 16)) >>> 0;\n\treturn y;\n};\n\n/**\n * 乱数を扱うクラス\n */\nexport default class Random {\n\t\n\t/**\n\t * 初期化\n\t * @param {number} [seed] - Seed number for random number generation. If not specified, create from time.\n\t */\n\tconstructor(seed) {\n\n\t\t/**\n\t\t * @type {number}\n\t\t * @private\n\t\t * @ignore\n\t\t */\n\t\tthis.x = 123456789;\n\t\t\n\t\t/**\n\t\t * @type {number}\n\t\t * @private\n\t\t * @ignore\n\t\t */\n\t\tthis.y = 362436069;\n\t\t\n\t\t/**\n\t\t * @type {number}\n\t\t * @private\n\t\t * @ignore\n\t\t */\n\t\tthis.z = 521288629;\n\t\t\n\t\t/**\n\t\t * @type {number}\n\t\t * @private\n\t\t * @ignore\n\t\t */\n\t\tthis.w = 88675123;\n\n\t\tif(seed !== undefined) {\n\t\t\tthis.setSeed(seed);\n\t\t}\n\t\telse {\n\t\t\t// 線形合同法で適当に乱数を作成する\n\t\t\tconst new_seed = ((new Date()).getTime() + Random.seedUniquifier) & 0xFFFFFFFF;\n\t\t\tRandom.seedUniquifier = (Random.seedUniquifier + 1) & 0xFFFFFFFF;\n\t\t\tthis.setSeed(new_seed);\n\t\t}\n\t}\n\n\t/**\n\t * シード値の初期化\n\t * @param {number} seed\n\t */\n\tsetSeed(seed) {\n\t\t// seedを使用して線形合同法で初期値を設定\n\t\tlet random_seed = seed;\n\t\trandom_seed = (multiplication32(random_seed, 214013) + 2531011) >>> 0;\n\t\tthis.z = random_seed;\n\t\trandom_seed = (multiplication32(random_seed, 214013) + 2531011) >>> 0;\n\t\tthis.w = random_seed;\n\n\t\t/**\n\t\t * Is keep random numbers based on Gaussian distribution.\n\t\t * @private\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.haveNextNextGaussian = false;\n\t\t\n\t\t/**\n\t\t * Next random number based on Gaussian distribution.\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis.nextNextGaussian = 0;\n\t}\n\n\t/**\n\t * 32-bit random number.\n\t * @returns {number} - 32ビットの乱数\n\t * @private\n\t */\n\tgenrand_int32() {\n\t\tconst t = this.x ^ (this.x << 11);\n\t\tthis.x = this.y;\n\t\tthis.y = this.z;\n\t\tthis.z = this.w;\n\t\tthis.w = (this.w ^ (this.w >>> 19)) ^ (t ^ (t >>> 8));\n\t\treturn this.w;\n\t}\n\n\t/**\n\t * 指定したビット長以下で表せられる乱数生成\n\t * @param {number} bits - Required number of bits (up to 64 possible).\n\t * @returns {number}\n\t */\n\tnext(bits) {\n\t\tif(bits === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if(bits === 32) {\n\t\t\treturn this.genrand_int32();\n\t\t}\n\t\telse if(bits < 32) {\n\t\t\t// 線形合同法ではないため\n\t\t\t// 上位のビットを使用しなくてもいいがJavaっぽく。\n\t\t\treturn this.genrand_int32() >>> (32 - bits);\n\t\t}\n\t\t// double型のため、52ビットまでは、整数として出力可能\n\t\telse if(bits === 63) {\n\t\t\t// 正の値を出力するように調節\n\t\t\treturn this.next(32) * 0x80000000 + this.next(32);\n\t\t}\n\t\telse if(bits === 64) {\n\t\t\treturn this.next(32) * 0x100000000 + this.next(32);\n\t\t}\n\t\telse if(bits < 64) {\n\t\t\treturn this.genrand_int32() * (1 << (bits - 32)) + (this.genrand_int32()  >>> (64 - bits));\n\t\t}\n\t}\n\n\t/**\n\t * 8ビット長整数の乱数の配列\n\t * @param {number} size - 必要な長さ\n\t * @returns {Array<number>}\n\t */\n\tnextBytes(size) {\n\t\tconst y = new Array(size);\n\t\t// 配列yに乱数を入れる\n\t\t// 8ビットのために、32ビット乱数を1回回すのはもったいない\n\t\tfor(let i = 0;i < y.length; i++) {\n\t\t\ty[i] = this.next(8);\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * 16ビット長整数の乱数\n\t * @returns {number}\n\t */\n\tnextShort() {\n\t\treturn this.next(16);\n\t}\n\n\t/**\n\t * 32ビット長整数の乱数\n\t * @param {number} [x] - 指定した値未満の数値を作る\n\t * @returns {number}\n\t */\n\tnextInt(x) {\n\t\tif((x !== undefined) && (typeof x === \"number\")) {\n\t\t\tlet r, y;\n\t\t\tdo {\n\t\t\t\tr = this.genrand_int32() >>> 0;\n\t\t\t\ty = r % x;\n\t\t\t} while((r - y + x) > 0x100000000 );\n\t\t\treturn y;\n\t\t}\n\t\treturn this.next(32) | 0;\n\t}\n\n\t/**\n\t * 64ビット長整数の乱数\n\t * @returns {number}\n\t */\n\tnextLong() {\n\t\treturn this.next(64);\n\t}\n\n\t/**\n\t * bool値の乱数\n\t * @returns {boolean}\n\t */\n\tnextBoolean() {\n\t\t// 1ビットのために、32ビット乱数を1回回すのはもったいない\n\t\treturn (this.next(1) !== 0);\n\t}\n\n\t/**\n\t * float精度の実数\n\t * @returns {number}\n\t */\n\tnextFloat() {\n\t\treturn (this.next(24) / 0x1000000);\n\t}\n\n\t/**\n\t * double精度の実数\n\t * @returns {number}\n\t */\n\tnextDouble() {\n\t\tconst a1 = this.next(26) * 0x8000000 + this.next(27);\n\t\tconst a2 = 0x8000000 * 0x4000000;\n\t\treturn (a1 / a2);\n\t}\n\n\t/**\n\t * ガウシアン分布に従う乱数\n\t * @returns {number}\n\t */\n\tnextGaussian() {\n\t\tif(this.haveNextNextGaussian) {\n\t\t\tthis.haveNextNextGaussian = false;\n\t\t\treturn this.nextNextGaussian;\n\t\t}\n\t\t// Box-Muller法\n\t\tconst a = Math.sqrt( -2 * Math.log( this.nextDouble() ) );\n\t\tconst b = 2 * Math.PI * this.nextDouble();\n\t\tconst y = a * Math.sin(b);\n\t\tthis.nextNextGaussian = a * Math.cos(b);\n\t\tthis.haveNextNextGaussian = true;\n\t\treturn y;\n\t}\n\n}\n\n/**\n * 乱数生成用の初期シード値\n * @type {number}\n * @private\n * @ignore\n */\nRandom.seedUniquifier = 0x87654321;\n\n",
    "static": true,
    "longname": "D:/JavaScript/konpeitoWSH/src/math/core/tools/Random.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 585,
    "kind": "function",
    "name": "multiplication32",
    "memberof": "src/math/core/tools/Random.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Random.js~multiplication32",
    "access": "private",
    "export": false,
    "importPath": "konpeito_wsh/src/math/core/tools/Random.js",
    "importStyle": null,
    "description": "Multiply two 32-bit integers and output a 32-bit integer.",
    "lineNumber": 19,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 586,
    "kind": "class",
    "name": "Random",
    "memberof": "src/math/core/tools/Random.js",
    "static": true,
    "longname": "src/math/core/tools/Random.js~Random",
    "access": "public",
    "export": true,
    "importPath": "konpeito_wsh/src/math/core/tools/Random.js",
    "importStyle": "Random",
    "description": "乱数を扱うクラス",
    "lineNumber": 31,
    "interface": false
  },
  {
    "__docId__": 587,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/core/tools/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#constructor",
    "access": "public",
    "description": "初期化",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "seed",
        "description": "Seed number for random number generation. If not specified, create from time."
      }
    ]
  },
  {
    "__docId__": 588,
    "kind": "member",
    "name": "x",
    "memberof": "src/math/core/tools/Random.js~Random",
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#x",
    "access": "private",
    "description": "",
    "lineNumber": 44,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 589,
    "kind": "member",
    "name": "y",
    "memberof": "src/math/core/tools/Random.js~Random",
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#y",
    "access": "private",
    "description": "",
    "lineNumber": 51,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 590,
    "kind": "member",
    "name": "z",
    "memberof": "src/math/core/tools/Random.js~Random",
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#z",
    "access": "private",
    "description": "",
    "lineNumber": 58,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 591,
    "kind": "member",
    "name": "w",
    "memberof": "src/math/core/tools/Random.js~Random",
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#w",
    "access": "private",
    "description": "",
    "lineNumber": 65,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 592,
    "kind": "method",
    "name": "setSeed",
    "memberof": "src/math/core/tools/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#setSeed",
    "access": "public",
    "description": "シード値の初期化",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 595,
    "kind": "member",
    "name": "haveNextNextGaussian",
    "memberof": "src/math/core/tools/Random.js~Random",
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#haveNextNextGaussian",
    "access": "private",
    "description": "Is keep random numbers based on Gaussian distribution.",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 596,
    "kind": "member",
    "name": "nextNextGaussian",
    "memberof": "src/math/core/tools/Random.js~Random",
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#nextNextGaussian",
    "access": "private",
    "description": "Next random number based on Gaussian distribution.",
    "lineNumber": 102,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 597,
    "kind": "method",
    "name": "genrand_int32",
    "memberof": "src/math/core/tools/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#genrand_int32",
    "access": "private",
    "description": "32-bit random number.",
    "lineNumber": 110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} - 32ビットの乱数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "32ビットの乱数"
    },
    "params": []
  },
  {
    "__docId__": 602,
    "kind": "method",
    "name": "next",
    "memberof": "src/math/core/tools/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#next",
    "access": "public",
    "description": "指定したビット長以下で表せられる乱数生成",
    "lineNumber": 124,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bits",
        "description": "Required number of bits (up to 64 possible)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 603,
    "kind": "method",
    "name": "nextBytes",
    "memberof": "src/math/core/tools/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#nextBytes",
    "access": "public",
    "description": "8ビット長整数の乱数の配列",
    "lineNumber": 154,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "必要な長さ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 604,
    "kind": "method",
    "name": "nextShort",
    "memberof": "src/math/core/tools/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#nextShort",
    "access": "public",
    "description": "16ビット長整数の乱数",
    "lineNumber": 168,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 605,
    "kind": "method",
    "name": "nextInt",
    "memberof": "src/math/core/tools/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#nextInt",
    "access": "public",
    "description": "32ビット長整数の乱数",
    "lineNumber": 177,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "x",
        "description": "指定した値未満の数値を作る"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 606,
    "kind": "method",
    "name": "nextLong",
    "memberof": "src/math/core/tools/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#nextLong",
    "access": "public",
    "description": "64ビット長整数の乱数",
    "lineNumber": 193,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 607,
    "kind": "method",
    "name": "nextBoolean",
    "memberof": "src/math/core/tools/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#nextBoolean",
    "access": "public",
    "description": "bool値の乱数",
    "lineNumber": 201,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 608,
    "kind": "method",
    "name": "nextFloat",
    "memberof": "src/math/core/tools/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#nextFloat",
    "access": "public",
    "description": "float精度の実数",
    "lineNumber": 210,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 609,
    "kind": "method",
    "name": "nextDouble",
    "memberof": "src/math/core/tools/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#nextDouble",
    "access": "public",
    "description": "double精度の実数",
    "lineNumber": 218,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 610,
    "kind": "method",
    "name": "nextGaussian",
    "memberof": "src/math/core/tools/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#nextGaussian",
    "access": "public",
    "description": "ガウシアン分布に従う乱数",
    "lineNumber": 228,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 614,
    "kind": "file",
    "name": "src/math/core/tools/Statistics.js",
    "content": "﻿/**\n * The script is part of konpeitoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport Complex from \"../Complex.js\";\nimport Matrix from \"../Matrix.js\";\n\n/**\n * Collection of calculation settings for matrix.\n * - Available options vary depending on the method.\n * @typedef {Object} KStatisticsSettings\n * @property {?string|?number} [dimension=\"auto\"] Calculation direction. 0/\"auto\", 1/\"row\", 2/\"column\", 3/\"both\".\n * @property {Object} [correction] Correction value. For statistics. 0(unbiased), 1(sample).\n */\n\n/**\n * Class for statistical processing for `Matrix` class.\n * - These methods can be used in the `Matrix` method chain.\n * - This class cannot be called directly.\n */\nexport default class Statistics {\n\n\t/**\n\t * Maximum number.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix} max([A, B])\n\t */\n\tstatic max(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tlet x = data[0];\n\t\t\tfor(let i = 1; i < data.length; i++) {\n\t\t\t\tif(x.compareTo(data[i]) < 0) {\n\t\t\t\t\tx = data[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn [x];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\t\n\t/**\n\t * Minimum number.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix} min([A, B])\n\t */\n\tstatic min(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tlet x = data[0];\n\t\t\tfor(let i = 1; i < data.length; i++) {\n\t\t\t\tif(x.compareTo(data[i]) > 0) {\n\t\t\t\t\tx = data[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn [x];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Sum.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic sum(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\t// カハンの加算アルゴリズム\n\t\t\tlet sum = Complex.ZERO;\n\t\t\tlet delta = Complex.ZERO;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tconst new_number = data[i].add(delta);\n\t\t\t\tconst new_sum = sum.add(new_number);\n\t\t\t\tdelta = new_sum.sub(sum).sub(new_number);\n\t\t\t\tsum = new_sum;\n\t\t\t}\n\t\t\treturn [sum];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Arithmetic average.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic mean(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\t// カハンの加算アルゴリズム\n\t\t\tlet sum = Complex.ZERO;\n\t\t\tlet delta = Complex.ZERO;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tconst new_number = data[i].add(delta);\n\t\t\t\tconst new_sum = sum.add(new_number);\n\t\t\t\tdelta = new_sum.sub(sum).sub(new_number);\n\t\t\t\tsum = new_sum;\n\t\t\t}\n\t\t\treturn [sum.div(data.length)];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Product of array elements.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic prod(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tlet x = Complex.ONE;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tx = x.mul(data[i]);\n\t\t\t}\n\t\t\treturn [x];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Geometric mean.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic geomean(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tlet x = Complex.ONE;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tx = x.mul(data[i]);\n\t\t\t}\n\t\t\treturn [x.pow(Complex.create(data.length).inv())];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\t\n\t/**\n\t * Median.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic median(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\t/**\n\t\t * @param {Complex} a\n\t\t * @param {Complex} b\n\t\t * @returns {number}\n\t\t */\n\t\tconst compare = function(a, b){\n\t\t\treturn a.compareTo(b);\n\t\t};\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tdata.sort(compare);\n\t\t\tlet y;\n\t\t\tif((data.length % 2) === 1) {\n\t\t\t\ty = data[Math.floor(data.length / 2)];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst x1 = data[Math.floor(data.length / 2) - 1];\n\t\t\t\tconst x2 = data[Math.floor(data.length / 2)];\n\t\t\t\ty = x1.add(x2).div(Complex.TWO);\n\t\t\t}\n\t\t\treturn [y];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Mode.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic mode(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\t/**\n\t\t * @param {Complex} a\n\t\t * @param {Complex} b\n\t\t * @returns {number}\n\t\t */\n\t\tconst compare = function(a, b){\n\t\t\treturn a.compareTo(b);\n\t\t};\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tdata.sort(compare);\n\t\t\t/**\n\t\t\t * @type {any}\n\t\t\t */\n\t\t\tconst map = {};\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tconst str = data[i].real + \" \" + data[i].imag;\n\t\t\t\tif(!map[str]) {\n\t\t\t\t\tmap[str] = {\n\t\t\t\t\t\tcomplex : data[i],\n\t\t\t\t\t\tvalue : 1\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tmap[str].value++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet max_complex = Complex.ZERO;\n\t\t\tlet max_number = Number.NEGATIVE_INFINITY;\n\t\t\tfor(const key in map) {\n\t\t\t\tconst tgt = map[key];\n\t\t\t\tif(tgt.value > max_number) {\n\t\t\t\t\tmax_number\t= tgt.value;\n\t\t\t\t\tmax_complex\t= tgt.complex;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn [max_complex];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Moment.\n\t * - Moment of order n. Equivalent to the definition of variance at 2.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {number} nth_order\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic moment(x, nth_order, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst M = Statistics.mean(X);\n\t\t// 補正値 0(不偏分散), 1(標本分散)。規定値は、標本分散とする\n\t\tconst cor = !(type && typeof type.correction === \"number\") ? 1: Matrix._toDouble(type.correction);\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst order = Matrix._toComplex(nth_order);\n\t\tlet col = 0;\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tlet mean;\n\t\t\tif(M.isScalar()) {\n\t\t\t\tmean = M.scalar();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmean = M.getComplex(col++);\n\t\t\t}\n\t\t\tlet x = Complex.ZERO;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\t// 計算方法について\n\t\t\t\t// ・複素数は、ノルムをとらずに複素数用のpowを使用したほうがいいのか\n\t\t\t\t// ・分散と同様にnormで計算したほうがいいのか\n\t\t\t\t// 複素数でのモーメントの定義がないため不明であるが、\n\t\t\t\t// 分散を拡張した考えであれば、normをとった累乗のほうが良いと思われる。\n\t\t\t\tconst a = data[i].sub(mean);\n\t\t\t\tx = x.add(a.pow(order));\n\t\t\t}\n\t\t\tif(data.length === 1) {\n\t\t\t\treturn [x.div(data.length)];\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn [x.div(data.length - 1 + cor)];\n\t\t\t}\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Variance.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic variance(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst M = Statistics.mean(X);\n\t\t// 補正値 0(不偏分散), 1(標本分散)。規定値は、不偏分散とする\n\t\tconst cor = !(type && typeof type.correction === \"number\") ? 0: Matrix._toDouble(type.correction);\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tlet col = 0;\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tif(data.length === 1) {\n\t\t\t\t// 要素が1であれば、分散は0固定\n\t\t\t\treturn [Complex.ZERO];\n\t\t\t}\n\t\t\tconst mean = M.getComplex(col++);\n\t\t\t// 分散は、ノルムの2乗で計算するため必ず実数になる。\n\t\t\tlet x = 0;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tconst a = data[i].sub(mean).norm();\n\t\t\t\tx += a * a;\n\t\t\t}\n\t\t\treturn [Complex.create(x / (data.length - 1 + cor))];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Standard deviation.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic std(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\t// 補正値 0(不偏分散), 1(標本分散)。規定値は、不偏分散とする\n\t\tconst cor = !(type && typeof type.correction === \"number\") ? 0: Matrix._toDouble(type.correction);\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst M = Statistics.variance(X, { correction : cor, dimension : dim });\n\t\tM._each(function(num) {\n\t\t\treturn num.sqrt();\n\t\t});\n\t\treturn M;\n\t}\n\n\t/**\n\t * Mean absolute deviation.\n\t * - The \"algorithm\" can choose \"0/mean\"(default) and \"1/median\".\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {?string|?number} [algorithm]\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic mad(x, algorithm, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst alg = !algorithm ? \"mean\" : (typeof algorithm === \"string\" ? algorithm : Matrix._toInteger(algorithm));\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tif((alg === \"mean\") || (alg === 0)) {\n\t\t\treturn Statistics.mean(X.sub(Statistics.mean(X, {dimension : dim} )).abs(), {dimension : dim});\n\t\t}\n\t\telse if((alg === \"median\") || (alg === 1)) {\n\t\t\treturn Statistics.median(X.sub(Statistics.median(X, {dimension : dim} )).abs(), {dimension : dim});\n\t\t}\n\t\telse {\n\t\t\tthrow \"mad unsupported argument \" + alg;\n\t\t}\n\t}\n\n\t/**\n\t * Skewness.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic skewness(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\t// 補正値 0(不偏), 1(標本)。規定値は、標本とする\n\t\tconst cor = !(type && typeof type.correction === \"number\") ? 1: Matrix._toDouble(type.correction);\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst order = Statistics.moment(X, 3, { correction : cor, dimension : dim });\n\t\tconst std = Statistics.std(X, { correction : cor, dimension : dim });\n\t\tif(cor === 1) {\n\t\t\treturn order.dotdiv(std.dotpow(3));\n\t\t}\n\t\telse {\n\t\t\treturn order.dotdiv(std.dotpow(3)).dotmul(2);\n\t\t}\n\t}\n\n\t/**\n\t * Covariance matrix or Covariance value.\n\t * - Get a variance-covariance matrix from 1 matrix.\n\t * - Get a covariance from 2 vectors.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings|import(\"../Matrix.js\").KMatrixInputData} [y_or_type]\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic cov(x, y_or_type, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\t// 補正値 0(不偏分散), 1(標本分散)。規定値は、不偏分散とする\n\t\tlet cor = 0;\n\t\tlet Y = null;\n\t\tif(y_or_type !== undefined) {\n\t\t\tif(type !== undefined) {\n\t\t\t\tcor = !(type && typeof type.correction === \"number\") ? 0: Matrix._toDouble(type.correction);\n\t\t\t\tY = Matrix._toMatrix(y_or_type);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(typeof y_or_type === \"object\" && (\"correction\" in y_or_type)){\n\t\t\t\t\tcor = Matrix._toDouble(y_or_type.correction);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tY = Matrix._toMatrix(y_or_type);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// 1つの行列から分散共分散行列を作成する\n\t\tif(Y === null) {\n\t\t\tif(X.isVector()) {\n\t\t\t\treturn Statistics.variance(X, {correction : cor});\n\t\t\t}\n\t\t\tconst correction = X.row_length === 1 ? 1 : cor;\n\t\t\tconst arr = X.matrix_array;\n\t\t\tconst mean = Statistics.mean(X).matrix_array[0];\n\t\t\t// 上三角行列、対角行列\n\t\t\tconst y = new Array(X.column_length);\n\t\t\tfor(let a = 0; a < X.column_length; a++) {\n\t\t\t\tconst a_mean = mean[a];\n\t\t\t\ty[a] = new Array(X.column_length);\n\t\t\t\tfor(let b = a; b < X.column_length; b++) {\n\t\t\t\t\tconst b_mean = mean[b];\n\t\t\t\t\tlet sum = Complex.ZERO;\n\t\t\t\t\tfor(let row = 0; row < X.row_length; row++) {\n\t\t\t\t\t\tsum = sum.add((arr[row][a].sub(a_mean)).dot(arr[row][b].sub(b_mean)));\n\t\t\t\t\t}\n\t\t\t\t\ty[a][b] = sum.div(X.row_length - 1 + correction);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 下三角行列を作る\n\t\t\tfor(let row = 1; row < y[0].length; row++) {\n\t\t\t\tfor(let col = 0; col < row; col++) {\n\t\t\t\t\ty[row][col] = y[col][row];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\t// 2つのベクトルから共分散を求める\n\t\telse {\n\t\t\tif(!X.isVector() && !Y.isVector()) {\n\t\t\t\tthrow \"vector not specified\";\n\t\t\t}\n\t\t\tif(X.length() !== Y.length()) {\n\t\t\t\tthrow \"X.length !== Y.length\";\n\t\t\t}\n\t\t\tconst x_mean = Statistics.mean(X).scalar();\n\t\t\tconst y_mean = Statistics.mean(Y).scalar();\n\t\t\tconst length = X.length();\n\t\t\tconst correction = length === 1 ? 1 : cor;\n\t\t\tlet sum = Complex.ZERO;\n\t\t\tfor(let i = 0; i < length; i++) {\n\t\t\t\tsum = sum.add((X.getComplex(i).sub(x_mean)).dot(Y.getComplex(i).sub(y_mean)));\n\t\t\t}\n\t\t\treturn new Matrix(sum.div(length - 1 + correction));\n\t\t}\n\t}\n\n\t/**\n\t * The samples are standardize to a mean value of 0, standard deviation of 1.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic standardization(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst mean_zero = X.sub(Statistics.mean(X, type));\n\t\tconst std_one = mean_zero.dotdiv(Statistics.std(mean_zero, type));\n\t\treturn std_one;\n\t}\n\n\t/**\n\t * Correlation matrix or Correlation coefficient.\n\t * - Get a correlation matrix from 1 matrix.\n\t * - Get a correlation coefficient from 2 vectors.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings|import(\"../Matrix.js\").KMatrixInputData} [y_or_type]\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic corrcoef(x, y_or_type, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\t// 補正値 0(不偏分散), 1(標本分散)。規定値は、不偏分散とする\n\t\tlet Y = null;\n\t\tif(y_or_type !== undefined) {\n\t\t\tif(type !== undefined) {\n\t\t\t\tY = Matrix._toMatrix(y_or_type);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(!(typeof y_or_type === \"object\" && (\"correction\" in y_or_type))){\n\t\t\t\t\tY = Matrix._toMatrix(y_or_type);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// 1つの行列から相関行列を作成する\n\t\tif(Y === null) {\n\t\t\treturn Statistics.cov(Statistics.standardization(X, type), type);\n\t\t}\n\t\t// 2つのベクトルから相関係数を求める\n\t\telse {\n\t\t\tif(!X.isVector() && !Y.isVector()) {\n\t\t\t\tthrow \"vector not specified\";\n\t\t\t}\n\t\t\tif(X.length() !== Y.length()) {\n\t\t\t\tthrow \"X.length[\" + X.length() + \"] !== Y.length[\" + Y.length() + \"]\";\n\t\t\t}\n\t\t\tconst covariance = Statistics.cov(X, Y, type);\n\t\t\tconst Xsd = X.std(type);\n\t\t\tconst Ysd = Y.std(type);\n\t\t\treturn covariance.div(Xsd.mul(Ysd));\n\t\t}\n\t}\n\n\t/**\n\t * Sort.\n\t * - The \"order\" can choose \"ascend\"(default) and \"descend\".\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {string} [order]\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic sort(x, order, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst order_type = !order ? \"ascend\" : order;\n\t\t/**\n\t\t * @type {function(Complex, Complex): number }\n\t\t */\n\t\tlet compare;\n\t\tif(order_type === \"ascend\") {\n\t\t\tcompare = function(a, b){\n\t\t\t\treturn a.compareTo(b);\n\t\t\t};\n\t\t}\n\t\telse {\n\t\t\tcompare = function(a, b){\n\t\t\t\treturn b.compareTo(a);\n\t\t\t};\n\t\t}\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tdata.sort(compare);\n\t\t\treturn data;\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/konpeitoWSH/src/math/core/tools/Statistics.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 615,
    "kind": "typedef",
    "name": "KStatisticsSettings",
    "memberof": "src/math/core/tools/Statistics.js",
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~KStatisticsSettings",
    "access": "public",
    "description": "Collection of calculation settings for matrix.\n- Available options vary depending on the method.",
    "properties": [
      {
        "nullable": true,
        "types": [
          "string",
          "?number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"auto\"",
        "defaultRaw": "auto",
        "name": "dimension",
        "description": "Calculation direction. 0/\"auto\", 1/\"row\", 2/\"column\", 3/\"both\"."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "correction",
        "description": "Correction value. For statistics. 0(unbiased), 1(sample)."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "KStatisticsSettings"
    }
  },
  {
    "__docId__": 616,
    "kind": "class",
    "name": "Statistics",
    "memberof": "src/math/core/tools/Statistics.js",
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics",
    "access": "public",
    "export": true,
    "importPath": "konpeito_wsh/src/math/core/tools/Statistics.js",
    "importStyle": "Statistics",
    "description": "Class for statistical processing for `Matrix` class.\n- These methods can be used in the `Matrix` method chain.\n- This class cannot be called directly.",
    "lineNumber": 27,
    "interface": false
  },
  {
    "__docId__": 617,
    "kind": "method",
    "name": "max",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.max",
    "access": "public",
    "description": "Maximum number.",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} max([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "max([A, B])"
    }
  },
  {
    "__docId__": 618,
    "kind": "method",
    "name": "min",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.min",
    "access": "public",
    "description": "Minimum number.",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} min([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "min([A, B])"
    }
  },
  {
    "__docId__": 619,
    "kind": "method",
    "name": "sum",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.sum",
    "access": "public",
    "description": "Sum.",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 620,
    "kind": "method",
    "name": "mean",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.mean",
    "access": "public",
    "description": "Arithmetic average.",
    "lineNumber": 113,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 621,
    "kind": "method",
    "name": "prod",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.prod",
    "access": "public",
    "description": "Product of array elements.",
    "lineNumber": 141,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 622,
    "kind": "method",
    "name": "geomean",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.geomean",
    "access": "public",
    "description": "Geometric mean.",
    "lineNumber": 164,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 623,
    "kind": "method",
    "name": "median",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.median",
    "access": "public",
    "description": "Median.",
    "lineNumber": 187,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 624,
    "kind": "method",
    "name": "mode",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.mode",
    "access": "public",
    "description": "Mode.",
    "lineNumber": 224,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 625,
    "kind": "method",
    "name": "moment",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.moment",
    "access": "public",
    "description": "Moment.\n- Moment of order n. Equivalent to the definition of variance at 2.",
    "lineNumber": 279,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "nth_order",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 626,
    "kind": "method",
    "name": "variance",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.variance",
    "access": "public",
    "description": "Variance.",
    "lineNumber": 325,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 627,
    "kind": "method",
    "name": "std",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.std",
    "access": "public",
    "description": "Standard deviation.",
    "lineNumber": 359,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 628,
    "kind": "method",
    "name": "mad",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.mad",
    "access": "public",
    "description": "Mean absolute deviation.\n- The \"algorithm\" can choose \"0/mean\"(default) and \"1/median\".",
    "lineNumber": 379,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "string",
          "?number"
        ],
        "spread": false,
        "optional": true,
        "name": "algorithm",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 629,
    "kind": "method",
    "name": "skewness",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.skewness",
    "access": "public",
    "description": "Skewness.",
    "lineNumber": 400,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 630,
    "kind": "method",
    "name": "cov",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.cov",
    "access": "public",
    "description": "Covariance matrix or Covariance value.\n- Get a variance-covariance matrix from 1 matrix.\n- Get a covariance from 2 vectors.",
    "lineNumber": 424,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings",
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "y_or_type",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 631,
    "kind": "method",
    "name": "standardization",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.standardization",
    "access": "public",
    "description": "The samples are standardize to a mean value of 0, standard deviation of 1.",
    "lineNumber": 499,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 632,
    "kind": "method",
    "name": "corrcoef",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.corrcoef",
    "access": "public",
    "description": "Correlation matrix or Correlation coefficient.\n- Get a correlation matrix from 1 matrix.\n- Get a correlation coefficient from 2 vectors.",
    "lineNumber": 515,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings",
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "y_or_type",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 633,
    "kind": "method",
    "name": "sort",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.sort",
    "access": "public",
    "description": "Sort.\n- The \"order\" can choose \"ascend\"(default) and \"descend\".",
    "lineNumber": 556,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "order",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 634,
    "kind": "file",
    "name": "src/math/tools/Polyfill.js",
    "content": "/**\n * The script is part of konpeitoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\n/**\n * Class for improving compatibility.\n * @ignore\n */\nexport default class Polyfill {\n\n\t/**\n\t * Improved compatibility\n\t * @private\n\t * @ignore\n\t */\n\tstatic run() {\n\t\tif(Math.imul === undefined) {\n\t\t\tMath.imul = function(x1, x2) {\n\t\t\t\tlet y = ((x1 & 0xFFFF) * (x2 & 0xFFFF)) >>> 0;\n\t\t\t\tlet b = (x1 & 0xFFFF) * (x2 >>> 16);\n\t\t\t\ty = (y + ((b & 0xFFFF) << 16)) >>> 0;\n\t\t\t\tb = (x1 >>> 16) * (x2 & 0xFFFF);\n\t\t\t\ty = (y + ((b & 0xFFFF) << 16));\n\t\t\t\treturn (y & 0xFFFFFFFF);\n\t\t\t};\n\t\t}\n\t\tif(Math.trunc === undefined) {\n\t\t\tMath.trunc = function(x) {\n\t\t\t\treturn x > 0 ? Math.floor(x) : Math.ceil(x);\n\t\t\t};\n\t\t}\n\t\tif(Number.isFinite === undefined) {\n\t\t\tNumber.isFinite = isFinite;\n\t\t}\n\t\tif(Number.isInteger === undefined) {\n\t\t\t/**\n\t\t\t * @param {number} x\n\t\t\t */\n\t\t\tNumber.isInteger = function(x) {\n\t\t\t\treturn isFinite(x) && ((x | 0) === x);\n\t\t\t};\n\t\t}\n\t\tif(Number.isNaN === undefined) {\n\t\t\tNumber.isNaN = isNaN;\n\t\t}\n\t\tif(Number.NaN === undefined) {\n\t\t\t// @ts-ignore\n\t\t\t// eslint-disable-next-line no-global-assign\n\t\t\tNumber.NaN = NaN;\n\t\t}\n\t\tif(Number.EPSILON === undefined) {\n\t\t\t// @ts-ignore\n\t\t\t// eslint-disable-next-line no-global-assign\n\t\t\tNumber.EPSILON = 2.220446049250313e-16;\n\t\t}\n\t\tif(Number.MIN_SAFE_INTEGER === undefined) {\n\t\t\t// @ts-ignore\n\t\t\t// eslint-disable-next-line no-global-assign\n\t\t\tNumber.MIN_SAFE_INTEGER = -9007199254740991;\n\t\t}\n\t\tif(Number.MAX_SAFE_INTEGER === undefined) {\n\t\t\t// @ts-ignore\n\t\t\t// eslint-disable-next-line no-global-assign\n\t\t\tNumber.MAX_SAFE_INTEGER = 9007199254740991;\n\t\t}\n\t\tif(Number.parseFloat === undefined) {\n\t\t\tNumber.parseFloat = parseFloat;\n\t\t}\n\t\tif(Number.parseInt === undefined) {\n\t\t\tNumber.parseInt = parseInt;\n\t\t}\n\t}\n}\n\nPolyfill.run();\n\n",
    "static": true,
    "longname": "D:/JavaScript/konpeitoWSH/src/math/tools/Polyfill.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 635,
    "kind": "class",
    "name": "Polyfill",
    "memberof": "src/math/tools/Polyfill.js",
    "static": true,
    "longname": "src/math/tools/Polyfill.js~Polyfill",
    "access": "public",
    "export": true,
    "importPath": "konpeito_wsh/src/math/tools/Polyfill.js",
    "importStyle": "Polyfill",
    "description": "Class for improving compatibility.",
    "lineNumber": 15,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 636,
    "kind": "method",
    "name": "run",
    "memberof": "src/math/tools/Polyfill.js~Polyfill",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Polyfill.js~Polyfill.run",
    "access": "private",
    "description": "Improved compatibility",
    "lineNumber": 22,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "kind": "index",
    "content": "# konpeitoWSH\n\n[![ESDoc coverage badge](https://natade-jp.github.io/konpeitoWSH/badge.svg)](https://natade-jp.github.io/SenkoWSH/)\n![MIT License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat)\n\n## 概要\n\n高機能数値計算ライブラリ [konpeito](https://github.com/natade-jp/konpeito) をベースに `WSH JScript` 用に機能を絞って分離したライブラリです。\n\n- Windows 上で動作する WSH JScript 用汎用ライブラリ\n- Visual Studio Code で JScript での開発を目的とする\n- 統計計算部分（`Complex`, `Matrix` 含む）が行える\n\n`examples`の`Example.wsf`を実行してみれば、雰囲気はつかめるかと思います。\n詳しい関数の説明は、[ヘルプファイル](https://natade-jp.github.io/SenkoWSH/)を参照。\n\n## 注意\n\n- 本ライブラリは、`Polyfill`系のコードを含んでいますが、全機能は含んでおりませんので注意してください。\n各変数やメソッドは未定義の場合に設定されるようになっているため、自分のコードを使用したい場合は本ライブラリより先に`include`して下さい。\n詳細は、`/src/polyfill` 配下のファイルを確認してください。\n\n## フォルダ構成\n\n- `build` - `JScirpt` で動作するライブラリ及び、Visual Studio Code 用の型定義ファイル\n- `src` - コンパイル前のソースコードフォルダ\n- `docs` - 自動生成したヘルプファイル\n- `scripts` - `Node.js` で実行するスクリプトファイル（`package.json`の`scripts`を参照）\n\n## 開発環境構築\n\n1. プロジェクトフォルダ全体をダウンロードして、`package.json`があるディレクトリをカレントディレクトリとする\n2. [Node.js / npm](https://nodejs.org/ja/) をインストールして`npm install`を実行する。\n3. [Visual Studio Code](https://code.visualstudio.com/) をインストール\n4. VSCode上で、拡張機能の [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) をインストール\n5. `examples`の中身をいじって作りたいマクロを作る。\n\n次のような操作が行えます。\n\n- ビルドは、`npm run build`\n- 型定義ファイル(`d.ts`)の作成は、`npm run dts`\n- ヘルプファイルの作成は、`npm run doc`\n- サンプルファイルの実行は、`npm run start` (`JScript`でサンプルファイルが実行される)\n\n## konpeito について\n\n[npm](https://www.npmjs.com/package/konpeito) で公開している高機能数値計算ライブラリ [konpeito](https://github.com/natade-jp/konpeito) です。本ライブラリ `konpeitoWSH` はここから `WSH JScript` 用に機能を絞ったものとなります。主に以下の点を変更しています。\n\n- ES3で未対応の `get`, `set` を使用しない\n- 予約語を用いたメソッド名をつけない（分散を表す `var` など）\n- 作成したクラスを用いた `instanceof` を使用しない\n\n## Author\n\n- [natade-jp](https://github.com/natade-jp/)\n",
    "longname": "D:\\JavaScript\\konpeitoWSH\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n\t\"name\": \"konpeito_wsh\",\n\t\"version\": \"1.0.0\",\n\t\"description\": \"The collection of javascirpt library such as numerical calculation.\",\n\t\"author\": \"natade-jp <natade3@gmail.com> (https://github.com/natade-jp)\",\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"https://github.com/natade-jp/konpeitoWSH.git\"\n\t},\n\t\"license\": \"MIT\",\n\t\"main\": \"./build/konpeitoWSH.js\",\n\t\"keywords\": [\n\t\t\"wsh\",\n\t\t\"math\",\n\t\t\"mathematics\",\n\t\t\"complex\",\n\t\t\"matrix\",\n\t\t\"algebra\",\n\t\t\"statistics\",\n\t\t\"svd\"\n\t],\n\t\"directories\": {\n\t\t\"src\": \"./src\",\n\t\t\"build\": \"./build\"\n\t},\n\t\"scripts\": {\n\t\t\"build\": \"node ./scripts/package.build.js\",\n\t\t\"dts\": \"node ./scripts/package.dts.js\",\n\t\t\"doc\": \"node ./scripts/package.doc.js\"\n\t},\n\t\"devDependencies\": {\n\t\t\"@types/windows-script-host\": \"^5.8.3\",\n\t\t\"esdoc\": \"^1.1.0\",\n\t\t\"esdoc-standard-plugin\": \"^1.0.0\",\n\t\t\"eslint\": \"^6.5.1\",\n\t\t\"jsdoc\": \"^3.6.3\",\n\t\t\"jsdoc-export-default-interop\": \"^0.3.1\",\n\t\t\"mojijs\": \"^3.0.3\",\n\t\t\"rollup\": \"^1.23.1\",\n\t\t\"rollup-plugin-buble\": \"^0.19.8\",\n\t\t\"rollup-plugin-uglify\": \"^6.0.3\",\n\t\t\"rollup-plugin-uglify-es\": \"0.0.1\",\n\t\t\"tsd-jsdoc\": \"^2.4.0\"\n\t},\n\t\"dependencies\": {}\n}\n",
    "longname": "D:\\JavaScript\\konpeitoWSH\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]